{"ast":null,"code":"import { s as subscriptionsStoreName } from '../constants-4d9682b2.js';\nexport { s as subscriptionsStoreName } from '../constants-4d9682b2.js';\nimport { createSlice, createAction, combineReducers } from '@reduxjs/toolkit';\nimport { takeEvery, select, put, call, delay, all } from 'redux-saga/effects';\nimport { ISubscriptionStatus, PaymentMethodType as PaymentMethodType$1, api, ISubscriptionCancellationPolicy, ProviderType } from '@frontegg/rest-api';\n\nfunction createModuleCaseReducers() {\n  return {\n    setLoading: {\n      prepare: payload => ({\n        payload\n      }),\n      reducer: (state, action) => Object.assign(Object.assign(Object.assign({}, state), {\n        loading: action.payload\n      }), action.payload ? {\n        error: null\n      } : {})\n    },\n    setError: {\n      prepare: payload => ({\n        payload\n      }),\n      reducer: (state, action) => Object.assign(Object.assign({}, state), {\n        error: action.payload,\n        loading: false,\n        fetching: false\n      })\n    },\n    setState: {\n      prepare: payload => ({\n        payload\n      }),\n      reducer: (state, action) => Object.assign(Object.assign({}, state), action.payload)\n    }\n  };\n}\n\nfunction createKeyCaseReducer(key, setState) {\n  return {\n    prepare: payload => ({\n      payload\n    }),\n    reducer: (state, action) => Object.assign(Object.assign({}, state), {\n      [key]: setState(state[key], action)\n    })\n  };\n}\n\nfunction createKeyCaseLoadingReducer(key) {\n  return createKeyCaseReducer(key, (state, action) => Object.assign(Object.assign({}, state), {\n    loading: action.payload\n  }));\n}\n\nfunction createKeyCaseErrorReducer(key) {\n  return createKeyCaseReducer(key, (state, action) => Object.assign(Object.assign({}, state), {\n    error: action.payload,\n    loading: false\n  }));\n}\n\nconst plansInitialState = {\n  loading: false,\n  error: null,\n  fetching: true,\n  plans: []\n};\nconst {\n  actions: sliceActions$2,\n  reducer: reducer$9,\n  name: name$8\n} = createSlice({\n  name: `${subscriptionsStoreName}/plans`,\n  initialState: plansInitialState,\n  reducers: Object.assign({}, createModuleCaseReducers())\n});\nconst actions$9 = Object.assign({\n  loadPlans: createAction(`${name$8}/loadPlans`)\n}, sliceActions$2);\nconst configInitialState = {\n  loading: false,\n  error: null,\n  fetching: true,\n  config: null\n};\nconst reducers$6 = Object.assign({}, createModuleCaseReducers());\nconst {\n  actions: configActions,\n  reducer: reducer$8,\n  name: name$7\n} = createSlice({\n  name: `${subscriptionsStoreName}/config`,\n  initialState: configInitialState,\n  reducers: reducers$6\n});\nconst actions$8 = Object.assign({\n  loadPaymentConfiguration: createAction(`${name$7}/loadPaymentConfiguration`)\n}, configActions);\nconst initialSubscriptionState = {\n  loading: false,\n  error: null,\n  fetching: true,\n  cancellation: {\n    loading: false,\n    error: null\n  },\n  renewal: {\n    loading: false,\n    error: null\n  }\n};\nconst reducers$5 = Object.assign(Object.assign({}, createModuleCaseReducers()), {\n  setCancellationLoading: createKeyCaseLoadingReducer('cancellation'),\n  setCancellationError: createKeyCaseErrorReducer('cancellation'),\n  setRenewalLoading: createKeyCaseLoadingReducer('renewal'),\n  setRenewalError: createKeyCaseErrorReducer('renewal')\n});\nconst {\n  reducer: reducer$7,\n  actions: overviewActions$1,\n  name: name$6\n} = createSlice({\n  name: `${subscriptionsStoreName}/billing/subscription`,\n  initialState: initialSubscriptionState,\n  reducers: reducers$5\n});\nconst actions$7 = Object.assign({\n  load: createAction(`${name$6}/loadSubscription`),\n  cancelSubscription: createAction(`${name$6}/cancelSubscription`),\n  renewSubscription: createAction(`${name$6}/renewSubscription`)\n}, overviewActions$1);\nconst initialBillingInformationState = {\n  loading: false,\n  error: null,\n  fetching: true\n};\nconst reducers$4 = Object.assign({}, createModuleCaseReducers());\nconst {\n  reducer: reducer$6,\n  actions: overviewActions,\n  name: name$5\n} = createSlice({\n  name: `${subscriptionsStoreName}/billing/information`,\n  initialState: initialBillingInformationState,\n  reducers: reducers$4\n});\nconst actions$6 = Object.assign({\n  loadBillingInformation: createAction(`${name$5}/loadBillingInformation`),\n  cancelSubscription: actions$7.cancelSubscription,\n  renewSubscription: actions$7.renewSubscription\n}, overviewActions);\nconst initialPaymentMethodState = {\n  loading: false,\n  error: null,\n  fetching: true\n};\nconst reducers$3 = Object.assign(Object.assign({}, createModuleCaseReducers()), {\n  setState: {\n    prepare: payload => ({\n      payload\n    }),\n    reducer: (state, action) => Object.assign(Object.assign({}, state), action.payload)\n  }\n});\nconst {\n  reducer: reducer$5,\n  actions: paymentActions,\n  name: name$4\n} = createSlice({\n  name: `${subscriptionsStoreName}/billing/payment`,\n  initialState: initialPaymentMethodState,\n  reducers: reducers$3\n});\nconst actions$5 = Object.assign({\n  loadPaymentMethod: createAction(`${name$4}/loadPaymentMethod`),\n  submitPaymentMethod: createAction(`${name$4}/submitPaymentMethod`),\n  submitPaymentMethodError: createAction(`${name$4}/submitPaymentMethodError`),\n  submitPaymentMethodSuccess: createAction(`${name$4}/submitPaymentMethodSuccess`),\n  updatePaymentMethodBillingDetails: createAction(`${name$4}/updateBillingDetails`, payload => ({\n    payload\n  }))\n}, paymentActions);\nconst initialInvoicesState = {\n  loading: false,\n  error: null,\n  fetching: true,\n  invoices: [],\n  invoiceDownload: {\n    loading: false,\n    error: null\n  }\n};\nconst reducers$2 = Object.assign(Object.assign({}, createModuleCaseReducers()), {\n  setInvoiceDownloadState: {\n    prepare: payload => ({\n      payload\n    }),\n    reducer: (state, action) => Object.assign(Object.assign({}, state), {\n      invoiceDownload: Object.assign(Object.assign({}, state.invoiceDownload), action.payload)\n    })\n  }\n});\nconst {\n  reducer: reducer$4,\n  actions: sliceActions$1,\n  name: name$3\n} = createSlice({\n  name: `${subscriptionsStoreName}/billing/invoices`,\n  initialState: initialInvoicesState,\n  reducers: reducers$2\n});\nconst actions$4 = Object.assign({\n  loadInvoices: createAction(`${name$3}/loadInvoices`),\n  downloadInvoice: createAction(`${name$3}/downloadInvoice`, payload => ({\n    payload\n  }))\n}, sliceActions$1);\nconst billingInitialState = {\n  information: initialBillingInformationState,\n  invoices: initialInvoicesState,\n  paymentMethod: initialPaymentMethodState,\n  subscription: initialSubscriptionState\n};\nconst billingActions = {\n  invoices: actions$4,\n  information: actions$6,\n  paymentMethod: actions$5,\n  subscription: actions$7\n};\nconst billingReducer = combineReducers({\n  invoices: reducer$4,\n  information: reducer$6,\n  paymentMethod: reducer$5,\n  subscription: reducer$7\n});\nconst checkoutInitialState = {\n  fetching: true,\n  loading: false,\n  error: null,\n  confirmed: false\n};\nconst reducers$1 = Object.assign({}, createModuleCaseReducers());\nconst {\n  actions: checkoutActions,\n  reducer: reducer$3,\n  name: name$2\n} = createSlice({\n  name: `${subscriptionsStoreName}/checkout`,\n  initialState: checkoutInitialState,\n  reducers: reducers$1\n});\nconst actions$3 = Object.assign({\n  loadCheckout: createAction(`${name$2}/loadCheckout`),\n  resetCheckout: createAction(`${name$2}/resetCheckout`),\n  submitCheckout: createAction(`${name$2}/submitCheckout`),\n  confirmCheckout: createAction(`${name$2}/confirmCheckout`, payload => ({\n    payload\n  })),\n  errorCheckout: createAction(`${name$2}/errorCheckout`, payload => ({\n    payload\n  }))\n}, checkoutActions);\nconst initialSubscriptionStripeState = {\n  loading: false,\n  error: null,\n  cardSetupIntentSecret: null\n};\nconst reducers = Object.assign({}, createModuleCaseReducers());\nconst {\n  reducer: reducer$2,\n  actions: reducerActions,\n  name: name$1\n} = createSlice({\n  name: `${subscriptionsStoreName}/stripe`,\n  initialState: initialSubscriptionStripeState,\n  reducers\n});\nconst actions$2 = Object.assign({\n  loadCustomer: createAction(`${name$1}/loadCustomer`),\n  createCardSetupIntentSecret: createAction(`${name$1}/createCardSetupIntentSecret`)\n}, reducerActions);\nconst vendorPublicConfigInitialState = {\n  loading: false,\n  fetching: true,\n  vendorPublicConfig: null\n};\nconst {\n  actions: sliceActions,\n  reducer: reducer$1,\n  name\n} = createSlice({\n  name: `${subscriptionsStoreName}/vendorPublicConfig`,\n  initialState: vendorPublicConfigInitialState,\n  reducers: Object.assign({}, createModuleCaseReducers())\n});\nconst actions$1 = Object.assign({\n  loadVendorPublicConfiguration: createAction(`${name}/loadVendorPublicConfiguration`)\n}, sliceActions);\nconst initialState = {\n  config: configInitialState,\n  plans: plansInitialState,\n  checkout: checkoutInitialState,\n  billing: billingInitialState,\n  stripe: initialSubscriptionStripeState,\n  vendorPublicConfig: vendorPublicConfigInitialState\n};\nconst actions = {\n  config: actions$8,\n  billing: billingActions,\n  plans: actions$9,\n  checkout: actions$3,\n  stripe: actions$2,\n  vendorPublicConfig: actions$1\n};\nconst reducer = combineReducers({\n  config: reducer$8,\n  billing: billingReducer,\n  plans: reducer$9,\n  checkout: reducer$3,\n  stripe: reducer$2,\n  vendorPublicConfig: reducer$1\n});\nvar PaymentProvider;\n\n(function (PaymentProvider) {\n  PaymentProvider[\"STRIPE\"] = \"Stripe\";\n})(PaymentProvider || (PaymentProvider = {}));\n\nvar SubscriptionStatus;\n\n(function (SubscriptionStatus) {\n  SubscriptionStatus[\"ACTIVE\"] = \"ACTIVE\";\n  SubscriptionStatus[\"CANCELED\"] = \"CANCELED\";\n  SubscriptionStatus[\"INCOMPLETE\"] = \"INCOMPLETE\";\n  SubscriptionStatus[\"EXPIRED\"] = \"EXPIRED\";\n  SubscriptionStatus[\"TRIALING\"] = \"TRIALING\";\n})(SubscriptionStatus || (SubscriptionStatus = {}));\n\nvar SubscriptionCancellationPolicy;\n\n(function (SubscriptionCancellationPolicy) {\n  SubscriptionCancellationPolicy[\"AT_PERIOD_END\"] = \"atPeriodEnd\";\n})(SubscriptionCancellationPolicy || (SubscriptionCancellationPolicy = {}));\n\nfunction toSubscriptionCancellation({\n  policy\n}) {\n  return {\n    policy: toSubscriptionCancellationPolicy()\n  };\n}\n\nfunction toSubscriptionCancellationPolicy(policy) {\n  return SubscriptionCancellationPolicy.AT_PERIOD_END;\n}\n\nfunction toSubscriptionStatus(status) {\n  switch (status) {\n    case ISubscriptionStatus.ACTIVE:\n      return SubscriptionStatus.ACTIVE;\n\n    case ISubscriptionStatus.INCOMPLETE:\n      return SubscriptionStatus.INCOMPLETE;\n\n    case ISubscriptionStatus.CANCELED:\n      return SubscriptionStatus.CANCELED;\n\n    case ISubscriptionStatus.EXPIRED:\n      return SubscriptionStatus.EXPIRED;\n\n    case ISubscriptionStatus.TRIALING:\n      return SubscriptionStatus.TRIALING;\n\n    default:\n      return SubscriptionStatus.EXPIRED;\n  }\n}\n\nconst subscriptionResponseMock = {\n  id: 'sub_1JbhYVEwsu4qiqnnfMhYAdY6',\n  externalId: 'sub_1JbhYVEwsu4qiqnnfMhYAdY6',\n  startDate: '2021-09-20T08:08:51.000Z',\n  status: ISubscriptionStatus.ACTIVE,\n  externallyManaged: false,\n  cancellation: null,\n  currentPeriodStart: '2021-09-20T08:08:51.000Z',\n  currentPeriodEnd: '2021-10-20T08:08:51.000Z',\n  plan: {\n    // TODO: fix dummy data\n    slug: 'test'\n  }\n};\nconst planResponseMock = [{\n  id: 'prod_J60fUEvI7qV1eL',\n  externalId: 'prod_J60fUEvI7qV1eL',\n  name: 'Premium',\n  description: '',\n  price: {\n    id: 'price_1IToe8Ewsu4qiqnndAV76J69',\n    externalId: 'price_1IToe8Ewsu4qiqnndAV76J69',\n    currency: 'usd',\n    amount: 10000\n  },\n  slug: 'premium'\n}, {\n  id: 'prod_J60duauCpXfcur',\n  externalId: 'prod_J60duauCpXfcur',\n  name: 'Free',\n  description: 'Totally free plan. Nothing to pay.',\n  price: {\n    id: 'price_1ITocfEwsu4qiqnnnBHDx9fQ',\n    externalId: 'price_1ITocfEwsu4qiqnnnBHDx9fQ',\n    currency: 'usd',\n    amount: 0\n  },\n  slug: 'free'\n}];\nconst invoicesMock = [{\n  id: 'in_1JbhYWEwsu4qiqnnrUh6hsHa',\n  externalId: 'in_1JbhYWEwsu4qiqnnrUh6hsHa',\n  subscriptionId: 'sub_1JbhYVEwsu4qiqnnfMhYAdY6',\n  paymentDate: '2021-09-20T08:08:51.000Z',\n  totalAmount: 10000,\n  currency: 'usd',\n  paid: true,\n  receiptNumber: ''\n}, {\n  id: 'in_1JbhYWEwsu4qiqnnrUh6hsHa',\n  externalId: 'in_1JbhYWEwsu4qiqnnrUh6hsHa',\n  subscriptionId: 'sub_1JbhYVEwsu4qiqnnfMhYAdY6',\n  paymentDate: '2021-08-20T08:08:51.000Z',\n  totalAmount: 10000,\n  currency: 'usd',\n  paid: true,\n  receiptNumber: ''\n}];\nconst paymentMethodsMock = [{\n  id: 'id',\n  externalId: 'externalId',\n  type: PaymentMethodType$1.CARD,\n  isDefault: true,\n  last4: '4242',\n  expMonth: 11,\n  expYear: 25,\n  brand: 'visa',\n  billingDetails: {\n    name: 'Dummy',\n    email: 'dummy@email.com'\n  }\n}];\nconst vendorPublicConfigurationResponseMock = {\n  allowPlanDowngrade: true,\n  allowPlanCancellation: true\n};\n\nfunction* subscriptionSagas() {\n  yield takeEvery(actions$7.load, loadSubscriptionTenant);\n  yield takeEvery(actions$7.cancelSubscription, cancelSubscription);\n  yield takeEvery(actions$7.renewSubscription, renewSubscription);\n}\n\nfunction* loadSubscriptionTenant() {\n  const tenantId = yield select(state => {\n    var _a, _b;\n\n    return (_b = (_a = state.auth) === null || _a === void 0 ? void 0 : _a.user) === null || _b === void 0 ? void 0 : _b.tenantId;\n  });\n  yield loadSummaries(tenantId);\n}\n\nfunction* loadSubscription() {\n  yield put(actions$7.setLoading(true));\n\n  try {\n    const [subscription] = yield call(api.subscriptions.getManagedSubscriptions);\n    yield put(actions$7.setState({\n      subscription,\n      fetching: false,\n      loading: false,\n      error: null\n    }));\n  } catch (e) {\n    yield put(actions$7.setError(e));\n  }\n}\n\nfunction* cancelSubscription() {\n  const {\n    subscription\n  } = yield select(state => state.subscriptions.billing.subscription);\n\n  if (!subscription) {\n    yield put(actions$7.setCancellationError('Subscription not found.'));\n    return;\n  }\n\n  if (subscription === null || subscription === void 0 ? void 0 : subscription.externallyManaged) {\n    yield put(actions$7.setCancellationError('Billing is externally managed.'));\n    return;\n  }\n\n  const {\n    id: subscriptionId,\n    cancellation,\n    status\n  } = subscription || {};\n  const isCancellable = !cancellation && status === ISubscriptionStatus.ACTIVE;\n\n  if (isCancellable) {\n    try {\n      yield put(actions$7.setCancellationLoading(true));\n      yield call(api.subscriptions.cancelManagedSubscription, subscriptionId);\n      yield loadSubscription();\n      yield put(actions$7.setCancellationLoading(false));\n    } catch (e) {\n      yield put(actions$7.setCancellationError(e.message));\n    }\n  }\n}\n\nfunction* renewSubscription() {\n  const {\n    subscription\n  } = yield select(state => state.subscriptions.billing.subscription);\n\n  if (!subscription) {\n    yield put(actions$7.setCancellationError('Subscription not found.'));\n    return;\n  }\n\n  if (subscription === null || subscription === void 0 ? void 0 : subscription.externallyManaged) {\n    yield put(actions$7.setCancellationError('Billing is externally managed'));\n    return;\n  }\n\n  const {\n    id: subscriptionId,\n    cancellation\n  } = subscription || {};\n  const renewable = (cancellation === null || cancellation === void 0 ? void 0 : cancellation.policy) === ISubscriptionCancellationPolicy.AT_PERIOD_END;\n\n  if (renewable) {\n    try {\n      yield put(actions$7.setRenewalLoading(true));\n      yield call(api.subscriptions.renewManagedSubscription, subscriptionId);\n      yield loadSubscription();\n      yield put(actions$7.setRenewalLoading(false));\n    } catch (e) {\n      yield put(actions$7.setCancellationError(e.message));\n    }\n  }\n}\n/*********************************\r\n *  Preview Sagas\r\n *********************************/\n\n\nfunction* loadMock() {\n  yield put(actions$7.setLoading(true));\n  yield delay(500);\n  yield put(actions$7.setState({\n    subscription: subscriptionResponseMock,\n    fetching: false,\n    loading: false,\n    error: null\n  }));\n}\n\nfunction* subscriptionSagasMock() {\n  yield takeEvery(actions$7.load, loadMock);\n}\n\nfunction* subscriptionBillingInformationSagas() {\n  yield takeEvery(actions$6.loadBillingInformation, loadBillingInformation);\n}\n\nfunction* loadBillingInformation() {\n  yield loadBillingInformationAction(false);\n}\n\nfunction* loadBillingInformationAction(forceActive) {\n  const paymentProvider = yield select(state => {\n    var _a;\n\n    return (_a = state.subscriptions.config.config) === null || _a === void 0 ? void 0 : _a.paymentProvider;\n  });\n  const tenantId = yield select(state => {\n    var _a, _b;\n\n    return (_b = (_a = state.auth) === null || _a === void 0 ? void 0 : _a.user) === null || _b === void 0 ? void 0 : _b.tenantId;\n  });\n\n  if (!paymentProvider || !tenantId) {\n    yield put(actions$6.setError(!paymentProvider ? 'Internal feature failure' : 'Not authorized'));\n    return;\n  }\n\n  yield loadSummaries(tenantId, forceActive);\n}\n\nfunction* loadSummaries(tenantId, forceActive) {\n  var _a, _b;\n\n  yield put(actions$6.setLoading(true));\n\n  try {\n    const summary = yield call(api.subscriptions.getSubscriptionSummaries, tenantId);\n    const {\n      currentPlanId,\n      externallyManaged\n    } = summary;\n    let subscriptionResponse = null;\n    let planResponse;\n\n    if (!externallyManaged) {\n      [, planResponse] = yield all([yield loadSubscription(), call(api.subscriptions.getSubscriptionPlan, currentPlanId)]);\n      subscriptionResponse = yield select(state => state.subscriptions.billing.subscription.subscription || null);\n    } else {\n      planResponse = yield call(api.subscriptions.getSubscriptionPlan, currentPlanId);\n    }\n\n    yield put(actions$6.setState(Object.assign(Object.assign({\n      loading: false,\n      fetching: false,\n      summary\n    }, subscriptionResponse ? {\n      subscription: {\n        id: subscriptionResponse.id,\n        externalId: subscriptionResponse.externalId,\n        startDate: subscriptionResponse.startDate,\n        currentPeriodStart: subscriptionResponse.currentPeriodStart,\n        currentPeriodEnd: subscriptionResponse.currentPeriodEnd,\n        status: forceActive ? SubscriptionStatus.ACTIVE : toSubscriptionStatus(subscriptionResponse.status),\n        cancellation: subscriptionResponse.cancellation && toSubscriptionCancellation(subscriptionResponse.cancellation),\n        trialEnd: subscriptionResponse.trialEnd ? subscriptionResponse.trialEnd : null\n      }\n    } : {}), planResponse ? {\n      plan: {\n        id: planResponse.id,\n        name: planResponse.name,\n        description: planResponse.description,\n        price: ((_a = planResponse.price) === null || _a === void 0 ? void 0 : _a.amount) || 0,\n        currency: ((_b = planResponse.price) === null || _b === void 0 ? void 0 : _b.currency) || 'usd',\n        recurringInterval: 'month',\n        slug: planResponse.slug\n      }\n    } : {})));\n  } catch (e) {\n    yield put(actions$6.setError(e.message));\n  }\n}\n/*********************************\r\n *  Preview Sagas\r\n *********************************/\n\n\nfunction* loadBillingInformationMock() {\n  yield loadSummariesMock();\n}\n\nfunction* loadSummariesMock() {\n  var _a, _b;\n\n  yield put(actions$6.setLoading(true));\n  yield delay(500);\n  yield put(actions$6.setState({\n    loading: false,\n    fetching: false,\n    summary: {\n      subscriptionId: subscriptionResponseMock.id,\n      paymentMethodId: 'mockPaymentMethodId',\n      tenantConfigurationId: 'mockTenantConfigurationId',\n      providerType: ProviderType.Stripe,\n      externallyManaged: false,\n      currentPlanId: planResponseMock[0].id,\n      defaultPlanId: planResponseMock[0].id\n    },\n    plan: Object.assign(Object.assign({}, planResponseMock[0]), {\n      price: (_a = planResponseMock[0].price) === null || _a === void 0 ? void 0 : _a.amount,\n      currency: (_b = planResponseMock[0].price) === null || _b === void 0 ? void 0 : _b.currency,\n      recurringInterval: 'month'\n    })\n  }));\n}\n\nfunction* subscriptionBillingInformationSagasMock() {\n  yield takeEvery(actions$6.loadBillingInformation, loadBillingInformationMock);\n}\n\nfunction* subscriptionsPaymentMethodSagas() {\n  yield takeEvery(actions$5.loadPaymentMethod, loadPaymentMethod);\n  yield takeEvery(actions$5.submitPaymentMethod, submitPaymentMethod);\n  yield takeEvery(actions$5.submitPaymentMethodError, submitPaymentMethodError);\n  yield takeEvery(actions$5.submitPaymentMethodSuccess, submitPaymentMethodSuccess);\n  yield takeEvery(actions$5.updatePaymentMethodBillingDetails, updateBillingDetails);\n}\n\nfunction* loadPaymentMethod() {\n  yield put(actions$5.setLoading(true));\n\n  try {\n    const paymentMethods = yield call(api.subscriptions.getPaymentMethods);\n    const paymentMethod = paymentMethods[0];\n    yield put(actions$5.setState({\n      paymentMethod,\n      loading: false,\n      fetching: false\n    }));\n  } catch (e) {\n    yield put(actions$5.setError(e.message));\n  }\n}\n\nfunction* updateBillingDetails({\n  payload\n}) {\n  yield put(actions$5.setLoading(true));\n  const {\n    id,\n    email,\n    address,\n    callback\n  } = payload;\n\n  try {\n    yield call(api.subscriptions.updatePaymentMethodBillingDetails, id, Object.assign({\n      email\n    }, address));\n    yield call(loadPaymentMethod);\n    callback === null || callback === void 0 ? void 0 : callback(true);\n  } catch (e) {\n    yield put(actions$5.setError(e.message));\n    callback === null || callback === void 0 ? void 0 : callback(false);\n  }\n\n  yield put(actions$5.setLoading(false));\n}\n\nfunction* submitPaymentMethod() {\n  yield put(actions$5.setLoading(true));\n}\n\nfunction* submitPaymentMethodError({\n  payload: error\n}) {\n  yield put(actions$5.setError(error));\n}\n\nfunction* submitPaymentMethodSuccess() {\n  yield put(actions$5.loadPaymentMethod());\n}\n/*********************************\r\n *  Preview Sagas\r\n *********************************/\n\n\nfunction* loadPaymentMethodMock() {\n  yield put(actions$5.setLoading(true));\n  yield delay(500);\n  const paymentMethod = paymentMethodsMock[0];\n  yield put(actions$5.setState({\n    paymentMethod,\n    loading: false,\n    fetching: false\n  }));\n}\n\nfunction* subscriptionsPaymentMethodSagasMock() {\n  yield takeEvery(actions$5.loadPaymentMethod, loadPaymentMethodMock);\n}\n\nfunction* subscriptionInvoicesSagas() {\n  yield takeEvery(actions$4.loadInvoices, loadInvoices);\n  yield takeEvery(actions$4.downloadInvoice, downloadInvoice);\n}\n\nfunction* loadInvoices() {\n  yield put(actions$4.setLoading(true));\n\n  try {\n    const responseInvoices = yield call(api.subscriptions.getSubscriptionInvoices);\n    const invoices = responseInvoices.map(invoice => ({\n      id: invoice.id,\n      externalId: invoice.externalId,\n      subscriptionId: invoice.subscriptionId,\n      paymentDate: new Date(Date.parse(invoice.paymentDate)),\n      totalAmount: +((invoice.totalAmount || 0) / 100).toFixed(2),\n      currency: invoice.currency || 'usd',\n      paid: invoice.paid || false,\n      receiptNumber: invoice.receiptNumber\n    }));\n    yield put(actions$4.setState({\n      loading: false,\n      fetching: false,\n      invoices\n    }));\n  } catch (e) {\n    yield put(actions$4.setError(e.message));\n  }\n}\n\nfunction* downloadInvoice({\n  payload\n}) {\n  yield put(actions$4.setInvoiceDownloadState({\n    loading: true,\n    error: null\n  }));\n\n  try {\n    yield call(api.subscriptions.getSubscriptionInvoicePdf, payload.invoiceId, payload.filename);\n    yield put(actions$4.setInvoiceDownloadState({\n      loading: false,\n      error: null\n    }));\n  } catch (e) {\n    yield put(actions$4.setInvoiceDownloadState({\n      loading: false,\n      error: e.message || null\n    }));\n  }\n}\n/*********************************\r\n *  Preview Sagas\r\n *********************************/\n\n\nfunction* loadInvoicesMock() {\n  yield put(actions$4.setLoading(true));\n  yield delay(500);\n  const selectPlanTitle = 'Premium';\n  yield put(actions$4.setState({\n    loading: false,\n    fetching: false,\n    invoices: invoicesMock.map(invoice => Object.assign(Object.assign({}, invoice), {\n      selectedPlan: selectPlanTitle,\n      paymentDate: new Date(Date.parse(invoice.paymentDate)),\n      totalAmount: +((invoice.totalAmount || 0) / 100).toFixed(2)\n    }))\n  }));\n  yield put(actions$4.setLoading(false));\n}\n\nfunction* subscriptionInvoicesSagasMock() {\n  yield takeEvery(actions$4.loadInvoices, loadInvoicesMock);\n}\n\nfunction* billingSagas() {\n  yield all([call(subscriptionBillingInformationSagas), call(subscriptionsPaymentMethodSagas), call(subscriptionInvoicesSagas), call(subscriptionSagas)]);\n}\n\nfunction* billingSagasMock() {\n  yield all([call(subscriptionBillingInformationSagasMock), call(subscriptionsPaymentMethodSagasMock), call(subscriptionInvoicesSagasMock), call(subscriptionSagasMock)]);\n}\n\nfunction* checkoutSagas() {\n  yield takeEvery(actions$3.loadCheckout, loadCheckout);\n  yield takeEvery(actions$3.resetCheckout, resetCheckout);\n  yield takeEvery(actions$3.submitCheckout, submitCheckout);\n  yield takeEvery(actions$3.confirmCheckout, confirmPlan);\n  yield takeEvery(actions$3.errorCheckout, errorCheckout);\n}\n\nfunction* loadCheckout() {\n  yield put(actions$3.setState({\n    fetching: false,\n    loading: false,\n    error: null,\n    confirmed: false\n  }));\n}\n\nfunction* resetCheckout() {\n  yield put(actions$3.setState({\n    loading: false,\n    error: null,\n    confirmed: false\n  }));\n}\n/**\r\n * Based on payment provider type\r\n */\n\n\nfunction* submitCheckout() {\n  yield put(actions$3.setState({\n    loading: true,\n    error: null\n  }));\n}\n\nfunction* confirmPlan({\n  payload: {\n    paymentMethodId,\n    planId\n  }\n}) {\n  const subscription = yield select(state => state.subscriptions.billing.subscription.subscription);\n  const summary = yield select(state => state.subscriptions.billing.information.summary);\n  const isTrialing = (subscription === null || subscription === void 0 ? void 0 : subscription.status) === SubscriptionStatus.TRIALING;\n  const hasPaymentMethod = !!(summary === null || summary === void 0 ? void 0 : summary.paymentMethodId);\n\n  if (!subscription) {\n    yield put(actions$3.setState({\n      loading: false,\n      error: 'Subscription not found'\n    }));\n    return;\n  }\n\n  yield put(actions$3.setState({\n    loading: true,\n    error: null\n  }));\n\n  if (isTrialing && hasPaymentMethod) {\n    yield confirmCheckout();\n    yield put(actions$7.setState({\n      subscription: Object.assign(Object.assign({}, subscription), {\n        status: ISubscriptionStatus.ACTIVE\n      })\n    }));\n    return;\n  }\n\n  try {\n    yield call(api.subscriptions.updateManagedSubscription, subscription.id, {\n      paymentMethodId,\n      planId\n    });\n    yield all([loadBillingInformation(), loadPaymentMethod(), loadInvoices()]);\n    yield confirmCheckout();\n  } catch (e) {\n    yield put(actions$3.setState({\n      loading: false,\n      error: e.message\n    }));\n  }\n}\n\nfunction* confirmCheckout() {\n  yield put(actions$3.setState({\n    loading: false,\n    error: null,\n    confirmed: true\n  }));\n}\n\nfunction* errorCheckout({\n  payload\n}) {\n  yield put(actions$3.setState({\n    loading: false,\n    error: payload\n  }));\n}\n/*********************************\r\n *  Preview Sagas\r\n *********************************/\n\n\nfunction* checkoutSagasMock() {\n  yield takeEvery(actions$3.resetCheckout, resetCheckout);\n}\n\nfunction* plansSagas() {\n  yield takeEvery(actions$9.loadPlans, loadPlans);\n}\n\nfunction* loadPlans() {\n  yield put(actions$9.setLoading(true));\n\n  try {\n    const products = yield call(api.subscriptions.getSubscriptionPlans);\n    const plans = products.map(item => {\n      var _a, _b;\n\n      return {\n        id: item.id,\n        name: item.name,\n        description: item.description,\n        price: ((_a = item.price) === null || _a === void 0 ? void 0 : _a.amount) || 0,\n        currency: ((_b = item.price) === null || _b === void 0 ? void 0 : _b.currency) || 'usd',\n        recurringInterval: 'month',\n        slug: item.slug\n      };\n    });\n    yield put(actions$9.setState({\n      fetching: false,\n      loading: false,\n      plans\n    }));\n  } catch (e) {\n    yield put(actions$9.setError(e.message));\n  }\n}\n/*********************************\r\n *  Preview Sagas\r\n *********************************/\n\n\nfunction* loadPlansMock() {\n  yield put(actions$9.setLoading(true));\n  yield delay(500);\n  yield put(actions$9.setState({\n    fetching: false,\n    loading: false,\n    plans: planResponseMock.map(item => {\n      var _a, _b;\n\n      return Object.assign(Object.assign({}, item), {\n        price: ((_a = item.price) === null || _a === void 0 ? void 0 : _a.amount) || 0,\n        currency: ((_b = item.price) === null || _b === void 0 ? void 0 : _b.currency) || 'usd',\n        recurringInterval: 'month'\n      });\n    })\n  }));\n}\n\nfunction* plansSagasMock() {\n  yield takeEvery(actions$9.loadPlans, loadPlansMock);\n}\n\nvar PaymentMethodType;\n\n(function (PaymentMethodType) {\n  PaymentMethodType[\"UNKNWON\"] = \"unknown\";\n  PaymentMethodType[\"CARD\"] = \"card\";\n})(PaymentMethodType || (PaymentMethodType = {}));\n\nfunction* configSagas() {\n  yield takeEvery(actions$8.loadPaymentConfiguration, loadPaymentConfiguration);\n}\n\nfunction* loadPaymentConfiguration() {\n  yield put(actions$8.setLoading(true));\n\n  try {\n    const response = yield call(api.subscriptions.getPaymentProviders) || [];\n    const stripePaymentProvider = response.find(paymentProvider => paymentProvider.status === '1' && paymentProvider.providerType === ProviderType.Stripe);\n\n    if (stripePaymentProvider) {\n      yield loadStripePaymentConfiguration();\n    } else {\n      yield put(actions$8.setError('Payment provider not configured'));\n    }\n  } catch (e) {\n    yield put(actions$8.setError(e.message));\n  }\n}\n\nfunction* loadStripePaymentConfiguration() {\n  yield put(actions$8.setLoading(true));\n\n  try {\n    const response = yield call(api.subscriptions.getStripePaymentProviderConfiguration);\n    yield put(actions$8.setState({\n      loading: false,\n      fetching: false,\n      config: {\n        paymentProvider: PaymentProvider.STRIPE,\n        apiKey: response.publishableKey\n      }\n    }));\n  } catch (e) {\n    yield put(actions$8.setError(e.message));\n  }\n}\n/*********************************\r\n *  Preview Sagas\r\n *********************************/\n\n\nfunction* loadPaymentConfigurationMock() {\n  yield put(actions$8.setLoading(true));\n  yield delay(500);\n  yield put(actions$8.setState({\n    loading: false,\n    fetching: false,\n    config: {\n      paymentProvider: PaymentProvider.STRIPE,\n      apiKey: ''\n    }\n  }));\n}\n\nfunction* configSagasMock() {\n  yield takeEvery(actions$8.loadPaymentConfiguration, loadPaymentConfigurationMock);\n}\n\nfunction* subscriptionStripeSagas() {\n  yield takeEvery(actions$2.createCardSetupIntentSecret, createCardSetupIntentSecret);\n}\n\nfunction* createCardSetupIntentSecret({\n  payload\n}) {\n  yield put(actions$2.setState({\n    loading: true,\n    error: null,\n    cardSetupIntentSecret: null\n  }));\n\n  try {\n    const request = {};\n\n    if (payload) {\n      request.paymentMethodId = payload;\n    }\n\n    const {\n      setupIntentSecret\n    } = yield call(api.subscriptions.createStripePaymentMethodSetupIntentSecret, request);\n    yield put(actions$2.setState({\n      cardSetupIntentSecret: setupIntentSecret,\n      loading: false\n    }));\n  } catch (e) {\n    yield put(actions$2.setError(e.message));\n  }\n}\n\nfunction* vendorPublicConfigSagas() {\n  yield takeEvery(actions$1.loadVendorPublicConfiguration, loadVendorPublicConfiguration);\n}\n\nfunction* loadVendorPublicConfiguration() {\n  yield put(actions$1.setLoading(true));\n\n  try {\n    const vendorPublicConfig = yield call(api.subscriptions.getVendorPublicConfigurations);\n    yield put(actions$1.setState({\n      fetching: false,\n      loading: false,\n      vendorPublicConfig\n    }));\n  } catch (e) {\n    yield put(actions$1.setError(e.message));\n  }\n}\n/*********************************\r\n *  Preview Sagas\r\n *********************************/\n\n\nfunction* loadVendorPublicConfigurationMock() {\n  yield put(actions$1.setLoading(true));\n  yield delay(500);\n  yield put(actions$1.setState({\n    fetching: false,\n    loading: false,\n    vendorPublicConfig: vendorPublicConfigurationResponseMock\n  }));\n}\n\nfunction* vendorPublicConfigSagasMock() {\n  yield takeEvery(actions$1.loadVendorPublicConfiguration, loadVendorPublicConfigurationMock);\n}\n\nfunction* sagas() {\n  yield all([call(billingSagas), call(checkoutSagas), call(plansSagas), call(configSagas), call(subscriptionStripeSagas), call(vendorPublicConfigSagas)]);\n}\n\nfunction* mockSagas() {\n  yield all([call(billingSagasMock), call(checkoutSagasMock), call(plansSagasMock), call(configSagasMock), call(vendorPublicConfigSagasMock)]);\n} // export store\n// export store\n\n\nvar subscriptionsStore = {\n  sagas,\n  mockSagas,\n  reducer,\n  actions,\n  initialState,\n  storeName: subscriptionsStoreName\n};\nexport { PaymentMethodType, PaymentProvider, SubscriptionCancellationPolicy, SubscriptionStatus, subscriptionsStore as default, actions as subscriptionActions, initialState as subscriptionInitialState, reducer as subscriptionReducers, sagas as subscriptionSagas, mockSagas as subscriptionSagasMock };","map":{"version":3,"sources":["/Users/mashapav/Downloads/WEB-CHAT/Client/node_modules/@frontegg/redux-store/subscriptions/index.js"],"names":["s","subscriptionsStoreName","createSlice","createAction","combineReducers","takeEvery","select","put","call","delay","all","ISubscriptionStatus","PaymentMethodType","PaymentMethodType$1","api","ISubscriptionCancellationPolicy","ProviderType","createModuleCaseReducers","setLoading","prepare","payload","reducer","state","action","Object","assign","loading","error","setError","fetching","setState","createKeyCaseReducer","key","createKeyCaseLoadingReducer","createKeyCaseErrorReducer","plansInitialState","plans","actions","sliceActions$2","reducer$9","name","name$8","initialState","reducers","actions$9","loadPlans","configInitialState","config","reducers$6","configActions","reducer$8","name$7","actions$8","loadPaymentConfiguration","initialSubscriptionState","cancellation","renewal","reducers$5","setCancellationLoading","setCancellationError","setRenewalLoading","setRenewalError","reducer$7","overviewActions$1","name$6","actions$7","load","cancelSubscription","renewSubscription","initialBillingInformationState","reducers$4","reducer$6","overviewActions","name$5","actions$6","loadBillingInformation","initialPaymentMethodState","reducers$3","reducer$5","paymentActions","name$4","actions$5","loadPaymentMethod","submitPaymentMethod","submitPaymentMethodError","submitPaymentMethodSuccess","updatePaymentMethodBillingDetails","initialInvoicesState","invoices","invoiceDownload","reducers$2","setInvoiceDownloadState","reducer$4","sliceActions$1","name$3","actions$4","loadInvoices","downloadInvoice","billingInitialState","information","paymentMethod","subscription","billingActions","billingReducer","checkoutInitialState","confirmed","reducers$1","checkoutActions","reducer$3","name$2","actions$3","loadCheckout","resetCheckout","submitCheckout","confirmCheckout","errorCheckout","initialSubscriptionStripeState","cardSetupIntentSecret","reducer$2","reducerActions","name$1","actions$2","loadCustomer","createCardSetupIntentSecret","vendorPublicConfigInitialState","vendorPublicConfig","sliceActions","reducer$1","actions$1","loadVendorPublicConfiguration","checkout","billing","stripe","PaymentProvider","SubscriptionStatus","SubscriptionCancellationPolicy","toSubscriptionCancellation","policy","toSubscriptionCancellationPolicy","AT_PERIOD_END","toSubscriptionStatus","status","ACTIVE","INCOMPLETE","CANCELED","EXPIRED","TRIALING","subscriptionResponseMock","id","externalId","startDate","externallyManaged","currentPeriodStart","currentPeriodEnd","plan","slug","planResponseMock","description","price","currency","amount","invoicesMock","subscriptionId","paymentDate","totalAmount","paid","receiptNumber","paymentMethodsMock","type","CARD","isDefault","last4","expMonth","expYear","brand","billingDetails","email","vendorPublicConfigurationResponseMock","allowPlanDowngrade","allowPlanCancellation","subscriptionSagas","loadSubscriptionTenant","tenantId","_a","_b","auth","user","loadSummaries","loadSubscription","subscriptions","getManagedSubscriptions","e","isCancellable","cancelManagedSubscription","message","renewable","renewManagedSubscription","loadMock","subscriptionSagasMock","subscriptionBillingInformationSagas","loadBillingInformationAction","forceActive","paymentProvider","summary","getSubscriptionSummaries","currentPlanId","subscriptionResponse","planResponse","getSubscriptionPlan","trialEnd","recurringInterval","loadBillingInformationMock","loadSummariesMock","paymentMethodId","tenantConfigurationId","providerType","Stripe","defaultPlanId","subscriptionBillingInformationSagasMock","subscriptionsPaymentMethodSagas","updateBillingDetails","paymentMethods","getPaymentMethods","address","callback","loadPaymentMethodMock","subscriptionsPaymentMethodSagasMock","subscriptionInvoicesSagas","responseInvoices","getSubscriptionInvoices","map","invoice","Date","parse","toFixed","getSubscriptionInvoicePdf","invoiceId","filename","loadInvoicesMock","selectPlanTitle","selectedPlan","subscriptionInvoicesSagasMock","billingSagas","billingSagasMock","checkoutSagas","confirmPlan","planId","isTrialing","hasPaymentMethod","updateManagedSubscription","checkoutSagasMock","plansSagas","products","getSubscriptionPlans","item","loadPlansMock","plansSagasMock","configSagas","response","getPaymentProviders","stripePaymentProvider","find","loadStripePaymentConfiguration","getStripePaymentProviderConfiguration","STRIPE","apiKey","publishableKey","loadPaymentConfigurationMock","configSagasMock","subscriptionStripeSagas","request","setupIntentSecret","createStripePaymentMethodSetupIntentSecret","vendorPublicConfigSagas","getVendorPublicConfigurations","loadVendorPublicConfigurationMock","vendorPublicConfigSagasMock","sagas","mockSagas","subscriptionsStore","storeName","default","subscriptionActions","subscriptionInitialState","subscriptionReducers"],"mappings":"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","sourcesContent":["import { s as subscriptionsStoreName } from '../constants-4d9682b2.js';\nexport { s as subscriptionsStoreName } from '../constants-4d9682b2.js';\nimport { createSlice, createAction, combineReducers } from '@reduxjs/toolkit';\nimport { takeEvery, select, put, call, delay, all } from 'redux-saga/effects';\nimport { ISubscriptionStatus, PaymentMethodType as PaymentMethodType$1, api, ISubscriptionCancellationPolicy, ProviderType } from '@frontegg/rest-api';\n\nfunction createModuleCaseReducers() {\r\n    return {\r\n        setLoading: {\r\n            prepare: (payload) => ({ payload }),\r\n            reducer: (state, action) => (Object.assign(Object.assign(Object.assign({}, state), { loading: action.payload }), (action.payload ? { error: null } : {}))),\r\n        },\r\n        setError: {\r\n            prepare: (payload) => ({ payload }),\r\n            reducer: (state, action) => (Object.assign(Object.assign({}, state), { error: action.payload, loading: false, fetching: false })),\r\n        },\r\n        setState: {\r\n            prepare: (payload) => ({ payload }),\r\n            reducer: (state, action) => (Object.assign(Object.assign({}, state), action.payload)),\r\n        },\r\n    };\r\n}\r\nfunction createKeyCaseReducer(key, setState) {\r\n    return {\r\n        prepare: (payload) => ({ payload }),\r\n        reducer: (state, action) => (Object.assign(Object.assign({}, state), { [key]: setState(state[key], action) })),\r\n    };\r\n}\r\nfunction createKeyCaseLoadingReducer(key) {\r\n    return createKeyCaseReducer(key, (state, action) => (Object.assign(Object.assign({}, state), { loading: action.payload })));\r\n}\r\nfunction createKeyCaseErrorReducer(key) {\r\n    return createKeyCaseReducer(key, (state, action) => (Object.assign(Object.assign({}, state), { error: action.payload, loading: false })));\r\n}\n\nconst plansInitialState = {\r\n    loading: false,\r\n    error: null,\r\n    fetching: true,\r\n    plans: [],\r\n};\r\nconst { actions: sliceActions$2, reducer: reducer$9, name: name$8 } = createSlice({\r\n    name: `${subscriptionsStoreName}/plans`,\r\n    initialState: plansInitialState,\r\n    reducers: Object.assign({}, createModuleCaseReducers()),\r\n});\r\nconst actions$9 = Object.assign({ loadPlans: createAction(`${name$8}/loadPlans`) }, sliceActions$2);\n\nconst configInitialState = {\r\n    loading: false,\r\n    error: null,\r\n    fetching: true,\r\n    config: null,\r\n};\r\nconst reducers$6 = Object.assign({}, createModuleCaseReducers());\r\nconst { actions: configActions, reducer: reducer$8, name: name$7, } = createSlice({\r\n    name: `${subscriptionsStoreName}/config`,\r\n    initialState: configInitialState,\r\n    reducers: reducers$6,\r\n});\r\nconst actions$8 = Object.assign({ loadPaymentConfiguration: createAction(`${name$7}/loadPaymentConfiguration`) }, configActions);\n\nconst initialSubscriptionState = {\r\n    loading: false,\r\n    error: null,\r\n    fetching: true,\r\n    cancellation: {\r\n        loading: false,\r\n        error: null,\r\n    },\r\n    renewal: {\r\n        loading: false,\r\n        error: null,\r\n    },\r\n};\r\nconst reducers$5 = Object.assign(Object.assign({}, createModuleCaseReducers()), { setCancellationLoading: createKeyCaseLoadingReducer('cancellation'), setCancellationError: createKeyCaseErrorReducer('cancellation'), setRenewalLoading: createKeyCaseLoadingReducer('renewal'), setRenewalError: createKeyCaseErrorReducer('renewal') });\r\nconst { reducer: reducer$7, actions: overviewActions$1, name: name$6, } = createSlice({\r\n    name: `${subscriptionsStoreName}/billing/subscription`,\r\n    initialState: initialSubscriptionState,\r\n    reducers: reducers$5,\r\n});\r\nconst actions$7 = Object.assign({ load: createAction(`${name$6}/loadSubscription`), cancelSubscription: createAction(`${name$6}/cancelSubscription`), renewSubscription: createAction(`${name$6}/renewSubscription`) }, overviewActions$1);\n\nconst initialBillingInformationState = {\r\n    loading: false,\r\n    error: null,\r\n    fetching: true,\r\n};\r\nconst reducers$4 = Object.assign({}, createModuleCaseReducers());\r\nconst { reducer: reducer$6, actions: overviewActions, name: name$5, } = createSlice({\r\n    name: `${subscriptionsStoreName}/billing/information`,\r\n    initialState: initialBillingInformationState,\r\n    reducers: reducers$4,\r\n});\r\nconst actions$6 = Object.assign({ loadBillingInformation: createAction(`${name$5}/loadBillingInformation`), cancelSubscription: actions$7.cancelSubscription, renewSubscription: actions$7.renewSubscription }, overviewActions);\n\nconst initialPaymentMethodState = {\r\n    loading: false,\r\n    error: null,\r\n    fetching: true,\r\n};\r\nconst reducers$3 = Object.assign(Object.assign({}, createModuleCaseReducers()), { setState: {\r\n        prepare: (payload) => ({ payload }),\r\n        reducer: (state, action) => (Object.assign(Object.assign({}, state), action.payload)),\r\n    } });\r\nconst { reducer: reducer$5, actions: paymentActions, name: name$4, } = createSlice({\r\n    name: `${subscriptionsStoreName}/billing/payment`,\r\n    initialState: initialPaymentMethodState,\r\n    reducers: reducers$3,\r\n});\r\nconst actions$5 = Object.assign({ loadPaymentMethod: createAction(`${name$4}/loadPaymentMethod`), submitPaymentMethod: createAction(`${name$4}/submitPaymentMethod`), submitPaymentMethodError: createAction(`${name$4}/submitPaymentMethodError`), submitPaymentMethodSuccess: createAction(`${name$4}/submitPaymentMethodSuccess`), updatePaymentMethodBillingDetails: createAction(`${name$4}/updateBillingDetails`, (payload) => ({ payload })) }, paymentActions);\n\nconst initialInvoicesState = {\r\n    loading: false,\r\n    error: null,\r\n    fetching: true,\r\n    invoices: [],\r\n    invoiceDownload: {\r\n        loading: false,\r\n        error: null\r\n    }\r\n};\r\nconst reducers$2 = Object.assign(Object.assign({}, createModuleCaseReducers()), { setInvoiceDownloadState: {\r\n        prepare: (payload) => ({ payload }),\r\n        reducer: (state, action) => (Object.assign(Object.assign({}, state), { invoiceDownload: Object.assign(Object.assign({}, state.invoiceDownload), action.payload) })),\r\n    } });\r\nconst { reducer: reducer$4, actions: sliceActions$1, name: name$3, } = createSlice({\r\n    name: `${subscriptionsStoreName}/billing/invoices`,\r\n    initialState: initialInvoicesState,\r\n    reducers: reducers$2,\r\n});\r\nconst actions$4 = Object.assign({ loadInvoices: createAction(`${name$3}/loadInvoices`), downloadInvoice: createAction(`${name$3}/downloadInvoice`, (payload) => ({ payload })) }, sliceActions$1);\n\nconst billingInitialState = {\r\n    information: initialBillingInformationState,\r\n    invoices: initialInvoicesState,\r\n    paymentMethod: initialPaymentMethodState,\r\n    subscription: initialSubscriptionState,\r\n};\r\nconst billingActions = {\r\n    invoices: actions$4,\r\n    information: actions$6,\r\n    paymentMethod: actions$5,\r\n    subscription: actions$7,\r\n};\r\nconst billingReducer = combineReducers({\r\n    invoices: reducer$4,\r\n    information: reducer$6,\r\n    paymentMethod: reducer$5,\r\n    subscription: reducer$7,\r\n});\n\nconst checkoutInitialState = {\r\n    fetching: true,\r\n    loading: false,\r\n    error: null,\r\n    confirmed: false,\r\n};\r\nconst reducers$1 = Object.assign({}, createModuleCaseReducers());\r\nconst { actions: checkoutActions, reducer: reducer$3, name: name$2 } = createSlice({\r\n    name: `${subscriptionsStoreName}/checkout`,\r\n    initialState: checkoutInitialState,\r\n    reducers: reducers$1,\r\n});\r\nconst actions$3 = Object.assign({ loadCheckout: createAction(`${name$2}/loadCheckout`), resetCheckout: createAction(`${name$2}/resetCheckout`), submitCheckout: createAction(`${name$2}/submitCheckout`), confirmCheckout: createAction(`${name$2}/confirmCheckout`, (payload) => ({ payload })), errorCheckout: createAction(`${name$2}/errorCheckout`, (payload) => ({ payload })) }, checkoutActions);\n\nconst initialSubscriptionStripeState = {\r\n    loading: false,\r\n    error: null,\r\n    cardSetupIntentSecret: null,\r\n};\r\nconst reducers = Object.assign({}, createModuleCaseReducers());\r\nconst { reducer: reducer$2, actions: reducerActions, name: name$1, } = createSlice({\r\n    name: `${subscriptionsStoreName}/stripe`,\r\n    initialState: initialSubscriptionStripeState,\r\n    reducers,\r\n});\r\nconst actions$2 = Object.assign({ loadCustomer: createAction(`${name$1}/loadCustomer`), createCardSetupIntentSecret: createAction(`${name$1}/createCardSetupIntentSecret`) }, reducerActions);\n\nconst vendorPublicConfigInitialState = {\r\n    loading: false,\r\n    fetching: true,\r\n    vendorPublicConfig: null,\r\n};\r\nconst { actions: sliceActions, reducer: reducer$1, name, } = createSlice({\r\n    name: `${subscriptionsStoreName}/vendorPublicConfig`,\r\n    initialState: vendorPublicConfigInitialState,\r\n    reducers: Object.assign({}, createModuleCaseReducers()),\r\n});\r\nconst actions$1 = Object.assign({ loadVendorPublicConfiguration: createAction(`${name}/loadVendorPublicConfiguration`) }, sliceActions);\n\nconst initialState = {\r\n    config: configInitialState,\r\n    plans: plansInitialState,\r\n    checkout: checkoutInitialState,\r\n    billing: billingInitialState,\r\n    stripe: initialSubscriptionStripeState,\r\n    vendorPublicConfig: vendorPublicConfigInitialState,\r\n};\r\nconst actions = {\r\n    config: actions$8,\r\n    billing: billingActions,\r\n    plans: actions$9,\r\n    checkout: actions$3,\r\n    stripe: actions$2,\r\n    vendorPublicConfig: actions$1,\r\n};\r\nconst reducer = combineReducers({\r\n    config: reducer$8,\r\n    billing: billingReducer,\r\n    plans: reducer$9,\r\n    checkout: reducer$3,\r\n    stripe: reducer$2,\r\n    vendorPublicConfig: reducer$1,\r\n});\n\nvar PaymentProvider;\r\n(function (PaymentProvider) {\r\n    PaymentProvider[\"STRIPE\"] = \"Stripe\";\r\n})(PaymentProvider || (PaymentProvider = {}));\r\nvar SubscriptionStatus;\r\n(function (SubscriptionStatus) {\r\n    SubscriptionStatus[\"ACTIVE\"] = \"ACTIVE\";\r\n    SubscriptionStatus[\"CANCELED\"] = \"CANCELED\";\r\n    SubscriptionStatus[\"INCOMPLETE\"] = \"INCOMPLETE\";\r\n    SubscriptionStatus[\"EXPIRED\"] = \"EXPIRED\";\r\n    SubscriptionStatus[\"TRIALING\"] = \"TRIALING\";\r\n})(SubscriptionStatus || (SubscriptionStatus = {}));\r\nvar SubscriptionCancellationPolicy;\r\n(function (SubscriptionCancellationPolicy) {\r\n    SubscriptionCancellationPolicy[\"AT_PERIOD_END\"] = \"atPeriodEnd\";\r\n})(SubscriptionCancellationPolicy || (SubscriptionCancellationPolicy = {}));\n\nfunction toSubscriptionCancellation({ policy }) {\r\n    return {\r\n        policy: toSubscriptionCancellationPolicy(),\r\n    };\r\n}\r\nfunction toSubscriptionCancellationPolicy(policy) {\r\n    return SubscriptionCancellationPolicy.AT_PERIOD_END;\r\n}\r\nfunction toSubscriptionStatus(status) {\r\n    switch (status) {\r\n        case ISubscriptionStatus.ACTIVE:\r\n            return SubscriptionStatus.ACTIVE;\r\n        case ISubscriptionStatus.INCOMPLETE:\r\n            return SubscriptionStatus.INCOMPLETE;\r\n        case ISubscriptionStatus.CANCELED:\r\n            return SubscriptionStatus.CANCELED;\r\n        case ISubscriptionStatus.EXPIRED:\r\n            return SubscriptionStatus.EXPIRED;\r\n        case ISubscriptionStatus.TRIALING:\r\n            return SubscriptionStatus.TRIALING;\r\n        default:\r\n            return SubscriptionStatus.EXPIRED;\r\n    }\r\n}\n\nconst subscriptionResponseMock = {\r\n    id: 'sub_1JbhYVEwsu4qiqnnfMhYAdY6',\r\n    externalId: 'sub_1JbhYVEwsu4qiqnnfMhYAdY6',\r\n    startDate: '2021-09-20T08:08:51.000Z',\r\n    status: ISubscriptionStatus.ACTIVE,\r\n    externallyManaged: false,\r\n    cancellation: null,\r\n    currentPeriodStart: '2021-09-20T08:08:51.000Z',\r\n    currentPeriodEnd: '2021-10-20T08:08:51.000Z',\r\n    plan: {\r\n        // TODO: fix dummy data\r\n        slug: 'test',\r\n    },\r\n};\r\nconst planResponseMock = [\r\n    {\r\n        id: 'prod_J60fUEvI7qV1eL',\r\n        externalId: 'prod_J60fUEvI7qV1eL',\r\n        name: 'Premium',\r\n        description: '',\r\n        price: {\r\n            id: 'price_1IToe8Ewsu4qiqnndAV76J69',\r\n            externalId: 'price_1IToe8Ewsu4qiqnndAV76J69',\r\n            currency: 'usd',\r\n            amount: 10000,\r\n        },\r\n        slug: 'premium',\r\n    },\r\n    {\r\n        id: 'prod_J60duauCpXfcur',\r\n        externalId: 'prod_J60duauCpXfcur',\r\n        name: 'Free',\r\n        description: 'Totally free plan. Nothing to pay.',\r\n        price: {\r\n            id: 'price_1ITocfEwsu4qiqnnnBHDx9fQ',\r\n            externalId: 'price_1ITocfEwsu4qiqnnnBHDx9fQ',\r\n            currency: 'usd',\r\n            amount: 0,\r\n        },\r\n        slug: 'free',\r\n    },\r\n];\r\nconst invoicesMock = [\r\n    {\r\n        id: 'in_1JbhYWEwsu4qiqnnrUh6hsHa',\r\n        externalId: 'in_1JbhYWEwsu4qiqnnrUh6hsHa',\r\n        subscriptionId: 'sub_1JbhYVEwsu4qiqnnfMhYAdY6',\r\n        paymentDate: '2021-09-20T08:08:51.000Z',\r\n        totalAmount: 10000,\r\n        currency: 'usd',\r\n        paid: true,\r\n        receiptNumber: '',\r\n    },\r\n    {\r\n        id: 'in_1JbhYWEwsu4qiqnnrUh6hsHa',\r\n        externalId: 'in_1JbhYWEwsu4qiqnnrUh6hsHa',\r\n        subscriptionId: 'sub_1JbhYVEwsu4qiqnnfMhYAdY6',\r\n        paymentDate: '2021-08-20T08:08:51.000Z',\r\n        totalAmount: 10000,\r\n        currency: 'usd',\r\n        paid: true,\r\n        receiptNumber: '',\r\n    },\r\n];\r\nconst paymentMethodsMock = [\r\n    {\r\n        id: 'id',\r\n        externalId: 'externalId',\r\n        type: PaymentMethodType$1.CARD,\r\n        isDefault: true,\r\n        last4: '4242',\r\n        expMonth: 11,\r\n        expYear: 25,\r\n        brand: 'visa',\r\n        billingDetails: {\r\n            name: 'Dummy',\r\n            email: 'dummy@email.com',\r\n        },\r\n    },\r\n];\r\nconst vendorPublicConfigurationResponseMock = {\r\n    allowPlanDowngrade: true,\r\n    allowPlanCancellation: true,\r\n};\n\nfunction* subscriptionSagas() {\r\n    yield takeEvery(actions$7.load, loadSubscriptionTenant);\r\n    yield takeEvery(actions$7.cancelSubscription, cancelSubscription);\r\n    yield takeEvery(actions$7.renewSubscription, renewSubscription);\r\n}\r\nfunction* loadSubscriptionTenant() {\r\n    const tenantId = yield select((state) => { var _a, _b; return (_b = (_a = state.auth) === null || _a === void 0 ? void 0 : _a.user) === null || _b === void 0 ? void 0 : _b.tenantId; });\r\n    yield loadSummaries(tenantId);\r\n}\r\nfunction* loadSubscription() {\r\n    yield put(actions$7.setLoading(true));\r\n    try {\r\n        const [subscription] = yield call(api.subscriptions.getManagedSubscriptions);\r\n        yield put(actions$7.setState({\r\n            subscription,\r\n            fetching: false,\r\n            loading: false,\r\n            error: null,\r\n        }));\r\n    }\r\n    catch (e) {\r\n        yield put(actions$7.setError(e));\r\n    }\r\n}\r\nfunction* cancelSubscription() {\r\n    const { subscription } = yield select((state) => state.subscriptions.billing.subscription);\r\n    if (!subscription) {\r\n        yield put(actions$7.setCancellationError('Subscription not found.'));\r\n        return;\r\n    }\r\n    if (subscription === null || subscription === void 0 ? void 0 : subscription.externallyManaged) {\r\n        yield put(actions$7.setCancellationError('Billing is externally managed.'));\r\n        return;\r\n    }\r\n    const { id: subscriptionId, cancellation, status } = subscription || {};\r\n    const isCancellable = !cancellation && status === ISubscriptionStatus.ACTIVE;\r\n    if (isCancellable) {\r\n        try {\r\n            yield put(actions$7.setCancellationLoading(true));\r\n            yield call(api.subscriptions.cancelManagedSubscription, subscriptionId);\r\n            yield loadSubscription();\r\n            yield put(actions$7.setCancellationLoading(false));\r\n        }\r\n        catch (e) {\r\n            yield put(actions$7.setCancellationError(e.message));\r\n        }\r\n    }\r\n}\r\nfunction* renewSubscription() {\r\n    const { subscription } = yield select((state) => state.subscriptions.billing.subscription);\r\n    if (!subscription) {\r\n        yield put(actions$7.setCancellationError('Subscription not found.'));\r\n        return;\r\n    }\r\n    if (subscription === null || subscription === void 0 ? void 0 : subscription.externallyManaged) {\r\n        yield put(actions$7.setCancellationError('Billing is externally managed'));\r\n        return;\r\n    }\r\n    const { id: subscriptionId, cancellation } = subscription || {};\r\n    const renewable = (cancellation === null || cancellation === void 0 ? void 0 : cancellation.policy) === ISubscriptionCancellationPolicy.AT_PERIOD_END;\r\n    if (renewable) {\r\n        try {\r\n            yield put(actions$7.setRenewalLoading(true));\r\n            yield call(api.subscriptions.renewManagedSubscription, subscriptionId);\r\n            yield loadSubscription();\r\n            yield put(actions$7.setRenewalLoading(false));\r\n        }\r\n        catch (e) {\r\n            yield put(actions$7.setCancellationError(e.message));\r\n        }\r\n    }\r\n}\r\n/*********************************\r\n *  Preview Sagas\r\n *********************************/\r\nfunction* loadMock() {\r\n    yield put(actions$7.setLoading(true));\r\n    yield delay(500);\r\n    yield put(actions$7.setState({\r\n        subscription: subscriptionResponseMock,\r\n        fetching: false,\r\n        loading: false,\r\n        error: null,\r\n    }));\r\n}\r\nfunction* subscriptionSagasMock() {\r\n    yield takeEvery(actions$7.load, loadMock);\r\n}\n\nfunction* subscriptionBillingInformationSagas() {\r\n    yield takeEvery(actions$6.loadBillingInformation, loadBillingInformation);\r\n}\r\nfunction* loadBillingInformation() {\r\n    yield loadBillingInformationAction(false);\r\n}\r\nfunction* loadBillingInformationAction(forceActive) {\r\n    const paymentProvider = yield select((state) => { var _a; return (_a = state.subscriptions.config.config) === null || _a === void 0 ? void 0 : _a.paymentProvider; });\r\n    const tenantId = yield select((state) => { var _a, _b; return (_b = (_a = state.auth) === null || _a === void 0 ? void 0 : _a.user) === null || _b === void 0 ? void 0 : _b.tenantId; });\r\n    if (!paymentProvider || !tenantId) {\r\n        yield put(actions$6.setError(!paymentProvider ? 'Internal feature failure' : 'Not authorized'));\r\n        return;\r\n    }\r\n    yield loadSummaries(tenantId, forceActive);\r\n}\r\nfunction* loadSummaries(tenantId, forceActive) {\r\n    var _a, _b;\r\n    yield put(actions$6.setLoading(true));\r\n    try {\r\n        const summary = yield call(api.subscriptions.getSubscriptionSummaries, tenantId);\r\n        const { currentPlanId, externallyManaged } = summary;\r\n        let subscriptionResponse = null;\r\n        let planResponse;\r\n        if (!externallyManaged) {\r\n            [, planResponse] = yield all([\r\n                yield loadSubscription(),\r\n                call(api.subscriptions.getSubscriptionPlan, currentPlanId),\r\n            ]);\r\n            subscriptionResponse = yield select((state) => state.subscriptions.billing.subscription.subscription || null);\r\n        }\r\n        else {\r\n            planResponse = yield call(api.subscriptions.getSubscriptionPlan, currentPlanId);\r\n        }\r\n        yield put(actions$6.setState(Object.assign(Object.assign({ loading: false, fetching: false, summary }, (subscriptionResponse\r\n            ? {\r\n                subscription: {\r\n                    id: subscriptionResponse.id,\r\n                    externalId: subscriptionResponse.externalId,\r\n                    startDate: subscriptionResponse.startDate,\r\n                    currentPeriodStart: subscriptionResponse.currentPeriodStart,\r\n                    currentPeriodEnd: subscriptionResponse.currentPeriodEnd,\r\n                    status: forceActive ? SubscriptionStatus.ACTIVE : toSubscriptionStatus(subscriptionResponse.status),\r\n                    cancellation: subscriptionResponse.cancellation && toSubscriptionCancellation(subscriptionResponse.cancellation),\r\n                    trialEnd: subscriptionResponse.trialEnd ? subscriptionResponse.trialEnd : null,\r\n                },\r\n            }\r\n            : {})), (planResponse\r\n            ? {\r\n                plan: {\r\n                    id: planResponse.id,\r\n                    name: planResponse.name,\r\n                    description: planResponse.description,\r\n                    price: ((_a = planResponse.price) === null || _a === void 0 ? void 0 : _a.amount) || 0,\r\n                    currency: ((_b = planResponse.price) === null || _b === void 0 ? void 0 : _b.currency) || 'usd',\r\n                    recurringInterval: 'month',\r\n                    slug: planResponse.slug,\r\n                },\r\n            }\r\n            : {}))));\r\n    }\r\n    catch (e) {\r\n        yield put(actions$6.setError(e.message));\r\n    }\r\n}\r\n/*********************************\r\n *  Preview Sagas\r\n *********************************/\r\nfunction* loadBillingInformationMock() {\r\n    yield loadSummariesMock();\r\n}\r\nfunction* loadSummariesMock() {\r\n    var _a, _b;\r\n    yield put(actions$6.setLoading(true));\r\n    yield delay(500);\r\n    yield put(actions$6.setState({\r\n        loading: false,\r\n        fetching: false,\r\n        summary: {\r\n            subscriptionId: subscriptionResponseMock.id,\r\n            paymentMethodId: 'mockPaymentMethodId',\r\n            tenantConfigurationId: 'mockTenantConfigurationId',\r\n            providerType: ProviderType.Stripe,\r\n            externallyManaged: false,\r\n            currentPlanId: planResponseMock[0].id,\r\n            defaultPlanId: planResponseMock[0].id,\r\n        },\r\n        plan: Object.assign(Object.assign({}, planResponseMock[0]), { price: (_a = planResponseMock[0].price) === null || _a === void 0 ? void 0 : _a.amount, currency: (_b = planResponseMock[0].price) === null || _b === void 0 ? void 0 : _b.currency, recurringInterval: 'month' }),\r\n    }));\r\n}\r\nfunction* subscriptionBillingInformationSagasMock() {\r\n    yield takeEvery(actions$6.loadBillingInformation, loadBillingInformationMock);\r\n}\n\nfunction* subscriptionsPaymentMethodSagas() {\r\n    yield takeEvery(actions$5.loadPaymentMethod, loadPaymentMethod);\r\n    yield takeEvery(actions$5.submitPaymentMethod, submitPaymentMethod);\r\n    yield takeEvery(actions$5.submitPaymentMethodError, submitPaymentMethodError);\r\n    yield takeEvery(actions$5.submitPaymentMethodSuccess, submitPaymentMethodSuccess);\r\n    yield takeEvery(actions$5.updatePaymentMethodBillingDetails, updateBillingDetails);\r\n}\r\nfunction* loadPaymentMethod() {\r\n    yield put(actions$5.setLoading(true));\r\n    try {\r\n        const paymentMethods = yield call(api.subscriptions.getPaymentMethods);\r\n        const paymentMethod = paymentMethods[0];\r\n        yield put(actions$5.setState({\r\n            paymentMethod,\r\n            loading: false,\r\n            fetching: false,\r\n        }));\r\n    }\r\n    catch (e) {\r\n        yield put(actions$5.setError(e.message));\r\n    }\r\n}\r\nfunction* updateBillingDetails({ payload, }) {\r\n    yield put(actions$5.setLoading(true));\r\n    const { id, email, address, callback } = payload;\r\n    try {\r\n        yield call(api.subscriptions.updatePaymentMethodBillingDetails, id, Object.assign({ email }, address));\r\n        yield call(loadPaymentMethod);\r\n        callback === null || callback === void 0 ? void 0 : callback(true);\r\n    }\r\n    catch (e) {\r\n        yield put(actions$5.setError(e.message));\r\n        callback === null || callback === void 0 ? void 0 : callback(false);\r\n    }\r\n    yield put(actions$5.setLoading(false));\r\n}\r\nfunction* submitPaymentMethod() {\r\n    yield put(actions$5.setLoading(true));\r\n}\r\nfunction* submitPaymentMethodError({ payload: error }) {\r\n    yield put(actions$5.setError(error));\r\n}\r\nfunction* submitPaymentMethodSuccess() {\r\n    yield put(actions$5.loadPaymentMethod());\r\n}\r\n/*********************************\r\n *  Preview Sagas\r\n *********************************/\r\nfunction* loadPaymentMethodMock() {\r\n    yield put(actions$5.setLoading(true));\r\n    yield delay(500);\r\n    const paymentMethod = paymentMethodsMock[0];\r\n    yield put(actions$5.setState({\r\n        paymentMethod,\r\n        loading: false,\r\n        fetching: false,\r\n    }));\r\n}\r\nfunction* subscriptionsPaymentMethodSagasMock() {\r\n    yield takeEvery(actions$5.loadPaymentMethod, loadPaymentMethodMock);\r\n}\n\nfunction* subscriptionInvoicesSagas() {\r\n    yield takeEvery(actions$4.loadInvoices, loadInvoices);\r\n    yield takeEvery(actions$4.downloadInvoice, downloadInvoice);\r\n}\r\nfunction* loadInvoices() {\r\n    yield put(actions$4.setLoading(true));\r\n    try {\r\n        const responseInvoices = yield call(api.subscriptions.getSubscriptionInvoices);\r\n        const invoices = responseInvoices.map((invoice) => ({\r\n            id: invoice.id,\r\n            externalId: invoice.externalId,\r\n            subscriptionId: invoice.subscriptionId,\r\n            paymentDate: new Date(Date.parse(invoice.paymentDate)),\r\n            totalAmount: +((invoice.totalAmount || 0) / 100).toFixed(2),\r\n            currency: invoice.currency || 'usd',\r\n            paid: invoice.paid || false,\r\n            receiptNumber: invoice.receiptNumber,\r\n        }));\r\n        yield put(actions$4.setState({\r\n            loading: false,\r\n            fetching: false,\r\n            invoices,\r\n        }));\r\n    }\r\n    catch (e) {\r\n        yield put(actions$4.setError(e.message));\r\n    }\r\n}\r\nfunction* downloadInvoice({ payload }) {\r\n    yield put(actions$4.setInvoiceDownloadState({ loading: true, error: null }));\r\n    try {\r\n        yield call(api.subscriptions.getSubscriptionInvoicePdf, payload.invoiceId, payload.filename);\r\n        yield put(actions$4.setInvoiceDownloadState({ loading: false, error: null }));\r\n    }\r\n    catch (e) {\r\n        yield put(actions$4.setInvoiceDownloadState({ loading: false, error: e.message || null }));\r\n    }\r\n}\r\n/*********************************\r\n *  Preview Sagas\r\n *********************************/\r\nfunction* loadInvoicesMock() {\r\n    yield put(actions$4.setLoading(true));\r\n    yield delay(500);\r\n    const selectPlanTitle = 'Premium';\r\n    yield put(actions$4.setState({\r\n        loading: false,\r\n        fetching: false,\r\n        invoices: invoicesMock.map((invoice) => (Object.assign(Object.assign({}, invoice), { selectedPlan: selectPlanTitle, paymentDate: new Date(Date.parse(invoice.paymentDate)), totalAmount: +((invoice.totalAmount || 0) / 100).toFixed(2) }))),\r\n    }));\r\n    yield put(actions$4.setLoading(false));\r\n}\r\nfunction* subscriptionInvoicesSagasMock() {\r\n    yield takeEvery(actions$4.loadInvoices, loadInvoicesMock);\r\n}\n\nfunction* billingSagas() {\r\n    yield all([\r\n        call(subscriptionBillingInformationSagas),\r\n        call(subscriptionsPaymentMethodSagas),\r\n        call(subscriptionInvoicesSagas),\r\n        call(subscriptionSagas),\r\n    ]);\r\n}\r\nfunction* billingSagasMock() {\r\n    yield all([\r\n        call(subscriptionBillingInformationSagasMock),\r\n        call(subscriptionsPaymentMethodSagasMock),\r\n        call(subscriptionInvoicesSagasMock),\r\n        call(subscriptionSagasMock),\r\n    ]);\r\n}\n\nfunction* checkoutSagas() {\r\n    yield takeEvery(actions$3.loadCheckout, loadCheckout);\r\n    yield takeEvery(actions$3.resetCheckout, resetCheckout);\r\n    yield takeEvery(actions$3.submitCheckout, submitCheckout);\r\n    yield takeEvery(actions$3.confirmCheckout, confirmPlan);\r\n    yield takeEvery(actions$3.errorCheckout, errorCheckout);\r\n}\r\nfunction* loadCheckout() {\r\n    yield put(actions$3.setState({\r\n        fetching: false,\r\n        loading: false,\r\n        error: null,\r\n        confirmed: false,\r\n    }));\r\n}\r\nfunction* resetCheckout() {\r\n    yield put(actions$3.setState({\r\n        loading: false,\r\n        error: null,\r\n        confirmed: false,\r\n    }));\r\n}\r\n/**\r\n * Based on payment provider type\r\n */\r\nfunction* submitCheckout() {\r\n    yield put(actions$3.setState({\r\n        loading: true,\r\n        error: null,\r\n    }));\r\n}\r\nfunction* confirmPlan({ payload: { paymentMethodId, planId } }) {\r\n    const subscription = yield select((state) => state.subscriptions.billing.subscription.subscription);\r\n    const summary = yield select((state) => state.subscriptions.billing.information.summary);\r\n    const isTrialing = (subscription === null || subscription === void 0 ? void 0 : subscription.status) === SubscriptionStatus.TRIALING;\r\n    const hasPaymentMethod = !!(summary === null || summary === void 0 ? void 0 : summary.paymentMethodId);\r\n    if (!subscription) {\r\n        yield put(actions$3.setState({\r\n            loading: false,\r\n            error: 'Subscription not found',\r\n        }));\r\n        return;\r\n    }\r\n    yield put(actions$3.setState({\r\n        loading: true,\r\n        error: null,\r\n    }));\r\n    if (isTrialing && hasPaymentMethod) {\r\n        yield confirmCheckout();\r\n        yield put(actions$7.setState({\r\n            subscription: Object.assign(Object.assign({}, subscription), { status: ISubscriptionStatus.ACTIVE }),\r\n        }));\r\n        return;\r\n    }\r\n    try {\r\n        yield call(api.subscriptions.updateManagedSubscription, subscription.id, {\r\n            paymentMethodId,\r\n            planId,\r\n        });\r\n        yield all([\r\n            loadBillingInformation(),\r\n            loadPaymentMethod(),\r\n            loadInvoices(),\r\n        ]);\r\n        yield confirmCheckout();\r\n    }\r\n    catch (e) {\r\n        yield put(actions$3.setState({\r\n            loading: false,\r\n            error: e.message,\r\n        }));\r\n    }\r\n}\r\nfunction* confirmCheckout() {\r\n    yield put(actions$3.setState({\r\n        loading: false,\r\n        error: null,\r\n        confirmed: true,\r\n    }));\r\n}\r\nfunction* errorCheckout({ payload }) {\r\n    yield put(actions$3.setState({\r\n        loading: false,\r\n        error: payload,\r\n    }));\r\n}\r\n/*********************************\r\n *  Preview Sagas\r\n *********************************/\r\nfunction* checkoutSagasMock() {\r\n    yield takeEvery(actions$3.resetCheckout, resetCheckout);\r\n}\n\nfunction* plansSagas() {\r\n    yield takeEvery(actions$9.loadPlans, loadPlans);\r\n}\r\nfunction* loadPlans() {\r\n    yield put(actions$9.setLoading(true));\r\n    try {\r\n        const products = yield call(api.subscriptions.getSubscriptionPlans);\r\n        const plans = products.map((item) => {\r\n            var _a, _b;\r\n            return ({\r\n                id: item.id,\r\n                name: item.name,\r\n                description: item.description,\r\n                price: ((_a = item.price) === null || _a === void 0 ? void 0 : _a.amount) || 0,\r\n                currency: ((_b = item.price) === null || _b === void 0 ? void 0 : _b.currency) || 'usd',\r\n                recurringInterval: 'month',\r\n                slug: item.slug,\r\n            });\r\n        });\r\n        yield put(actions$9.setState({\r\n            fetching: false,\r\n            loading: false,\r\n            plans,\r\n        }));\r\n    }\r\n    catch (e) {\r\n        yield put(actions$9.setError(e.message));\r\n    }\r\n}\r\n/*********************************\r\n *  Preview Sagas\r\n *********************************/\r\nfunction* loadPlansMock() {\r\n    yield put(actions$9.setLoading(true));\r\n    yield delay(500);\r\n    yield put(actions$9.setState({\r\n        fetching: false,\r\n        loading: false,\r\n        plans: planResponseMock.map((item) => {\r\n            var _a, _b;\r\n            return (Object.assign(Object.assign({}, item), { price: ((_a = item.price) === null || _a === void 0 ? void 0 : _a.amount) || 0, currency: ((_b = item.price) === null || _b === void 0 ? void 0 : _b.currency) || 'usd', recurringInterval: 'month' }));\r\n        }),\r\n    }));\r\n}\r\nfunction* plansSagasMock() {\r\n    yield takeEvery(actions$9.loadPlans, loadPlansMock);\r\n}\n\nvar PaymentMethodType;\r\n(function (PaymentMethodType) {\r\n    PaymentMethodType[\"UNKNWON\"] = \"unknown\";\r\n    PaymentMethodType[\"CARD\"] = \"card\";\r\n})(PaymentMethodType || (PaymentMethodType = {}));\n\nfunction* configSagas() {\r\n    yield takeEvery(actions$8.loadPaymentConfiguration, loadPaymentConfiguration);\r\n}\r\nfunction* loadPaymentConfiguration() {\r\n    yield put(actions$8.setLoading(true));\r\n    try {\r\n        const response = yield call(api.subscriptions.getPaymentProviders) || [];\r\n        const stripePaymentProvider = response.find((paymentProvider) => paymentProvider.status === '1' && paymentProvider.providerType === ProviderType.Stripe);\r\n        if (stripePaymentProvider) {\r\n            yield loadStripePaymentConfiguration();\r\n        }\r\n        else {\r\n            yield put(actions$8.setError('Payment provider not configured'));\r\n        }\r\n    }\r\n    catch (e) {\r\n        yield put(actions$8.setError(e.message));\r\n    }\r\n}\r\nfunction* loadStripePaymentConfiguration() {\r\n    yield put(actions$8.setLoading(true));\r\n    try {\r\n        const response = yield call(api.subscriptions.getStripePaymentProviderConfiguration);\r\n        yield put(actions$8.setState({\r\n            loading: false,\r\n            fetching: false,\r\n            config: {\r\n                paymentProvider: PaymentProvider.STRIPE,\r\n                apiKey: response.publishableKey\r\n            }\r\n        }));\r\n    }\r\n    catch (e) {\r\n        yield put(actions$8.setError(e.message));\r\n    }\r\n}\r\n/*********************************\r\n *  Preview Sagas\r\n *********************************/\r\nfunction* loadPaymentConfigurationMock() {\r\n    yield put(actions$8.setLoading(true));\r\n    yield delay(500);\r\n    yield put(actions$8.setState({\r\n        loading: false,\r\n        fetching: false,\r\n        config: {\r\n            paymentProvider: PaymentProvider.STRIPE,\r\n            apiKey: ''\r\n        },\r\n    }));\r\n}\r\nfunction* configSagasMock() {\r\n    yield takeEvery(actions$8.loadPaymentConfiguration, loadPaymentConfigurationMock);\r\n}\n\nfunction* subscriptionStripeSagas() {\r\n    yield takeEvery(actions$2.createCardSetupIntentSecret, createCardSetupIntentSecret);\r\n}\r\nfunction* createCardSetupIntentSecret({ payload }) {\r\n    yield put(actions$2.setState({\r\n        loading: true,\r\n        error: null,\r\n        cardSetupIntentSecret: null,\r\n    }));\r\n    try {\r\n        const request = {};\r\n        if (payload) {\r\n            request.paymentMethodId = payload;\r\n        }\r\n        const { setupIntentSecret } = yield call(api.subscriptions.createStripePaymentMethodSetupIntentSecret, request);\r\n        yield put(actions$2.setState({\r\n            cardSetupIntentSecret: setupIntentSecret,\r\n            loading: false,\r\n        }));\r\n    }\r\n    catch (e) {\r\n        yield put(actions$2.setError(e.message));\r\n    }\r\n}\n\nfunction* vendorPublicConfigSagas() {\r\n    yield takeEvery(actions$1.loadVendorPublicConfiguration, loadVendorPublicConfiguration);\r\n}\r\nfunction* loadVendorPublicConfiguration() {\r\n    yield put(actions$1.setLoading(true));\r\n    try {\r\n        const vendorPublicConfig = yield call(api.subscriptions.getVendorPublicConfigurations);\r\n        yield put(actions$1.setState({\r\n            fetching: false,\r\n            loading: false,\r\n            vendorPublicConfig,\r\n        }));\r\n    }\r\n    catch (e) {\r\n        yield put(actions$1.setError(e.message));\r\n    }\r\n}\r\n/*********************************\r\n *  Preview Sagas\r\n *********************************/\r\nfunction* loadVendorPublicConfigurationMock() {\r\n    yield put(actions$1.setLoading(true));\r\n    yield delay(500);\r\n    yield put(actions$1.setState({\r\n        fetching: false,\r\n        loading: false,\r\n        vendorPublicConfig: vendorPublicConfigurationResponseMock,\r\n    }));\r\n}\r\nfunction* vendorPublicConfigSagasMock() {\r\n    yield takeEvery(actions$1.loadVendorPublicConfiguration, loadVendorPublicConfigurationMock);\r\n}\n\nfunction* sagas() {\r\n    yield all([\r\n        call(billingSagas),\r\n        call(checkoutSagas),\r\n        call(plansSagas),\r\n        call(configSagas),\r\n        call(subscriptionStripeSagas),\r\n        call(vendorPublicConfigSagas),\r\n    ]);\r\n}\r\nfunction* mockSagas() {\r\n    yield all([\r\n        call(billingSagasMock),\r\n        call(checkoutSagasMock),\r\n        call(plansSagasMock),\r\n        call(configSagasMock),\r\n        call(vendorPublicConfigSagasMock),\r\n    ]);\r\n}\n\n// export store\r\n// export store\r\nvar subscriptionsStore = {\r\n    sagas,\r\n    mockSagas,\r\n    reducer,\r\n    actions,\r\n    initialState,\r\n    storeName: subscriptionsStoreName,\r\n};\n\nexport { PaymentMethodType, PaymentProvider, SubscriptionCancellationPolicy, SubscriptionStatus, subscriptionsStore as default, actions as subscriptionActions, initialState as subscriptionInitialState, reducer as subscriptionReducers, sagas as subscriptionSagas, mockSagas as subscriptionSagasMock };\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { takeEvery, put } from 'redux-saga/effects';\nimport { api } from '@frontegg/rest-api';\nimport { v as vendorStoreName } from './constants-4d9682b2.js';\nimport { createAction, createSlice } from '@reduxjs/toolkit';\nconst reducers = {\n  setVendorState: (state, {\n    payload\n  }) => Object.assign(Object.assign({}, state), payload)\n};\nconst actions$1 = {\n  loadVendorPublicInfo: createAction(`${vendorStoreName}/loadVendorPublicInfo`)\n};\nconst initialState = {\n  whiteLabelMode: false\n};\nconst {\n  reducer,\n  actions: sliceActions\n} = createSlice({\n  name: vendorStoreName,\n  initialState,\n  reducers: Object.assign({}, reducers)\n});\nconst actions = Object.assign(Object.assign({}, sliceActions), actions$1);\n\nfunction* loadVendorPublicInfo() {\n  try {\n    const {\n      whiteLabelMode = false\n    } = yield api.vendor.getVendorPublicInfo();\n    yield put(actions.setVendorState({\n      whiteLabelMode\n    }));\n  } catch (e) {\n    console.error('failed to getVendorPublicInfo - ', e);\n  }\n}\n\nfunction* sagas() {\n  yield takeEvery(actions.loadVendorPublicInfo, loadVendorPublicInfo);\n}\n\nexport { actions as a, initialState as i, loadVendorPublicInfo as l, reducer as r, sagas as s };","map":{"version":3,"sources":["/Users/mashapav/Downloads/WEB-CHAT/Client/node_modules/@frontegg/redux-store/saga-b6529ffb.js"],"names":["takeEvery","put","api","v","vendorStoreName","createAction","createSlice","reducers","setVendorState","state","payload","Object","assign","actions$1","loadVendorPublicInfo","initialState","whiteLabelMode","reducer","actions","sliceActions","name","vendor","getVendorPublicInfo","e","console","error","sagas","a","i","l","r","s"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,GAApB,QAA+B,oBAA/B;AACA,SAASC,GAAT,QAAoB,oBAApB;AACA,SAASC,CAAC,IAAIC,eAAd,QAAqC,yBAArC;AACA,SAASC,YAAT,EAAuBC,WAAvB,QAA0C,kBAA1C;AAEA,MAAMC,QAAQ,GAAG;AACbC,EAAAA,cAAc,EAAE,CAACC,KAAD,EAAQ;AAAEC,IAAAA;AAAF,GAAR,KAAyBC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,KAAlB,CAAd,EAAwCC,OAAxC;AAD5B,CAAjB;AAGA,MAAMG,SAAS,GAAG;AACdC,EAAAA,oBAAoB,EAAET,YAAY,CAAE,GAAED,eAAgB,uBAApB;AADpB,CAAlB;AAIA,MAAMW,YAAY,GAAG;AACjBC,EAAAA,cAAc,EAAE;AADC,CAArB;AAGA,MAAM;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,OAAO,EAAEC;AAApB,IAAqCb,WAAW,CAAC;AACnDc,EAAAA,IAAI,EAAEhB,eAD6C;AAEnDW,EAAAA,YAFmD;AAGnDR,EAAAA,QAAQ,EAAEI,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,QAAlB;AAHyC,CAAD,CAAtD;AAKA,MAAMW,OAAO,GAAGP,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBO,YAAlB,CAAd,EAA+CN,SAA/C,CAAhB;;AAEA,UAAUC,oBAAV,GAAiC;AAC7B,MAAI;AACA,UAAM;AAAEE,MAAAA,cAAc,GAAG;AAAnB,QAA6B,MAAMd,GAAG,CAACmB,MAAJ,CAAWC,mBAAX,EAAzC;AACA,UAAMrB,GAAG,CAACiB,OAAO,CAACV,cAAR,CAAuB;AAAEQ,MAAAA;AAAF,KAAvB,CAAD,CAAT;AACH,GAHD,CAIA,OAAOO,CAAP,EAAU;AACNC,IAAAA,OAAO,CAACC,KAAR,CAAc,kCAAd,EAAkDF,CAAlD;AACH;AACJ;;AACD,UAAUG,KAAV,GAAkB;AACd,QAAM1B,SAAS,CAACkB,OAAO,CAACJ,oBAAT,EAA+BA,oBAA/B,CAAf;AACH;;AAED,SAASI,OAAO,IAAIS,CAApB,EAAuBZ,YAAY,IAAIa,CAAvC,EAA0Cd,oBAAoB,IAAIe,CAAlE,EAAqEZ,OAAO,IAAIa,CAAhF,EAAmFJ,KAAK,IAAIK,CAA5F","sourcesContent":["import { takeEvery, put } from 'redux-saga/effects';\nimport { api } from '@frontegg/rest-api';\nimport { v as vendorStoreName } from './constants-4d9682b2.js';\nimport { createAction, createSlice } from '@reduxjs/toolkit';\n\nconst reducers = {\r\n    setVendorState: (state, { payload }) => (Object.assign(Object.assign({}, state), payload)),\r\n};\r\nconst actions$1 = {\r\n    loadVendorPublicInfo: createAction(`${vendorStoreName}/loadVendorPublicInfo`),\r\n};\n\nconst initialState = {\r\n    whiteLabelMode: false,\r\n};\r\nconst { reducer, actions: sliceActions } = createSlice({\r\n    name: vendorStoreName,\r\n    initialState,\r\n    reducers: Object.assign({}, reducers)\r\n});\r\nconst actions = Object.assign(Object.assign({}, sliceActions), actions$1);\n\nfunction* loadVendorPublicInfo() {\r\n    try {\r\n        const { whiteLabelMode = false } = yield api.vendor.getVendorPublicInfo();\r\n        yield put(actions.setVendorState({ whiteLabelMode }));\r\n    }\r\n    catch (e) {\r\n        console.error('failed to getVendorPublicInfo - ', e);\r\n    }\r\n}\r\nfunction* sagas() {\r\n    yield takeEvery(actions.loadVendorPublicInfo, loadVendorPublicInfo);\r\n}\n\nexport { actions as a, initialState as i, loadVendorPublicInfo as l, reducer as r, sagas as s };\n"]},"metadata":{},"sourceType":"module"}
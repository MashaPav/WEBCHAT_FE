{"ast":null,"code":"var _jsxFileName = \"/Users/mashap/Desktop/Docs/Netcraft/WEB-CHAT/Client/src/App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Messages } from './Messages';\nimport { Pane, Panes, Footer } from './Panes';\nimport { Chats } from './Chats';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  let [chats, setChats] = useState([]);\n  let [chatId, setChatId] = useState(null);\n  let [messages, setMessages] = useState([]);\n  let [lastPoll, setLastPoll] = useState(Date.now());\n  useEffect(loadChats, []);\n  useEffect(loadMessages, [chatId, lastPoll]);\n  useEffect(startTimer, [lastPoll]);\n  let selectedChat = chats.find(p => p.id === chatId);\n  return /*#__PURE__*/_jsxDEV(Panes, {\n    children: [/*#__PURE__*/_jsxDEV(Pane, {\n      width: '35%',\n      minWidth: '300px',\n      header: `All Chats (lastPoll: ${lastPoll})`,\n      body: /*#__PURE__*/_jsxDEV(Chats, {\n        chats: chats,\n        onSelectChat: setChatId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Pane, {\n      width: '65%',\n      header: `${selectedChat === null || selectedChat === void 0 ? void 0 : selectedChat.users.map(user => user.name).join(', ')} (${selectedChat === null || selectedChat === void 0 ? void 0 : selectedChat.id})`,\n      body: /*#__PURE__*/_jsxDEV(Messages, {\n        messages: messages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }, this),\n      lastScroll: lastPoll,\n      children: /*#__PURE__*/_jsxDEV(Footer, {\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          onSubmit: onNewMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 10\n  }, this);\n\n  function onNewMessage(e) {\n    e.preventDefault();\n    alert(`Sending to the server: ${e.target.newMessage.value}`);\n  }\n\n  function loadChats() {\n    import('./data/chats.js').then(module => {\n      let chats = module.chats;\n      setChats(chats);\n      setChatId(chats[0].id);\n    });\n  }\n\n  function loadMessages() {\n    if (!chatId) {\n      return;\n    }\n\n    import(`./data/messages_${chatId}.js`).then(module => {\n      let messages = module.messages;\n      setMessages(addFakeMessage(messages));\n    });\n  }\n\n  function startTimer() {\n    setTimeout(() => {\n      setLastPoll(Date.now());\n    }, 5000);\n  }\n}\n\n_s(App, \"FnYZN2H/JjIuszbXZDqqkIaRj3I=\");\n\n_c = App;\n\nfunction addFakeMessage(messages) {\n  let messageBeforeLast = messages[messages.length - 2];\n  let newMessage = { ...messageBeforeLast,\n    id: Date.now()\n  };\n  messages.push(newMessage);\n  return messages;\n}\n\nfunction Input() {\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: 'test'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      value: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 10\n  }, this);\n}\n\n_c2 = Input;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Input\");","map":{"version":3,"sources":["/Users/mashap/Desktop/Docs/Netcraft/WEB-CHAT/Client/src/App.jsx"],"names":["React","useEffect","useState","Messages","Pane","Panes","Footer","Chats","App","chats","setChats","chatId","setChatId","messages","setMessages","lastPoll","setLastPoll","Date","now","loadChats","loadMessages","startTimer","selectedChat","find","p","id","users","map","user","name","join","onNewMessage","e","preventDefault","alert","target","newMessage","value","then","module","addFakeMessage","setTimeout","messageBeforeLast","length","push","Input"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Messages } from './Messages';\nimport { Pane, Panes, Footer } from './Panes';\nimport { Chats } from './Chats';\n\nexport function App() {\n  let [chats, setChats] = useState([]);\n  let [chatId, setChatId] = useState(null);\n  let [messages, setMessages] = useState([]);\n  let [lastPoll, setLastPoll] = useState(Date.now());\n\n  useEffect(loadChats, []);\n  useEffect(loadMessages, [chatId, lastPoll]);\n  useEffect(startTimer, [lastPoll]);\n\n  let selectedChat = chats.find((p) => p.id === chatId);\n\n  return <Panes>\n    <Pane width={'35%'} minWidth={'300px'}\n      header={`All Chats (lastPoll: ${lastPoll})`}\n      body={<Chats chats={chats} onSelectChat={setChatId}></Chats>}>\n    </Pane>\n    <Pane width={'65%'}\n      header={`${selectedChat?.users.map(user => user.name).join(', ')} (${selectedChat?.id})`}\n      body={<Messages messages={messages}></Messages>}\n      lastScroll={lastPoll}>\n    <Footer><Input onSubmit={onNewMessage}></Input></Footer>\n    </Pane>\n  </Panes>;\n\n  function onNewMessage(e) {\n    e.preventDefault();\n    alert(`Sending to the server: ${e.target.newMessage.value}`);\n  }\n\n  function loadChats() {\n    import('./data/chats.js')\n      .then(module => {\n        let chats = module.chats;\n        setChats(chats);\n        setChatId(chats[0].id);\n      });\n  }\n\n  function loadMessages() {\n    if (!chatId) {\n      return;\n    }\n    import(`./data/messages_${chatId}.js`)\n      .then((module) => {\n        let messages = module.messages;\n        setMessages(addFakeMessage(messages));\n      })\n  }\n\n  function startTimer() {\n    setTimeout(() => {\n      setLastPoll(Date.now());\n    }, 5000);\n  }\n}\n\nfunction addFakeMessage(messages) {\n  let messageBeforeLast = messages[messages.length - 2];\n  let newMessage = {...messageBeforeLast, id: Date.now()};\n  messages.push(newMessage);\n  return messages;\n}\n\nfunction Input() {\n  return <form>\n      <label>\n        Name:\n        <input type=\"text\" value={'test'} />\n      </label>\n      <input type=\"submit\" value=\"Submit\" />\n    </form>\n}"]},"metadata":{},"sourceType":"module"}
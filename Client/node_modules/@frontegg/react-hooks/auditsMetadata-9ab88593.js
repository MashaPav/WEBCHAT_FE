import { auditsStoreName, bindActionCreators, auditsActions, auditLogsActions, auditLogsReducers, auditsMetadataActions, auditsMetadataReducers } from '@frontegg/redux-store';
import { useMemo } from 'react';
import { shallowEqual } from 'react-redux';
import { u as useSelector, a as useDispatch } from './FronteggStoreContext-d6c3b684.js';

const useAuditsState = (stateMapper) => {
    return useSelector((state) => { var _a; return (_a = stateMapper === null || stateMapper === void 0 ? void 0 : stateMapper(state[auditsStoreName])) !== null && _a !== void 0 ? _a : state[auditsStoreName]; }, shallowEqual);
};
const useAuditsActions = () => {
    const dispatch = useDispatch();
    return useMemo(() => bindActionCreators(auditsActions, dispatch), [auditsActions]);
};
/**
 * hooks helpers
 */
const sliceReducerActionsBy = (reducer) => {
    const reducerKeys = Object.keys(reducer);
    const reducerActions = reducerKeys.map((key) => ({ [key]: auditsActions[key] }));
    return reducerActions.reduce((p, n) => (Object.assign(Object.assign({}, p), n)), {});
};
const stateHookGenerator = (stateMapper, subState) => {
    return useSelector((state) => { var _a; return (_a = stateMapper === null || stateMapper === void 0 ? void 0 : stateMapper(state[auditsStoreName][subState])) !== null && _a !== void 0 ? _a : state[auditsStoreName][subState]; }, shallowEqual);
};
const reducerActionsGenerator = (actions, reducers) => {
    const dispatch = useDispatch();
    return useMemo(() => bindActionCreators(Object.assign(Object.assign({}, actions), sliceReducerActionsBy(reducers)), dispatch), [dispatch]);
};

const useAuditLogsState = (stateMapper) => stateHookGenerator(stateMapper, 'auditLogsState');
const useAuditLogsActions = () => reducerActionsGenerator(auditLogsActions, auditLogsReducers);

const useAuditsMetadataState = (stateMapper) => stateHookGenerator(stateMapper, 'auditsMetadataState');
const useAuditsMetadataActions = () => reducerActionsGenerator(auditsMetadataActions, auditsMetadataReducers);

export { useAuditsActions as a, useAuditLogsState as b, useAuditLogsActions as c, useAuditsMetadataState as d, useAuditsMetadataActions as e, useAuditsState as u };

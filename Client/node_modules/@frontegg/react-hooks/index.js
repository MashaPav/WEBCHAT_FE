import { u as useAuth, c as useAuthRoutes } from './sessionsPolicy-de5104cf.js';
export { T as ShadowDomContext, w as reloadProfileIfNeeded, i as useAcceptInvitationActions, h as useAcceptInvitationState, k as useActivateAccountActions, j as useActivateAccountState, m as useApiTokensActions, l as useApiTokensState, u as useAuth, a as useAuthActions, c as useAuthRoutes, E as useAuthTeamActions, D as useAuthTeamState, e as useAuthUser, f as useAuthUserOrNull, o as useForgotPasswordActions, n as useForgotPasswordState, d as useIsAuthenticated, s as useLoginActions, r as useLoginState, g as useLoginWithRedirect, v as useMfaActions, t as useMfaState, b as useOnRedirectTo, y as useProfileActions, x as useProfileState, K as usePublicAuthStrategiesPolicySettings, J as usePublicPolicySettings, q as useResetPhoneNumberActions, p as useResetPhoneNumberState, O as useRolesActions, N as useRolesState, G as useSSOActions, F as useSSOState, I as useSecurityPolicyActions, H as useSecurityPolicyState, Q as useSessionsActions, S as useSessionsPolicyActions, R as useSessionsPolicyState, P as useSessionsState, U as useShadowDom, A as useSignUpActions, z as useSignUpState, C as useSocialLoginActions, B as useSocialLoginState, M as useTenantsActions, L as useTenantsState } from './sessionsPolicy-de5104cf.js';
import { __rest } from 'tslib';
import React, { useMemo, useRef, useState, useEffect } from 'react';
import { Provider } from 'react-redux';
export { Provider, connectAdvanced, shallowEqual } from 'react-redux';
import { createFronteggStore } from '@frontegg/redux-store';
import { ContextHolder } from '@frontegg/rest-api';
import { F as FronteggStoreContext } from './FronteggStoreContext-d6c3b684.js';
export { F as FronteggStoreContext, a as useDispatch, u as useSelector, b as useStore } from './FronteggStoreContext-d6c3b684.js';
export { c as useAuditLogsActions, b as useAuditLogsState, a as useAuditsActions, e as useAuditsMetadataActions, d as useAuditsMetadataState, u as useAuditsState } from './auditsMetadata-9ab88593.js';
export { u as useConnectivityActions, a as useConnectivityState } from './hooks-6400e233.js';
export { f as useBillingInformation, g as useBillingInformationActions, d as useCheckout, e as useCheckoutActions, j as useInvoices, k as useInvoicesActions, h as usePaymentMethod, i as usePaymentMethodActions, u as usePaymentProvider, a as usePaymentProviderActions, b as usePlans, c as usePlansActions, m as useStripeActions, l as useStripeState, p as useSubscription, q as useSubscriptionActions, n as useSubscriptionCancellation, o as useSubscriptionRenewal, r as useVendorPublicConfig, s as useVendorPublicConfigActions } from './hooks-46ec08e7.js';
export { u as useVendorActions, a as useVendorState } from './hooks-eaf879c9.js';

const setLoading = (loading) => {
    const isSSR = typeof document === 'undefined' || typeof window === 'undefined';
    if (!isSSR) {
        if (loading) {
            document.body.classList.add('frontegg-loading');
        }
        else {
            document.body.classList.remove('frontegg-loading');
        }
    }
};
const HideChildrenIfFronteggRoutes = ({ children, basename }) => {
    const routes = useAuthRoutes();
    const uriRef = useRef(window.location.pathname);
    const animationFrameRef = useRef(0);
    const [uri, setUri] = useState(window.location.pathname);
    const checker = () => {
        if (uriRef.current !== window.location.pathname) {
            uriRef.current = window.location.pathname;
            setUri(document.location.pathname);
        }
        animationFrameRef.current = window.requestAnimationFrame(checker);
    };
    useEffect(() => {
        document.addEventListener('frontegg_onRedirectTo_fired', () => {
            if (uriRef.current !== window.location.pathname) {
                uriRef.current = window.location.pathname;
                setUri(document.location.pathname);
            }
        });
        window.addEventListener('popstate', () => {
            if (uriRef.current !== window.location.pathname) {
                uriRef.current = window.location.pathname;
                setUri(document.location.pathname);
            }
        });
        animationFrameRef.current = window.requestAnimationFrame(checker);
        return () => {
            window.cancelAnimationFrame(animationFrameRef.current);
        };
    }, [setUri]);
    const calculatedBasename = basename ? (basename.endsWith('/') ? basename.substring(0, basename.length - 1) : '') : '';
    const checkRoutes = __rest(routes, ["authenticatedUrl", "signUpSuccessUrl"]);
    if (Object.values(checkRoutes).map(url => `${calculatedBasename}${url}`).indexOf(uri) !== -1) {
        return null;
    }
    return React.createElement(React.Fragment, null, children);
};
const FronteggContent = ({ children, app, setLoading }) => {
    var _a, _b, _c;
    const { isLoading } = useAuth(({ isLoading }) => ({ isLoading }));
    const customLoginBox = !app || ((_a = app === null || app === void 0 ? void 0 : app.options) === null || _a === void 0 ? void 0 : _a.customLoginBox) === true;
    const alwaysShowChildren = customLoginBox || (((_b = app === null || app === void 0 ? void 0 : app.options) === null || _b === void 0 ? void 0 : _b.hostedLoginBox) === true && ((_c = app === null || app === void 0 ? void 0 : app.options) === null || _c === void 0 ? void 0 : _c.framework) === 'nextjs');
    const loadingRef = useRef(undefined);
    if (isLoading !== loadingRef.current) {
        loadingRef.current = isLoading;
        setLoading(isLoading);
    }
    if (isLoading) {
        return null;
    }
    if (alwaysShowChildren) {
        return React.createElement(React.Fragment, null, children);
    }
    return React.createElement(HideChildrenIfFronteggRoutes, { basename: app === null || app === void 0 ? void 0 : app.options.basename }, children);
};
const FronteggStoreProvider = ({ children, app, contextOptions, setLoading: setLoadingProps, }) => {
    var _a, _b, _c, _d, _e, _f;
    const context = (_b = (_a = app === null || app === void 0 ? void 0 : app.options) === null || _a === void 0 ? void 0 : _a.contextOptions) !== null && _b !== void 0 ? _b : contextOptions;
    const previewMode = (_d = (_c = app === null || app === void 0 ? void 0 : app.options) === null || _c === void 0 ? void 0 : _c.previewMode) !== null && _d !== void 0 ? _d : false;
    const authOptions = ((_e = app === null || app === void 0 ? void 0 : app.options) === null || _e === void 0 ? void 0 : _e.authOptions) ? Object.assign(Object.assign({}, app.options.authOptions), { hostedLoginBox: app.options.hostedLoginBox }) : { hostedLoginBox: (_f = app === null || app === void 0 ? void 0 : app.options) === null || _f === void 0 ? void 0 : _f.hostedLoginBox };
    ContextHolder.setContext(context);
    const store = useMemo(() => createFronteggStore({
        context: context
    }, app, previewMode, authOptions), [app, previewMode]);
    return (React.createElement(Provider, { context: FronteggStoreContext, store: store },
        React.createElement(FronteggContent, { setLoading: setLoadingProps !== null && setLoadingProps !== void 0 ? setLoadingProps : setLoading, app: app }, children)));
};

export { FronteggStoreProvider };

import { authStoreName, bindActionCreators, authActions, acceptInvitationActions, acceptInvitationReducers, activateAccountActions, activateAccountReducers, apiTokensActions, apiTokensReducers, forgotPasswordActions, forgotPasswordReducers, resetPhoneNumberActions, resetPhoneNumberReducers, loginActions, loginReducers, mfaActions, mfaReducers, profileActions, profileReducers, signUpActions, signUpReducers, socialLoginsActions, socialLoginsReducer, teamActions, teamReducers, ssoActions, ssoReducers, securityPolicyActions, securityPolicyReducers, tenantsActions, tenantsReducers, rolesActions, rolesReducers, sessionsActions, sessionsReducers, sessionsPolicyActions, sessionsPolicyReducers } from '@frontegg/redux-store';
import { createContext, useContext, useMemo, useEffect } from 'react';
import { shallowEqual } from 'react-redux';
import { u as useSelector, a as useDispatch } from './FronteggStoreContext-d6c3b684.js';
import { ContextHolder } from '@frontegg/rest-api';
import { __rest } from 'tslib';

const ShadowDomContext = createContext({});
const useShadowDom = () => {
    const context = useContext(ShadowDomContext);
    const { urlStrategy = 'path', onRedirectTo = urlStrategy === 'path'
        ? (path) => window.history.pushState(null, '', path)
        : (path) => window.history.pushState(null, '', `#${path}`), renderByRoute = false, customLoader = false, customStyles, contextOptions } = context, rest = __rest(context, ["urlStrategy", "onRedirectTo", "renderByRoute", "customLoader", "customStyles", "contextOptions"]);
    return Object.assign({ isShadowDom: true, onRedirectTo,
        renderByRoute,
        customLoader,
        customStyles,
        urlStrategy, contextOptions: Object.assign({ requestCredentials: 'include' }, contextOptions) }, rest);
};

const defaultMapper = {
    state: (state) => state,
    actions: (actions) => actions,
};
const useAuth = (stateMapper = defaultMapper.state) => {
    return useSelector((state) => stateMapper(state[authStoreName]), shallowEqual);
};
/**
 * ```jsx
 * export const MyFunctionComponent = () => {
 *   const { isAuthenticated, user } = useAuth();
 *   const loginWithRedirect = useLoginWithRedirect();
 *
 *   if (!isAuthenticated) {
 *     loginWithRedirect();
 *     return <></>;
 *   }
 *
 *   return (<div>Hello User {user.name}</div>);
 * }
 * ```
 *
 * use this frontegg hook function to get if user is "Authenticated"
 */
const useLoginWithRedirect = () => {
    const dispatch = useDispatch();
    return useMemo(() => bindActionCreators(authActions.requestHostedLoginAuthorize, dispatch), [authActions.requestHostedLoginAuthorize]);
};
const useAuthActions = () => {
    const dispatch = useDispatch();
    return useMemo(() => bindActionCreators(authActions, dispatch), [authActions]);
};
const useOnRedirectTo = () => {
    var _a;
    const context = useContext(ShadowDomContext);
    return (_a = context === null || context === void 0 ? void 0 : context.onRedirectTo) !== null && _a !== void 0 ? _a : ContextHolder.onRedirectTo;
};
const useAuthRoutes = () => useAuth((state) => (Object.assign({}, state.routes)));
/**
 * ```jsx
 * export const MyFunctionComponent = () => {
 *   const isAuthenticated  = useIsAuthenticated();
 *   return isAuthenticated ? <div>Hello User</div> : <Redirect to={'/login'}/>
 * }
 * ```
 *
 * use this frontegg hook function to get if user is "Authenticated"
 */
const useIsAuthenticated = () => useSelector(({ [authStoreName]: { isAuthenticated } }) => isAuthenticated, shallowEqual);
/**
 * ```jsx
 * export const MyFunctionComponent = () => {
 *   const user = useAuthUser();
 *   return user ? <div>Hello {user.name}!</div> : <div>Hello Guest!</div>
 * }
 * ```
 *
 * use this frontegg hook function to get the authenticated user
 * the return user is null if not authenticated
 */
const useAuthUser = () => {
    const routes = useAuthRoutes();
    const onRedirectTo = useOnRedirectTo();
    const user = useAuthUserOrNull();
    if (user == null) {
        onRedirectTo(routes.loginUrl, { refresh: true });
        return {};
    }
    return user;
};
const useAuthUserOrNull = () => {
    const { user } = useSelector(({ [authStoreName]: { user } }) => ({ user }), shallowEqual);
    return user || null;
};
/**
 * hooks helpers
 */
const sliceReducerActionsBy = (reducer) => {
    const reducerKeys = Object.keys(reducer);
    const reducerActions = reducerKeys.map((key) => ({ [key]: authActions[key] }));
    return reducerActions.reduce((p, n) => (Object.assign(Object.assign({}, p), n)), {});
};
const stateHookGenerator = (stateMapper, subState) => {
    return useSelector((state) => { var _a; return (_a = stateMapper === null || stateMapper === void 0 ? void 0 : stateMapper(state[authStoreName][subState])) !== null && _a !== void 0 ? _a : state[authStoreName][subState]; }, shallowEqual);
};
const reducerActionsGenerator = (actions, reducers) => {
    const dispatch = useDispatch();
    return useMemo(() => bindActionCreators(Object.assign(Object.assign({}, actions), sliceReducerActionsBy(reducers)), dispatch), [dispatch]);
};

const useAcceptInvitationState = (stateMapper) => stateHookGenerator(stateMapper, 'acceptInvitationState');
const useAcceptInvitationActions = () => reducerActionsGenerator(acceptInvitationActions, acceptInvitationReducers);

const useActivateAccountState = (stateMapper) => stateHookGenerator(stateMapper, 'activateState');
const useActivateAccountActions = () => reducerActionsGenerator(activateAccountActions, activateAccountReducers);

const useApiTokensState = (stateMapper) => stateHookGenerator(stateMapper, 'apiTokensState');
const useApiTokensActions = () => reducerActionsGenerator(apiTokensActions, apiTokensReducers);

const useForgotPasswordState = (stateMapper) => stateHookGenerator(stateMapper, 'forgotPasswordState');
const useForgotPasswordActions = () => reducerActionsGenerator(forgotPasswordActions, forgotPasswordReducers);

const useResetPhoneNumberState = (stateMapper) => stateHookGenerator(stateMapper, 'resetPhoneNumberState');
const useResetPhoneNumberActions = () => reducerActionsGenerator(resetPhoneNumberActions, resetPhoneNumberReducers);

const useLoginState = (stateMapper) => stateHookGenerator(stateMapper, 'loginState');
const useLoginActions = () => reducerActionsGenerator(loginActions, loginReducers);

const useMfaState = (stateMapper) => stateHookGenerator(stateMapper, 'mfaState');
const useMfaActions = () => reducerActionsGenerator(mfaActions, mfaReducers);

const reloadProfileIfNeeded = () => {
    const { loading } = useProfileState();
    const { loadProfile } = useProfileActions();
    useEffect(() => {
        !loading && loadProfile();
    }, []);
};
const useProfileState = (stateMapper) => stateHookGenerator(stateMapper, 'profileState');
const useProfileActions = () => reducerActionsGenerator(profileActions, profileReducers);

const useSignUpState = (stateMapper) => stateHookGenerator(stateMapper, 'signUpState');
const useSignUpActions = () => reducerActionsGenerator(signUpActions, signUpReducers);

const useSocialLoginState = (stateMapper) => stateHookGenerator(stateMapper, 'socialLoginState');
const useSocialLoginActions = () => reducerActionsGenerator(socialLoginsActions, socialLoginsReducer);

const useAuthTeamState = (stateMapper) => stateHookGenerator(stateMapper, 'teamState');
const useAuthTeamActions = () => reducerActionsGenerator(teamActions, teamReducers);

const useSSOState = (stateMapper) => stateHookGenerator(stateMapper, 'ssoState');
const useSSOActions = () => reducerActionsGenerator(ssoActions, ssoReducers);

const useSecurityPolicyState = (stateMapper) => stateHookGenerator(stateMapper, 'securityPolicyState');
const useSecurityPolicyActions = () => reducerActionsGenerator(securityPolicyActions, securityPolicyReducers);
const usePublicPolicySettings = (loadOnMount = false) => {
    const { loading, policy, saving, error } = useSecurityPolicyState(state => state.publicPolicy);
    const { loadPublicSecurityPolicy } = useSecurityPolicyActions();
    useEffect(() => {
        (loadOnMount || !policy) && loadPublicSecurityPolicy();
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [loadOnMount, loadPublicSecurityPolicy]);
    return { loading, saving, error, policy };
};
const usePublicAuthStrategiesPolicySettings = (loadOnMount = false) => {
    const { loading, policy, saving, error } = useSecurityPolicyState(state => state.publicAuthStrategyPolicy);
    const { loadPublicAuthStrategiesPolicy } = useSecurityPolicyActions();
    useEffect(() => {
        (loadOnMount || !policy) && loadPublicAuthStrategiesPolicy();
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [loadOnMount, loadPublicAuthStrategiesPolicy]);
    return { loading, saving, error, policy };
};

const useTenantsState = (stateMapper) => stateHookGenerator(stateMapper, 'tenantsState');
const useTenantsActions = () => reducerActionsGenerator(tenantsActions, tenantsReducers);

const useRolesState = (stateMapper) => stateHookGenerator(stateMapper, 'rolesState');
const useRolesActions = () => reducerActionsGenerator(rolesActions, rolesReducers);

const useSessionsState = (stateMapper) => stateHookGenerator(stateMapper, 'sessionsState');
const useSessionsActions = () => reducerActionsGenerator(sessionsActions, sessionsReducers);

const useSessionsPolicyState = (stateMapper) => stateHookGenerator(stateMapper, 'sessionsPolicyState');
const useSessionsPolicyActions = () => reducerActionsGenerator(sessionsPolicyActions, sessionsPolicyReducers);

export { useSignUpActions as A, useSocialLoginState as B, useSocialLoginActions as C, useAuthTeamState as D, useAuthTeamActions as E, useSSOState as F, useSSOActions as G, useSecurityPolicyState as H, useSecurityPolicyActions as I, usePublicPolicySettings as J, usePublicAuthStrategiesPolicySettings as K, useTenantsState as L, useTenantsActions as M, useRolesState as N, useRolesActions as O, useSessionsState as P, useSessionsActions as Q, useSessionsPolicyState as R, useSessionsPolicyActions as S, ShadowDomContext as T, useShadowDom as U, useAuthActions as a, useOnRedirectTo as b, useAuthRoutes as c, useIsAuthenticated as d, useAuthUser as e, useAuthUserOrNull as f, useLoginWithRedirect as g, useAcceptInvitationState as h, useAcceptInvitationActions as i, useActivateAccountState as j, useActivateAccountActions as k, useApiTokensState as l, useApiTokensActions as m, useForgotPasswordState as n, useForgotPasswordActions as o, useResetPhoneNumberState as p, useResetPhoneNumberActions as q, useLoginState as r, useLoginActions as s, useMfaState as t, useAuth as u, useMfaActions as v, reloadProfileIfNeeded as w, useProfileState as x, useProfileActions as y, useSignUpState as z };

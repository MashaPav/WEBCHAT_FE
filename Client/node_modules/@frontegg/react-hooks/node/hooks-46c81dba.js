'use strict';

var reduxStore = require('@frontegg/redux-store');
var FronteggStoreContext = require('./FronteggStoreContext-6cfac56c.js');
var reactRedux = require('react-redux');
var React = require('react');

function getSubscriptionState(state) {
    return state[reduxStore.subscriptionsStoreName];
}
const usePaymentProvider = () => {
    return FronteggStoreContext.useSelector((state) => getSubscriptionState(state).config, reactRedux.shallowEqual);
};
const usePaymentProviderActions = () => {
    const dispatch = FronteggStoreContext.useDispatch();
    return React.useMemo(() => reduxStore.bindActionCreators(reduxStore.subscriptionActions.config, dispatch), [dispatch]);
};
const usePlans = () => {
    return FronteggStoreContext.useSelector((state) => getSubscriptionState(state).plans, reactRedux.shallowEqual);
};
const usePlansActions = () => {
    const dispatch = FronteggStoreContext.useDispatch();
    return React.useMemo(() => reduxStore.bindActionCreators(reduxStore.subscriptionActions.plans, dispatch), [dispatch]);
};
const useCheckout = () => {
    return FronteggStoreContext.useSelector((state) => getSubscriptionState(state).checkout, reactRedux.shallowEqual);
};
const useCheckoutActions = () => {
    const dispatch = FronteggStoreContext.useDispatch();
    return React.useMemo(() => reduxStore.bindActionCreators(reduxStore.subscriptionActions.checkout, dispatch), [dispatch]);
};
const useBillingActions = (billingKey) => {
    const dispatch = FronteggStoreContext.useDispatch();
    return React.useMemo(() => reduxStore.bindActionCreators(reduxStore.subscriptionActions.billing[billingKey], dispatch), [billingKey, dispatch]);
};
const useBillingInformation = () => FronteggStoreContext.useSelector((state) => getSubscriptionState(state).billing.information, reactRedux.shallowEqual);
const useBillingInformationActions = () => useBillingActions('information');
const usePaymentMethod = () => FronteggStoreContext.useSelector((state) => getSubscriptionState(state).billing.paymentMethod, reactRedux.shallowEqual);
const usePaymentMethodActions = () => useBillingActions('paymentMethod');
const useInvoices = () => FronteggStoreContext.useSelector((state) => getSubscriptionState(state).billing.invoices, reactRedux.shallowEqual);
const useInvoicesActions = () => useBillingActions('invoices');
const useStripeState = () => {
    return FronteggStoreContext.useSelector((state) => getSubscriptionState(state).stripe, reactRedux.shallowEqual);
};
const useStripeActions = () => {
    const dispatch = FronteggStoreContext.useDispatch();
    return React.useMemo(() => reduxStore.bindActionCreators(reduxStore.subscriptionActions.stripe, dispatch), [dispatch]);
};
const useSubscriptionCancellation = () => {
    return FronteggStoreContext.useSelector((state) => getSubscriptionState(state).billing.subscription.cancellation, reactRedux.shallowEqual);
};
const useSubscriptionRenewal = () => {
    return FronteggStoreContext.useSelector((state) => getSubscriptionState(state).billing.subscription.renewal, reactRedux.shallowEqual);
};
const useSubscription = () => {
    return FronteggStoreContext.useSelector((state) => {
        const { billing: { subscription }, } = getSubscriptionState(state);
        return subscription;
    }, reactRedux.shallowEqual);
};
const useSubscriptionActions = () => {
    const dispatch = FronteggStoreContext.useDispatch();
    return React.useMemo(() => reduxStore.bindActionCreators(reduxStore.subscriptionActions.billing.subscription, dispatch), [dispatch]);
};
const useVendorPublicConfig = () => {
    return FronteggStoreContext.useSelector((state) => {
        const { vendorPublicConfig } = getSubscriptionState(state);
        return vendorPublicConfig;
    }, reactRedux.shallowEqual);
};
const useVendorPublicConfigActions = () => {
    const dispatch = FronteggStoreContext.useDispatch();
    return React.useMemo(() => reduxStore.bindActionCreators(reduxStore.subscriptionActions.vendorPublicConfig, dispatch), [dispatch]);
};

exports.useBillingInformation = useBillingInformation;
exports.useBillingInformationActions = useBillingInformationActions;
exports.useCheckout = useCheckout;
exports.useCheckoutActions = useCheckoutActions;
exports.useInvoices = useInvoices;
exports.useInvoicesActions = useInvoicesActions;
exports.usePaymentMethod = usePaymentMethod;
exports.usePaymentMethodActions = usePaymentMethodActions;
exports.usePaymentProvider = usePaymentProvider;
exports.usePaymentProviderActions = usePaymentProviderActions;
exports.usePlans = usePlans;
exports.usePlansActions = usePlansActions;
exports.useStripeActions = useStripeActions;
exports.useStripeState = useStripeState;
exports.useSubscription = useSubscription;
exports.useSubscriptionActions = useSubscriptionActions;
exports.useSubscriptionCancellation = useSubscriptionCancellation;
exports.useSubscriptionRenewal = useSubscriptionRenewal;
exports.useVendorPublicConfig = useVendorPublicConfig;
exports.useVendorPublicConfigActions = useVendorPublicConfigActions;

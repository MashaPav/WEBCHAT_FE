'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var sessionsPolicy = require('./sessionsPolicy-27896c28.js');
var auditsMetadata = require('./auditsMetadata-d15799a1.js');
var hooks = require('./hooks-5d5a445e.js');
var hooks$1 = require('./hooks-46c81dba.js');
var hooks$2 = require('./hooks-cf739b27.js');
var tslib = require('tslib');
var React = require('react');
var reactRedux = require('react-redux');
var reduxStore = require('@frontegg/redux-store');
var restApi = require('@frontegg/rest-api');
var FronteggStoreContext = require('./FronteggStoreContext-6cfac56c.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

const setLoading = (loading) => {
    const isSSR = typeof document === 'undefined' || typeof window === 'undefined';
    if (!isSSR) {
        if (loading) {
            document.body.classList.add('frontegg-loading');
        }
        else {
            document.body.classList.remove('frontegg-loading');
        }
    }
};
const HideChildrenIfFronteggRoutes = ({ children, basename }) => {
    const routes = sessionsPolicy.useAuthRoutes();
    const uriRef = React.useRef(window.location.pathname);
    const animationFrameRef = React.useRef(0);
    const [uri, setUri] = React.useState(window.location.pathname);
    const checker = () => {
        if (uriRef.current !== window.location.pathname) {
            uriRef.current = window.location.pathname;
            setUri(document.location.pathname);
        }
        animationFrameRef.current = window.requestAnimationFrame(checker);
    };
    React.useEffect(() => {
        document.addEventListener('frontegg_onRedirectTo_fired', () => {
            if (uriRef.current !== window.location.pathname) {
                uriRef.current = window.location.pathname;
                setUri(document.location.pathname);
            }
        });
        window.addEventListener('popstate', () => {
            if (uriRef.current !== window.location.pathname) {
                uriRef.current = window.location.pathname;
                setUri(document.location.pathname);
            }
        });
        animationFrameRef.current = window.requestAnimationFrame(checker);
        return () => {
            window.cancelAnimationFrame(animationFrameRef.current);
        };
    }, [setUri]);
    const calculatedBasename = basename ? (basename.endsWith('/') ? basename.substring(0, basename.length - 1) : '') : '';
    const checkRoutes = tslib.__rest(routes, ["authenticatedUrl", "signUpSuccessUrl"]);
    if (Object.values(checkRoutes).map(url => `${calculatedBasename}${url}`).indexOf(uri) !== -1) {
        return null;
    }
    return React__default['default'].createElement(React__default['default'].Fragment, null, children);
};
const FronteggContent = ({ children, app, setLoading }) => {
    var _a, _b, _c;
    const { isLoading } = sessionsPolicy.useAuth(({ isLoading }) => ({ isLoading }));
    const customLoginBox = !app || ((_a = app === null || app === void 0 ? void 0 : app.options) === null || _a === void 0 ? void 0 : _a.customLoginBox) === true;
    const alwaysShowChildren = customLoginBox || (((_b = app === null || app === void 0 ? void 0 : app.options) === null || _b === void 0 ? void 0 : _b.hostedLoginBox) === true && ((_c = app === null || app === void 0 ? void 0 : app.options) === null || _c === void 0 ? void 0 : _c.framework) === 'nextjs');
    const loadingRef = React.useRef(undefined);
    if (isLoading !== loadingRef.current) {
        loadingRef.current = isLoading;
        setLoading(isLoading);
    }
    if (isLoading) {
        return null;
    }
    if (alwaysShowChildren) {
        return React__default['default'].createElement(React__default['default'].Fragment, null, children);
    }
    return React__default['default'].createElement(HideChildrenIfFronteggRoutes, { basename: app === null || app === void 0 ? void 0 : app.options.basename }, children);
};
const FronteggStoreProvider = ({ children, app, contextOptions, setLoading: setLoadingProps, }) => {
    var _a, _b, _c, _d, _e, _f;
    const context = (_b = (_a = app === null || app === void 0 ? void 0 : app.options) === null || _a === void 0 ? void 0 : _a.contextOptions) !== null && _b !== void 0 ? _b : contextOptions;
    const previewMode = (_d = (_c = app === null || app === void 0 ? void 0 : app.options) === null || _c === void 0 ? void 0 : _c.previewMode) !== null && _d !== void 0 ? _d : false;
    const authOptions = ((_e = app === null || app === void 0 ? void 0 : app.options) === null || _e === void 0 ? void 0 : _e.authOptions) ? Object.assign(Object.assign({}, app.options.authOptions), { hostedLoginBox: app.options.hostedLoginBox }) : { hostedLoginBox: (_f = app === null || app === void 0 ? void 0 : app.options) === null || _f === void 0 ? void 0 : _f.hostedLoginBox };
    restApi.ContextHolder.setContext(context);
    const store = React.useMemo(() => reduxStore.createFronteggStore({
        context: context
    }, app, previewMode, authOptions), [app, previewMode]);
    return (React__default['default'].createElement(reactRedux.Provider, { context: FronteggStoreContext.FronteggStoreContext, store: store },
        React__default['default'].createElement(FronteggContent, { setLoading: setLoadingProps !== null && setLoadingProps !== void 0 ? setLoadingProps : setLoading, app: app }, children)));
};

exports.ShadowDomContext = sessionsPolicy.ShadowDomContext;
exports.reloadProfileIfNeeded = sessionsPolicy.reloadProfileIfNeeded;
exports.useAcceptInvitationActions = sessionsPolicy.useAcceptInvitationActions;
exports.useAcceptInvitationState = sessionsPolicy.useAcceptInvitationState;
exports.useActivateAccountActions = sessionsPolicy.useActivateAccountActions;
exports.useActivateAccountState = sessionsPolicy.useActivateAccountState;
exports.useApiTokensActions = sessionsPolicy.useApiTokensActions;
exports.useApiTokensState = sessionsPolicy.useApiTokensState;
exports.useAuth = sessionsPolicy.useAuth;
exports.useAuthActions = sessionsPolicy.useAuthActions;
exports.useAuthRoutes = sessionsPolicy.useAuthRoutes;
exports.useAuthTeamActions = sessionsPolicy.useAuthTeamActions;
exports.useAuthTeamState = sessionsPolicy.useAuthTeamState;
exports.useAuthUser = sessionsPolicy.useAuthUser;
exports.useAuthUserOrNull = sessionsPolicy.useAuthUserOrNull;
exports.useForgotPasswordActions = sessionsPolicy.useForgotPasswordActions;
exports.useForgotPasswordState = sessionsPolicy.useForgotPasswordState;
exports.useIsAuthenticated = sessionsPolicy.useIsAuthenticated;
exports.useLoginActions = sessionsPolicy.useLoginActions;
exports.useLoginState = sessionsPolicy.useLoginState;
exports.useLoginWithRedirect = sessionsPolicy.useLoginWithRedirect;
exports.useMfaActions = sessionsPolicy.useMfaActions;
exports.useMfaState = sessionsPolicy.useMfaState;
exports.useOnRedirectTo = sessionsPolicy.useOnRedirectTo;
exports.useProfileActions = sessionsPolicy.useProfileActions;
exports.useProfileState = sessionsPolicy.useProfileState;
exports.usePublicAuthStrategiesPolicySettings = sessionsPolicy.usePublicAuthStrategiesPolicySettings;
exports.usePublicPolicySettings = sessionsPolicy.usePublicPolicySettings;
exports.useResetPhoneNumberActions = sessionsPolicy.useResetPhoneNumberActions;
exports.useResetPhoneNumberState = sessionsPolicy.useResetPhoneNumberState;
exports.useRolesActions = sessionsPolicy.useRolesActions;
exports.useRolesState = sessionsPolicy.useRolesState;
exports.useSSOActions = sessionsPolicy.useSSOActions;
exports.useSSOState = sessionsPolicy.useSSOState;
exports.useSecurityPolicyActions = sessionsPolicy.useSecurityPolicyActions;
exports.useSecurityPolicyState = sessionsPolicy.useSecurityPolicyState;
exports.useSessionsActions = sessionsPolicy.useSessionsActions;
exports.useSessionsPolicyActions = sessionsPolicy.useSessionsPolicyActions;
exports.useSessionsPolicyState = sessionsPolicy.useSessionsPolicyState;
exports.useSessionsState = sessionsPolicy.useSessionsState;
exports.useShadowDom = sessionsPolicy.useShadowDom;
exports.useSignUpActions = sessionsPolicy.useSignUpActions;
exports.useSignUpState = sessionsPolicy.useSignUpState;
exports.useSocialLoginActions = sessionsPolicy.useSocialLoginActions;
exports.useSocialLoginState = sessionsPolicy.useSocialLoginState;
exports.useTenantsActions = sessionsPolicy.useTenantsActions;
exports.useTenantsState = sessionsPolicy.useTenantsState;
exports.useAuditLogsActions = auditsMetadata.useAuditLogsActions;
exports.useAuditLogsState = auditsMetadata.useAuditLogsState;
exports.useAuditsActions = auditsMetadata.useAuditsActions;
exports.useAuditsMetadataActions = auditsMetadata.useAuditsMetadataActions;
exports.useAuditsMetadataState = auditsMetadata.useAuditsMetadataState;
exports.useAuditsState = auditsMetadata.useAuditsState;
exports.useConnectivityActions = hooks.useConnectivityActions;
exports.useConnectivityState = hooks.useConnectivityState;
exports.useBillingInformation = hooks$1.useBillingInformation;
exports.useBillingInformationActions = hooks$1.useBillingInformationActions;
exports.useCheckout = hooks$1.useCheckout;
exports.useCheckoutActions = hooks$1.useCheckoutActions;
exports.useInvoices = hooks$1.useInvoices;
exports.useInvoicesActions = hooks$1.useInvoicesActions;
exports.usePaymentMethod = hooks$1.usePaymentMethod;
exports.usePaymentMethodActions = hooks$1.usePaymentMethodActions;
exports.usePaymentProvider = hooks$1.usePaymentProvider;
exports.usePaymentProviderActions = hooks$1.usePaymentProviderActions;
exports.usePlans = hooks$1.usePlans;
exports.usePlansActions = hooks$1.usePlansActions;
exports.useStripeActions = hooks$1.useStripeActions;
exports.useStripeState = hooks$1.useStripeState;
exports.useSubscription = hooks$1.useSubscription;
exports.useSubscriptionActions = hooks$1.useSubscriptionActions;
exports.useSubscriptionCancellation = hooks$1.useSubscriptionCancellation;
exports.useSubscriptionRenewal = hooks$1.useSubscriptionRenewal;
exports.useVendorPublicConfig = hooks$1.useVendorPublicConfig;
exports.useVendorPublicConfigActions = hooks$1.useVendorPublicConfigActions;
exports.useVendorActions = hooks$2.useVendorActions;
exports.useVendorState = hooks$2.useVendorState;
Object.defineProperty(exports, 'Provider', {
  enumerable: true,
  get: function () {
    return reactRedux.Provider;
  }
});
Object.defineProperty(exports, 'connectAdvanced', {
  enumerable: true,
  get: function () {
    return reactRedux.connectAdvanced;
  }
});
Object.defineProperty(exports, 'shallowEqual', {
  enumerable: true,
  get: function () {
    return reactRedux.shallowEqual;
  }
});
exports.FronteggStoreContext = FronteggStoreContext.FronteggStoreContext;
exports.useDispatch = FronteggStoreContext.useDispatch;
exports.useSelector = FronteggStoreContext.useSelector;
exports.useStore = FronteggStoreContext.useStore;
exports.FronteggStoreProvider = FronteggStoreProvider;

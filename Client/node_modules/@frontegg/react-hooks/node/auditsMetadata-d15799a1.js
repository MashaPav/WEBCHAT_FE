'use strict';

var reduxStore = require('@frontegg/redux-store');
var React = require('react');
var reactRedux = require('react-redux');
var FronteggStoreContext = require('./FronteggStoreContext-6cfac56c.js');

const useAuditsState = (stateMapper) => {
    return FronteggStoreContext.useSelector((state) => { var _a; return (_a = stateMapper === null || stateMapper === void 0 ? void 0 : stateMapper(state[reduxStore.auditsStoreName])) !== null && _a !== void 0 ? _a : state[reduxStore.auditsStoreName]; }, reactRedux.shallowEqual);
};
const useAuditsActions = () => {
    const dispatch = FronteggStoreContext.useDispatch();
    return React.useMemo(() => reduxStore.bindActionCreators(reduxStore.auditsActions, dispatch), [reduxStore.auditsActions]);
};
/**
 * hooks helpers
 */
const sliceReducerActionsBy = (reducer) => {
    const reducerKeys = Object.keys(reducer);
    const reducerActions = reducerKeys.map((key) => ({ [key]: reduxStore.auditsActions[key] }));
    return reducerActions.reduce((p, n) => (Object.assign(Object.assign({}, p), n)), {});
};
const stateHookGenerator = (stateMapper, subState) => {
    return FronteggStoreContext.useSelector((state) => { var _a; return (_a = stateMapper === null || stateMapper === void 0 ? void 0 : stateMapper(state[reduxStore.auditsStoreName][subState])) !== null && _a !== void 0 ? _a : state[reduxStore.auditsStoreName][subState]; }, reactRedux.shallowEqual);
};
const reducerActionsGenerator = (actions, reducers) => {
    const dispatch = FronteggStoreContext.useDispatch();
    return React.useMemo(() => reduxStore.bindActionCreators(Object.assign(Object.assign({}, actions), sliceReducerActionsBy(reducers)), dispatch), [dispatch]);
};

const useAuditLogsState = (stateMapper) => stateHookGenerator(stateMapper, 'auditLogsState');
const useAuditLogsActions = () => reducerActionsGenerator(reduxStore.auditLogsActions, reduxStore.auditLogsReducers);

const useAuditsMetadataState = (stateMapper) => stateHookGenerator(stateMapper, 'auditsMetadataState');
const useAuditsMetadataActions = () => reducerActionsGenerator(reduxStore.auditsMetadataActions, reduxStore.auditsMetadataReducers);

exports.useAuditLogsActions = useAuditLogsActions;
exports.useAuditLogsState = useAuditLogsState;
exports.useAuditsActions = useAuditsActions;
exports.useAuditsMetadataActions = useAuditsMetadataActions;
exports.useAuditsMetadataState = useAuditsMetadataState;
exports.useAuditsState = useAuditsState;

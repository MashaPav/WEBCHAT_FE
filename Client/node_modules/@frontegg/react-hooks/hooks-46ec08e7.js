import { subscriptionsStoreName, bindActionCreators, subscriptionActions } from '@frontegg/redux-store';
import { u as useSelector, a as useDispatch } from './FronteggStoreContext-d6c3b684.js';
import { shallowEqual } from 'react-redux';
import { useMemo } from 'react';

function getSubscriptionState(state) {
    return state[subscriptionsStoreName];
}
const usePaymentProvider = () => {
    return useSelector((state) => getSubscriptionState(state).config, shallowEqual);
};
const usePaymentProviderActions = () => {
    const dispatch = useDispatch();
    return useMemo(() => bindActionCreators(subscriptionActions.config, dispatch), [dispatch]);
};
const usePlans = () => {
    return useSelector((state) => getSubscriptionState(state).plans, shallowEqual);
};
const usePlansActions = () => {
    const dispatch = useDispatch();
    return useMemo(() => bindActionCreators(subscriptionActions.plans, dispatch), [dispatch]);
};
const useCheckout = () => {
    return useSelector((state) => getSubscriptionState(state).checkout, shallowEqual);
};
const useCheckoutActions = () => {
    const dispatch = useDispatch();
    return useMemo(() => bindActionCreators(subscriptionActions.checkout, dispatch), [dispatch]);
};
const useBillingActions = (billingKey) => {
    const dispatch = useDispatch();
    return useMemo(() => bindActionCreators(subscriptionActions.billing[billingKey], dispatch), [billingKey, dispatch]);
};
const useBillingInformation = () => useSelector((state) => getSubscriptionState(state).billing.information, shallowEqual);
const useBillingInformationActions = () => useBillingActions('information');
const usePaymentMethod = () => useSelector((state) => getSubscriptionState(state).billing.paymentMethod, shallowEqual);
const usePaymentMethodActions = () => useBillingActions('paymentMethod');
const useInvoices = () => useSelector((state) => getSubscriptionState(state).billing.invoices, shallowEqual);
const useInvoicesActions = () => useBillingActions('invoices');
const useStripeState = () => {
    return useSelector((state) => getSubscriptionState(state).stripe, shallowEqual);
};
const useStripeActions = () => {
    const dispatch = useDispatch();
    return useMemo(() => bindActionCreators(subscriptionActions.stripe, dispatch), [dispatch]);
};
const useSubscriptionCancellation = () => {
    return useSelector((state) => getSubscriptionState(state).billing.subscription.cancellation, shallowEqual);
};
const useSubscriptionRenewal = () => {
    return useSelector((state) => getSubscriptionState(state).billing.subscription.renewal, shallowEqual);
};
const useSubscription = () => {
    return useSelector((state) => {
        const { billing: { subscription }, } = getSubscriptionState(state);
        return subscription;
    }, shallowEqual);
};
const useSubscriptionActions = () => {
    const dispatch = useDispatch();
    return useMemo(() => bindActionCreators(subscriptionActions.billing.subscription, dispatch), [dispatch]);
};
const useVendorPublicConfig = () => {
    return useSelector((state) => {
        const { vendorPublicConfig } = getSubscriptionState(state);
        return vendorPublicConfig;
    }, shallowEqual);
};
const useVendorPublicConfigActions = () => {
    const dispatch = useDispatch();
    return useMemo(() => bindActionCreators(subscriptionActions.vendorPublicConfig, dispatch), [dispatch]);
};

export { usePaymentProviderActions as a, usePlans as b, usePlansActions as c, useCheckout as d, useCheckoutActions as e, useBillingInformation as f, useBillingInformationActions as g, usePaymentMethod as h, usePaymentMethodActions as i, useInvoices as j, useInvoicesActions as k, useStripeState as l, useStripeActions as m, useSubscriptionCancellation as n, useSubscriptionRenewal as o, useSubscription as p, useSubscriptionActions as q, useVendorPublicConfig as r, useVendorPublicConfigActions as s, usePaymentProvider as u };

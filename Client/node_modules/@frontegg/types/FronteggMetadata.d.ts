import { PaletteColorOptions, PaletteGreyOptions } from './ThemeOptions/Palette';
import { FronteggThemeOptions } from './ThemeOptions';
import { LocalizationsOverrides } from './Localizations';
declare type PageMetadata = {
    visibility: 'hidden' | 'always' | 'byPermissions';
    featureFlag?: string;
    permissions?: RolePermission[];
};
interface ProfileMetadata extends PageMetadata {
}
interface PrivacyMetadata extends PageMetadata {
}
interface UsageMetadata extends PageMetadata {
}
interface AccountMetadata extends PageMetadata {
}
export interface UsersInviteDialogMetadata {
    phoneNumberField?: 'optional' | 'mandatory' | boolean;
}
export interface UsersMetadata extends PageMetadata {
    inviteDialog?: UsersInviteDialogMetadata;
}
export interface AllUsersMetadata extends PageMetadata {
}
interface RolesMetadata extends PageMetadata {
}
interface SecurityMetadata extends PageMetadata {
}
interface SsoMetadata extends PageMetadata {
}
interface MultipleSsoMetadata extends PageMetadata {
}
interface AuditsMetadata extends PageMetadata {
    paginationMode?: 'virtual' | 'pages';
}
interface WebhooksMetadata extends PageMetadata {
}
interface ApiTokensMetadata extends PageMetadata {
}
interface SubscriptionsMetadata extends PageMetadata {
}
export declare type NavigationMetadata = {
    profile?: ProfileMetadata;
    privacy?: PrivacyMetadata;
    usage?: UsageMetadata;
    account?: AccountMetadata;
    users?: UsersMetadata;
    allUsers?: AllUsersMetadata;
    roles?: RolesMetadata;
    security?: SecurityMetadata;
    sso?: SsoMetadata;
    multipleSSO?: MultipleSsoMetadata;
    audits?: AuditsMetadata;
    webhooks?: WebhooksMetadata;
    apiTokens?: ApiTokensMetadata;
    personalApiTokens?: ApiTokensMetadata;
    subscriptions?: SubscriptionsMetadata;
};
declare type PaletteOptions = {
    primary?: PaletteColorOptions;
    secondary?: PaletteColorOptions;
    danger?: PaletteColorOptions;
    info?: PaletteColorOptions;
    success?: PaletteColorOptions;
    warning?: PaletteColorOptions;
    error?: PaletteColorOptions;
    grey?: PaletteGreyOptions;
    loader?: string;
};
declare type BreakpointsOptions = {
    xs: number;
    sm: number;
    md: number;
    lg: number;
    xl: number;
};
declare type ThemeMetadata = {
    palette?: PaletteOptions;
    breakpoints?: BreakpointsOptions;
};
export declare type FronteggMetadata = {
    theme?: ThemeMetadata;
    themeV2?: FronteggThemeOptions;
    navigation?: NavigationMetadata;
    localizations?: LocalizationsOverrides;
};
export declare type RolePermission = 'fe.connectivity.*' | 'fe.connectivity.delete.*' | 'fe.connectivity.delete.bellNotifications' | 'fe.connectivity.delete.emailConfig' | 'fe.connectivity.delete.slackAppRegistration' | 'fe.connectivity.delete.slackSubscriptionEvent' | 'fe.connectivity.delete.slackSubscriptions' | 'fe.connectivity.delete.smsConfig' | 'fe.connectivity.delete.webhook' | 'fe.connectivity.read.*' | 'fe.connectivity.read.emailConfig' | 'fe.connectivity.read.eventCategories' | 'fe.connectivity.read.events' | 'fe.connectivity.read.slackApp' | 'fe.connectivity.read.slackChannels' | 'fe.connectivity.read.slackSubscriptions' | 'fe.connectivity.read.slackUsers' | 'fe.connectivity.read.smsConfig' | 'fe.connectivity.read.userBellNotifications' | 'fe.connectivity.read.webhookLogs' | 'fe.connectivity.read.webhooks' | 'fe.connectivity.write.*' | 'fe.connectivity.write.emailConfig' | 'fe.connectivity.write.sendWebpushNotification' | 'fe.connectivity.write.slackAppRegistration' | 'fe.connectivity.write.slackSubscriptions' | 'fe.connectivity.write.smsConfig' | 'fe.connectivity.write.subscribeWebpush' | 'fe.connectivity.write.triggerEvent' | 'fe.connectivity.write.updateSlackSubscription' | 'fe.connectivity.write.updateUserBellNotification' | 'fe.connectivity.write.webhook' | 'fe.secure.*' | 'fe.secure.delete.*' | 'fe.secure.delete.role' | 'fe.secure.delete.samlConfiguration' | 'fe.secure.delete.securityPolicy' | 'fe.secure.delete.tenantApiTokens' | 'fe.secure.delete.userApiTokens' | 'fe.secure.delete.users' | 'fe.secure.delete.usersRoles' | 'fe.secure.read.*' | 'fe.secure.read.permissions' | 'fe.secure.read.roles' | 'fe.secure.read.samlConfiguration' | 'fe.secure.read.securityPolicy' | 'fe.secure.read.tenantApiTokens' | 'fe.secure.read.userApiTokens' | 'fe.secure.read.users' | 'fe.secure.write.*' | 'fe.secure.write.resendActivationEmail' | 'fe.secure.write.roles' | 'fe.secure.write.samlConfiguration' | 'fe.secure.write.securityPolicy' | 'fe.secure.write.tenantApiTokens' | 'fe.secure.write.updateRole' | 'fe.secure.write.updateUser' | 'fe.secure.write.userApiTokens' | 'fe.secure.write.users' | 'fe.secure.write.usersRoles' | 'fe.subscriptions.*' | 'fe.subscriptions.read.*' | 'fe.subscriptions.write.*' | 'fe.account-settings.delete.account';
export {};

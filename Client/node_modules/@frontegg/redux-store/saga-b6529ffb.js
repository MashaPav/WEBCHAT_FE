import { takeEvery, put } from 'redux-saga/effects';
import { api } from '@frontegg/rest-api';
import { v as vendorStoreName } from './constants-4d9682b2.js';
import { createAction, createSlice } from '@reduxjs/toolkit';

const reducers = {
    setVendorState: (state, { payload }) => (Object.assign(Object.assign({}, state), payload)),
};
const actions$1 = {
    loadVendorPublicInfo: createAction(`${vendorStoreName}/loadVendorPublicInfo`),
};

const initialState = {
    whiteLabelMode: false,
};
const { reducer, actions: sliceActions } = createSlice({
    name: vendorStoreName,
    initialState,
    reducers: Object.assign({}, reducers)
});
const actions = Object.assign(Object.assign({}, sliceActions), actions$1);

function* loadVendorPublicInfo() {
    try {
        const { whiteLabelMode = false } = yield api.vendor.getVendorPublicInfo();
        yield put(actions.setVendorState({ whiteLabelMode }));
    }
    catch (e) {
        console.error('failed to getVendorPublicInfo - ', e);
    }
}
function* sagas() {
    yield takeEvery(actions.loadVendorPublicInfo, loadVendorPublicInfo);
}

export { actions as a, initialState as i, loadVendorPublicInfo as l, reducer as r, sagas as s };

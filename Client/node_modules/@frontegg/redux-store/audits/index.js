import { b as auditsStoreName } from '../constants-4d9682b2.js';
export { b as auditsStoreName } from '../constants-4d9682b2.js';
import { createAction, createSlice } from '@reduxjs/toolkit';
import { takeEvery, select as select$1, put, call, all } from 'redux-saga/effects';
import { api } from '@frontegg/rest-api';

const typeReducerForKey = (key) => ({
    prepare: (payload) => ({ payload }),
    reducer: (state, { payload }) => {
        return Object.assign(Object.assign({}, state), { [key]: Object.assign(Object.assign({}, state[key]), payload) });
    },
});

const auditLogsState = {
    loading: true,
    pageOffset: 0,
    pageSize: 20,
    logs: [],
    sort: [],
    filter: [],
    totalPages: 0,
    isDownloadingCsv: false,
};
const reducers$1 = {
    setAuditLogsState: typeReducerForKey('auditLogsState'),
    resetAuditLogsState: (state) => (Object.assign(Object.assign({}, state), { auditLogsState })),
};
const actions$2 = {
    exportAuditsCsv: createAction(`${auditsStoreName}/exportAuditsCsv`),
    loadAuditLogs: createAction(`${auditsStoreName}/loadAuditLogs`, (payload) => ({ payload })),
};

const auditsMetadataState = {
    loading: true,
};
const reducers = {
    setAuditsMetadataState: typeReducerForKey('auditsMetadataState'),
    resetAuditsMetadataState: (state) => (Object.assign(Object.assign({}, state), { auditsMetadataState })),
};
const actions$1 = {
    loadAuditsMetadata: createAction(`${auditsStoreName}/loadAuditsMetadata`),
};

const initialState = {
    auditLogsState,
    auditsMetadataState,
};

const { reducer, actions: sliceActions } = createSlice({
    name: auditsStoreName,
    initialState,
    reducers: Object.assign(Object.assign({ resetState: (state) => (Object.assign(Object.assign({}, state), initialState)), setState: (state, { payload }) => (Object.assign(Object.assign({}, state), payload)) }, reducers$1), reducers),
});
const actions = Object.assign(Object.assign(Object.assign({}, sliceActions), actions$2), actions$1);

const sortMethodBasedOnOrder = (sortBy, desc) => (a, b) => {
    if (a[sortBy] > b[sortBy]) {
        return desc ? -1 : 1;
    }
    if (b[sortBy] > a[sortBy]) {
        return desc ? 1 : -1;
    }
    return 0;
};
const filterAuditsByQuery = (filterOptions) => (log) => filterOptions
    .filter(filterOutTimeFilterForDummyMode)
    .every((filterItem) => log[filterItem.id].includes(filterItem.value));
const filterOutTimeFilterForDummyMode = (filterItem) => filterItem.id !== 'createdAt';
const auditsLogsFilterAndSort = (filterOptions, sortOptions) => {
    const { data } = auditLogsDataDemo;
    let dataByQuery = data.filter(filterAuditsByQuery(filterOptions));
    if (sortOptions.length) {
        const { id, desc = false } = sortOptions[0];
        dataByQuery = dataByQuery.sort(sortMethodBasedOnOrder(id, desc));
    }
    return { data: dataByQuery, total: dataByQuery.length };
};
const randomAction = () => {
    const random = Math.floor(Math.random() * 6);
    switch (random) {
        case 0:
            return {
                action: 'Updated profile',
                description: 'User updated profile details',
                severity: 'Info',
            };
        case 1:
            return {
                action: 'User logged in',
                severity: 'Info',
                description: 'User logged in to the product',
            };
        case 2:
            return {
                action: 'User failed to login',
                severity: 'High',
                description: 'User failed to login with password',
            };
        case 3:
            return {
                action: 'Added user',
                severity: 'Info',
                description: 'Added user david+535@frontegg.com to tenant',
            };
        case 4:
            return {
                action: 'Assigned roles',
                severity: 'Info',
                description: 'Assigned 0 roles for user',
            };
        case 5:
            return {
                action: 'Removed user david+108@frontegg.com from account',
                severity: 'Info',
                description: 'Removed access from the account for user david+108@frontegg.com',
            };
    }
};
const auditLogsDataDemo = {
    total: 20,
    data: Array.from(Array(5).keys()).map((i) => (Object.assign(Object.assign({ ip: '198.143.51.1', user: 'Demo User Name', email: 'demo-user@frontegg.com' }, randomAction()), { json: { key1: 'value1', key2: 'value2', key3: 'value3', key4: 'value4' }, tenantId: 'my-tenant-id', vendorId: 'my-vendor-id', userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36', createdAt: `2022-04-07 10:${50 - i}:40.201` }))),
};
const auditLogsMetadataDemo = {
    properties: [
        {
            showInTable: true,
            name: 'createdAt',
            displayName: 'Time',
            type: 'Timestamp',
            sortable: true,
            filterable: true,
            showInMoreInfo: 'Always',
            chosen: false,
            selected: false,
            isPredefined: false,
        },
        {
            showInTable: true,
            name: 'email',
            displayName: 'User',
            type: 'Email',
            filterable: true,
            sortable: true,
            isPredefined: true,
            chosen: false,
            selected: false,
        },
        {
            showInTable: true,
            name: 'action',
            displayName: 'Action',
            type: 'AlphaNumeric',
            sortable: true,
            filterable: true,
            showInMoreInfo: 'Always',
            chosen: false,
            selected: false,
            isPredefined: true,
        },
        {
            showInTable: true,
            name: 'description',
            type: 'AlphaNumeric',
            sortable: false,
            filterable: false,
            displayName: 'Description',
            isPredefined: true,
            chosen: false,
            selected: false,
        },
        {
            showInTable: true,
            name: 'ip',
            displayName: 'IP Address',
            type: 'IpAddress',
            sortable: true,
            filterable: true,
            showInMoreInfo: 'Always',
            chosen: false,
            selected: false,
            isPredefined: true,
        },
        {
            showInTable: false,
            name: 'severity',
            displayName: 'Severity',
            type: 'Severity',
            sortable: true,
            filterable: true,
            showInMoreInfo: 'Always',
            chosen: false,
            selected: false,
            isPredefined: true,
        },
        {
            showInTable: false,
            name: 'userAgent',
            displayName: 'User Agent',
            type: 'AlphaNumeric',
            filterable: true,
            sortable: true,
            isPredefined: true,
            chosen: false,
            selected: false,
        },
        {
            showInTable: false,
            name: 'json',
            type: 'Json',
            sortable: true,
            filterable: true,
            displayName: 'Json Data',
            showInMoreInfo: 'Always',
            isPredefined: false,
        },
    ],
};

const select = () => select$1((_) => _[auditsStoreName].auditLogsState);
const selectMetadata = () => select$1((_) => _[auditsStoreName].auditsMetadataState);
function* exportAuditsCsv() {
    const state = yield select();
    const { columns } = yield selectMetadata();
    try {
        const filter = state.filter;
        const sort = state.sort;
        const sortParams = sort.reduce((p, n) => (Object.assign(Object.assign({}, p), { sortBy: n.id, sortDirection: n.desc ? 'desc' : 'asc' })), {});
        const filterParams = filter.reduce((p, n) => (Object.assign(Object.assign({}, p), { [n.id]: encodeURIComponent(n.value) })), {});
        yield put(actions.setAuditLogsState({ isDownloadingCsv: true }));
        const outputFileName = `audits.csv`;
        yield api.audits.exportAudits(Object.assign(Object.assign({ endpoint: 'csv/v2', headerProps: columns, offset: 0, outputFileName }, sortParams), filterParams));
    }
    catch (e) {
        console.error('failed to export audits - ', e);
    }
    yield put(actions.setAuditLogsState({ isDownloadingCsv: false }));
}
function* loadAuditLogs({ payload }) {
    var _a, _b, _c, _d, _e, _f;
    yield put(actions.setAuditLogsState({ loading: !(payload === null || payload === void 0 ? void 0 : payload.silentLoading), error: null }));
    const state = yield select();
    const { columns } = yield selectMetadata();
    try {
        const pageSize = (_a = payload.pageSize) !== null && _a !== void 0 ? _a : state.pageSize;
        const pageOffset = (_b = payload.pageOffset) !== null && _b !== void 0 ? _b : state.pageOffset;
        const filter = (_c = payload.filter) !== null && _c !== void 0 ? _c : state.filter;
        const sort = (_d = payload.sort) !== null && _d !== void 0 ? _d : state.sort;
        yield put(actions.setAuditLogsState({
            pageSize,
            pageOffset,
            filter,
            sort,
        }));
        const sortParams = sort.reduce((p, n) => (Object.assign(Object.assign({}, p), { sortBy: n.id, sortDirection: n.desc ? 'desc' : 'asc' })), {});
        const filterParams = filter.reduce((p, n) => (Object.assign(Object.assign({}, p), { [n.id]: n.value })), {});
        if (!columns) {
            yield put(actions.loadAuditsMetadata());
        }
        const { data, total } = yield call(api.audits.getAudits, Object.assign(Object.assign({ offset: pageOffset, count: pageSize }, sortParams), filterParams));
        yield put(actions.setAuditLogsState({
            loading: false,
            logs: data !== null && data !== void 0 ? data : [],
            totalPages: +Math.ceil(total / pageSize),
        }));
        (_e = payload === null || payload === void 0 ? void 0 : payload.callback) === null || _e === void 0 ? void 0 : _e.call(payload, true);
    }
    catch (e) {
        yield put(actions.setAuditLogsState({ loading: false, error: e.message }));
        (_f = payload === null || payload === void 0 ? void 0 : payload.callback) === null || _f === void 0 ? void 0 : _f.call(payload, null, e);
    }
}
function* auditLogsSagas() {
    yield takeEvery(actions.exportAuditsCsv, exportAuditsCsv);
    yield takeEvery(actions.loadAuditLogs, loadAuditLogs);
}
/*********************************
 *  Preview Sagas
 *********************************/
function* loadAuditLogsMock({ payload }) {
    var _a, _b, _c, _d, _e, _f;
    yield put(actions.setAuditLogsState({ loading: !(payload === null || payload === void 0 ? void 0 : payload.silentLoading), error: null }));
    const state = yield select();
    const { columns } = yield selectMetadata();
    try {
        const pageSize = (_a = payload.pageSize) !== null && _a !== void 0 ? _a : state.pageSize;
        const pageOffset = (_b = payload.pageOffset) !== null && _b !== void 0 ? _b : state.pageOffset;
        const filter = (_c = payload.filter) !== null && _c !== void 0 ? _c : state.filter;
        const sort = (_d = payload.sort) !== null && _d !== void 0 ? _d : state.sort;
        yield put(actions.setAuditLogsState({
            pageSize,
            pageOffset,
            filter,
            sort,
        }));
        if (!columns) {
            yield put(actions.loadAuditsMetadata());
        }
        const { data, total } = auditsLogsFilterAndSort(filter, sort);
        yield put(actions.setAuditLogsState({
            loading: false,
            logs: data !== null && data !== void 0 ? data : [],
            totalPages: +Math.ceil(total / pageSize),
        }));
        (_e = payload === null || payload === void 0 ? void 0 : payload.callback) === null || _e === void 0 ? void 0 : _e.call(payload, true);
    }
    catch (e) {
        yield put(actions.setAuditLogsState({ loading: false, error: e.message }));
        (_f = payload === null || payload === void 0 ? void 0 : payload.callback) === null || _f === void 0 ? void 0 : _f.call(payload, null, e);
    }
}
function* auditLogsSagasMock() {
    yield takeEvery(actions.loadAuditLogs, loadAuditLogsMock);
}

function* loadAuditsMetadata() {
    yield put(actions.setAuditsMetadataState({ loading: true, error: null }));
    try {
        const { properties } = yield call(api.metadata.getAuditsMetadata);
        yield put(actions.setAuditsMetadataState({ columns: properties, loading: false }));
    }
    catch (e) {
        yield put(actions.setAuditsMetadataState({ error: e, loading: false }));
    }
}
function* auditsMetadataSagas() {
    yield takeEvery(actions.loadAuditsMetadata, loadAuditsMetadata);
}
/*********************************
 *  Preview Sagas
 *********************************/
function* loadAuditsMetadataMock() {
    yield put(actions.setAuditsMetadataState({ loading: true, error: null }));
    try {
        const { properties } = auditLogsMetadataDemo;
        yield put(actions.setAuditsMetadataState({ columns: properties, loading: false }));
    }
    catch (e) {
        yield put(actions.setAuditsMetadataState({ error: e, loading: false }));
    }
}
function* auditsMetadataSagasMock() {
    yield takeEvery(actions.loadAuditsMetadata, loadAuditsMetadataMock);
}

function* sagas() {
    yield all([call(auditLogsSagas), call(auditsMetadataSagas)]);
}
function* mockSagas() {
    yield all([call(auditLogsSagasMock), call(auditsMetadataSagasMock)]);
}

// export store
var auditsStore = {
    sagas,
    mockSagas,
    storeName: auditsStoreName,
    initialState,
    reducer,
    actions,
};

export { actions$2 as auditLogsActions, reducers$1 as auditLogsReducers, auditLogsState, actions as auditsActions, initialState as auditsInitialState, actions$1 as auditsMetadataActions, reducers as auditsMetadataReducers, auditsMetadataState, mockSagas as auditsMockSagas, reducer as auditsReducers, sagas as auditsSagas, auditsStore as default };

import authStore, { authActions as actions } from '../auth/index.js';
import { createSlice, getDefaultMiddleware, configureStore, combineReducers } from '@reduxjs/toolkit';
export { bindActionCreators, combineReducers, configureStore, createSelector, createSlice, getDefaultMiddleware } from '@reduxjs/toolkit';
import createSagaMiddleware from 'redux-saga';
export { default as createSagaMiddleware } from 'redux-saga';
import { all, call } from 'redux-saga/effects';
export { all, call, delay, put, select, takeEvery, takeLatest } from 'redux-saga/effects';
import { ContextHolder } from '@frontegg/rest-api';
import auditsStore from '../audits/index.js';
import connectivityStore from '../connectivity/index.js';
import subscriptionsStore from '../subscriptions/index.js';
import vendorStore from '../vendor/index.js';
import { s as storeName, i as initialState$1, r as reducer, b as sagas } from '../saga-7a267fe0.js';
import '../constants-4d9682b2.js';
import 'tslib';
import '../saga-b6529ffb.js';
import 'uuid';

const initialState = {
    context: undefined,
};
const { reducer: rootReducer } = createSlice({
    name: 'root',
    initialState,
    reducers: {
        setContext: {
            prepare: (context) => ({ payload: context }),
            reducer: (state, { payload }) => {
                ContextHolder.setContext(payload);
                return Object.assign(Object.assign({}, state), { context: payload });
            },
        },
    },
});
const createFronteggStore = (rootInitialState, storeHolder, previewMode = false, authInitialState, overrideInitialState, builderMode = false) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    const isSSR = typeof window === 'undefined';
    let holder = storeHolder;
    if (isSSR && storeHolder == null) {
        throw Error('createFronteggStore(initState, storeHolder) failed, storeHolder must not be null in Server-Side rendering');
    }
    if (!holder) {
        holder = window;
    }
    if (!holder.store) {
        if (!previewMode && !builderMode) {
            ContextHolder.setContext(rootInitialState.context);
        }
        const sagaMiddleware = createSagaMiddleware();
        const middleware = [
            ...getDefaultMiddleware({ thunk: false, immutableCheck: false, serializableCheck: false }),
            sagaMiddleware,
        ];
        holder.store = configureStore({
            middleware,
            preloadedState: {
                root: Object.assign(Object.assign({}, rootInitialState), { previewMode }),
                [authStore.storeName]: Object.assign(Object.assign(Object.assign(Object.assign({}, authStore.initialState), authInitialState), ((_a = overrideInitialState === null || overrideInitialState === void 0 ? void 0 : overrideInitialState.auth) !== null && _a !== void 0 ? _a : {})), { routes: Object.assign(Object.assign(Object.assign({}, authStore.initialState.routes), ((_b = authInitialState === null || authInitialState === void 0 ? void 0 : authInitialState.routes) !== null && _b !== void 0 ? _b : {})), ((_d = (_c = overrideInitialState === null || overrideInitialState === void 0 ? void 0 : overrideInitialState.auth) === null || _c === void 0 ? void 0 : _c.routes) !== null && _d !== void 0 ? _d : {})) }),
                [auditsStore.storeName]: Object.assign(Object.assign(Object.assign({}, auditsStore.initialState), ((_e = overrideInitialState === null || overrideInitialState === void 0 ? void 0 : overrideInitialState.auditLogs) !== null && _e !== void 0 ? _e : {})), { auditLogsState: Object.assign(Object.assign({}, auditsStore.initialState.auditLogsState), ((_g = (_f = overrideInitialState === null || overrideInitialState === void 0 ? void 0 : overrideInitialState.auditLogs) === null || _f === void 0 ? void 0 : _f.auditLogsState) !== null && _g !== void 0 ? _g : {})), auditsMetadataState: Object.assign(Object.assign({}, auditsStore.initialState.auditsMetadataState), ((_j = (_h = overrideInitialState === null || overrideInitialState === void 0 ? void 0 : overrideInitialState.auditLogs) === null || _h === void 0 ? void 0 : _h.auditsMetadataState) !== null && _j !== void 0 ? _j : {})) }),
                [storeName]: Object.assign(Object.assign({}, initialState$1), ((_k = overrideInitialState === null || overrideInitialState === void 0 ? void 0 : overrideInitialState.audits) !== null && _k !== void 0 ? _k : {})),
                [connectivityStore.storeName]: connectivityStore.initialState,
                [subscriptionsStore.storeName]: subscriptionsStore.initialState,
                [vendorStore.storeName]: vendorStore.initialState,
            },
            reducer: combineReducers({
                root: rootReducer,
                [authStore.storeName]: authStore.reducer,
                [auditsStore.storeName]: auditsStore.reducer,
                [storeName]: reducer,
                [connectivityStore.storeName]: connectivityStore.reducer,
                [subscriptionsStore.storeName]: subscriptionsStore.reducer,
                [vendorStore.storeName]: vendorStore.reducer,
            }),
        });
        const rootSaga = function* () {
            yield all([
                call(authStore.sagas),
                call(auditsStore.sagas),
                call(sagas),
                call(connectivityStore.sagas),
                call(subscriptionsStore.sagas),
                call(vendorStore.sagas),
            ]);
        };
        const rootMockSaga = function* () {
            yield all([call(authStore.mockSagas), call(auditsStore.mockSagas), call(subscriptionsStore.mockSagas)]);
        };
        if (previewMode) {
            holder.store.destroy = sagaMiddleware.run(rootMockSaga).cancel;
            holder.store.dispatch(actions.requestAuthorize(true));
        }
        else {
            holder.store.destroy = sagaMiddleware.run(rootSaga).cancel;
        }
    }
    return holder.store;
};

export { createFronteggStore };

import { reducer, actions } from './reducer';
import { mockSagas, sagas } from './saga';
import { authStoreName as storeName } from '../constants';
import { initialState } from './initialState';
export * from './interfaces';
export * from './LoginState/interfaces';
export * from './LoginState';
export * from './ActivateState/interfaces';
export * from './ActivateState';
export * from './AcceptInvitationState/interfaces';
export * from './AcceptInvitationState';
export * from './ForgotPasswordState/interfaces';
export * from './ForgotPasswordState';
export * from './ResetPhoneNumberState/interfaces';
export * from './ResetPhoneNumberState';
export * from './SSOState/interfaces';
export * from './SSOState';
export * from './MfaState/interfaces';
export * from './MfaState';
export * from './ProfileState/interfaces';
export * from './ProfileState';
export * from './TeamState/interfaces';
export * from './TeamState';
export * from './SocialLogins/interfaces';
export * from './SocialLogins';
export * from './SignUp/interfaces';
export * from './SignUp';
export * from './ApiTokensState/interfaces';
export * from './ApiTokensState';
export * from './SecurityPolicyState/interfaces';
export * from './SecurityPolicyState';
export * from './AccountSettingsState/interfaces';
export * from './AccountSettingsState';
export * from './TenantsState/interfaces';
export * from './TenantsState';
export * from './RolesState/interfaces';
export * from './RolesState';
export * from './SessionsState';
export * from './SessionsState/interfaces';
export * from './SessionsPolicyState';
export * from './SessionsPolicyState/interfaces';
export type { AuthActions } from './reducer';
export { sagas as authSagas, mockSagas as authMockSagas, reducer as authReducers, actions as authActions, initialState as authInitialState, storeName as authStoreName, };
declare const _default: {
    sagas: typeof sagas;
    mockSagas: typeof mockSagas;
    storeName: string;
    initialState: import("./interfaces").AuthState;
    reducer: import("redux").Reducer<import("./interfaces").AuthState, import("redux").AnyAction>;
    actions: {
        loadSessionsPolicy: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        createOrUpdateSessionsPolicy: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<import("@frontegg/rest-api").ISessionConfigurations, boolean>], import("../interfaces").WithCallback<import("@frontegg/rest-api").ISessionConfigurations, boolean>, string, never, never>;
        loadUserSessions: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        loadCurrentUserSession: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        deleteUserSession: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[{
            id: string;
        }], {
            id: string;
        }, string, never, never>;
        deleteAllUserSessions: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        revokeUserSessions: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<{
            userId: string;
        }, boolean>], import("../interfaces").WithCallback<{
            userId: string;
        }, boolean>, string, never, never>;
        loadRolesAndPermissions: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[({
            silentLoading?: boolean | undefined;
        } | undefined)?], {
            silentLoading?: boolean | undefined;
        } | undefined, string, never, never>;
        addRole: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<import("@frontegg/rest-api").IAddRole, import("@frontegg/rest-api").IRole>], import("../interfaces").WithCallback<import("@frontegg/rest-api").IAddRole, import("@frontegg/rest-api").IRole>, string, never, never>;
        updateRole: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<import("@frontegg/rest-api").IUpdateRole, import("@frontegg/rest-api").IRole>], import("../interfaces").WithCallback<import("@frontegg/rest-api").IUpdateRole, import("@frontegg/rest-api").IRole>, string, never, never>;
        deleteRole: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<import("@frontegg/rest-api").IDeleteRole, boolean>], import("../interfaces").WithCallback<import("@frontegg/rest-api").IDeleteRole, boolean>, string, never, never>;
        attachPermissionsToRole: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<import("@frontegg/rest-api").IAttachPermissionsToRole, import("@frontegg/rest-api").IRole>], import("../interfaces").WithCallback<import("@frontegg/rest-api").IAttachPermissionsToRole, import("@frontegg/rest-api").IRole>, string, never, never>;
        attachPermissionToRoles: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<import("@frontegg/rest-api").IAttachPermissionToRoles, import("@frontegg/rest-api").IRolePermission>], import("../interfaces").WithCallback<import("@frontegg/rest-api").IAttachPermissionToRoles, import("@frontegg/rest-api").IRolePermission>, string, never, never>;
        switchTenant: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<import("@frontegg/rest-api").ISwitchTenant, boolean>], import("../interfaces").WithCallback<import("@frontegg/rest-api").ISwitchTenant, boolean>, string, never, never>;
        loadTenants: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[({
            callback?: ((data: import("@frontegg/rest-api").ITenantsResponse[] | null, error?: string | undefined) => void) | undefined;
        } | undefined)?], {
            callback?: ((data: import("@frontegg/rest-api").ITenantsResponse[] | null, error?: string | undefined) => void) | undefined;
        } | undefined, string, never, never>;
        loadSubTenants: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[({
            callback?: ((data: boolean | null, error?: string | undefined) => void) | undefined;
        } | undefined)?], {
            callback?: ((data: boolean | null, error?: string | undefined) => void) | undefined;
        } | undefined, string, never, never>;
        loadSubTenantsTree: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[({
            callback?: ((data: boolean | null, error?: string | undefined) => void) | undefined;
        } | undefined)?], {
            callback?: ((data: boolean | null, error?: string | undefined) => void) | undefined;
        } | undefined, string, never, never>;
        loadAccountSettings: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[(import("../interfaces").WithCallback<{
            silentLoading?: boolean | undefined;
        }, boolean> | undefined)?], import("../interfaces").WithCallback<{
            silentLoading?: boolean | undefined;
        }, boolean> | undefined, string, never, never>;
        saveAccountSettings: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<import("@frontegg/rest-api").ISettingsResponse, import("@frontegg/rest-api").ISettingsResponse>], import("../interfaces").WithCallback<import("@frontegg/rest-api").ISettingsResponse, import("@frontegg/rest-api").ISettingsResponse>, string, never, never>;
        loadSecurityPolicy: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        loadPublicSecurityPolicy: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        loadSecurityPolicyMfa: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        loadSecurityPolicyVendorMfa: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        saveSecurityPolicyMfa: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<import("@frontegg/rest-api").ISaveSecurityPolicyMfa, import("@frontegg/rest-api").ISecurityPolicyMfa>], import("../interfaces").WithCallback<import("@frontegg/rest-api").ISaveSecurityPolicyMfa, import("@frontegg/rest-api").ISecurityPolicyMfa>, string, never, never>;
        loadSecurityPolicyLockout: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        saveSecurityPolicyLockout: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<import("@frontegg/rest-api").ISaveSecurityPolicyLockout, import("@frontegg/rest-api").ISecurityPolicyLockout>], import("../interfaces").WithCallback<import("@frontegg/rest-api").ISaveSecurityPolicyLockout, import("@frontegg/rest-api").ISecurityPolicyLockout>, string, never, never>;
        loadSecurityPolicyCaptcha: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        loadSecurityPolicyPasswordHistory: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        saveSecurityPolicyPasswordHistory: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<import("@frontegg/rest-api").ISaveSecurityPolicyPasswordHistory, import("@frontegg/rest-api").ISecurityPolicyPasswordHistory>], import("../interfaces").WithCallback<import("@frontegg/rest-api").ISaveSecurityPolicyPasswordHistory, import("@frontegg/rest-api").ISecurityPolicyPasswordHistory>, string, never, never>;
        loadVendorPasswordConfig: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        loadPublicAuthStrategiesPolicy: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        loadApiTokens: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[(import("../interfaces").WithSilentLoad<{
            callback?: ((data: boolean | null, error?: string | undefined) => void) | undefined;
        }> | undefined)?], import("../interfaces").WithSilentLoad<{
            callback?: ((data: boolean | null, error?: string | undefined) => void) | undefined;
        }> | undefined, string, never, never>;
        initApiTokensData: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("./ApiTokensState/interfaces").ApiTokenType], import("./ApiTokensState/interfaces").ApiTokenType, string, never, never>;
        addTenantApiToken: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<Pick<import("./ApiTokensState/interfaces").ITenantApiTokensData, "roleIds" | "description">, boolean>], import("../interfaces").WithCallback<Pick<import("./ApiTokensState/interfaces").ITenantApiTokensData, "roleIds" | "description">, boolean>, string, never, never>;
        addUserApiToken: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<Pick<import("./ApiTokensState/interfaces").IApiTokensData, "description">, boolean>], import("../interfaces").WithCallback<Pick<import("./ApiTokensState/interfaces").IApiTokensData, "description">, boolean>, string, never, never>;
        deleteUserApiToken: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[string], string, string, never, never>;
        deleteTenantApiToken: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[string], string, string, never, never>;
        loadUsers: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<import("../interfaces").WithSilentLoad<import("@frontegg/rest-api").ILoadUsers>, import("@frontegg/rest-api").ITeamUser[]>], import("../interfaces").WithCallback<import("../interfaces").WithSilentLoad<import("@frontegg/rest-api").ILoadUsers>, import("@frontegg/rest-api").ITeamUser[]>, string, never, never>;
        loadAllSubTenantsUsers: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<import("../interfaces").WithSilentLoad<Partial<import("@frontegg/rest-api").ILoadAllUsers>>, import("@frontegg/rest-api").ISubTenantUser[]>], import("../interfaces").WithCallback<import("../interfaces").WithSilentLoad<Partial<import("@frontegg/rest-api").ILoadAllUsers>>, import("@frontegg/rest-api").ISubTenantUser[]>, string, never, never>;
        loadRoles: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[({
            callback?: ((data: {
                roles: import("@frontegg/rest-api").ITeamUserRole[];
                permissions: import("@frontegg/rest-api").ITeamUserPermission[];
            } | null, error?: string | undefined) => void) | undefined;
        } | undefined)?], {
            callback?: ((data: {
                roles: import("@frontegg/rest-api").ITeamUserRole[];
                permissions: import("@frontegg/rest-api").ITeamUserPermission[];
            } | null, error?: string | undefined) => void) | undefined;
        } | undefined, string, never, never>;
        addUser: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<import("@frontegg/rest-api").IAddUser, import("@frontegg/rest-api").ITeamUser>], import("../interfaces").WithCallback<import("@frontegg/rest-api").IAddUser, import("@frontegg/rest-api").ITeamUser>, string, never, never>;
        addUserToSubTenants: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<import("@frontegg/rest-api").AddUserToSubTenantsRequest, boolean>], import("../interfaces").WithCallback<import("@frontegg/rest-api").AddUserToSubTenantsRequest, boolean>, string, never, never>;
        updateUser: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<Partial<import("@frontegg/rest-api").ITeamUser>, import("@frontegg/rest-api").ITeamUser>], import("../interfaces").WithCallback<Partial<import("@frontegg/rest-api").ITeamUser>, import("@frontegg/rest-api").ITeamUser>, string, never, never>;
        deleteUser: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<import("@frontegg/rest-api").IDeleteUser, boolean>], import("../interfaces").WithCallback<import("@frontegg/rest-api").IDeleteUser, boolean>, string, never, never>;
        setUserRolesForSubTenants: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<import("@frontegg/rest-api").UpdateUserRolesForSubTenantsRequestDto & {
            userId: string;
        }, boolean>], import("../interfaces").WithCallback<import("@frontegg/rest-api").UpdateUserRolesForSubTenantsRequestDto & {
            userId: string;
        }, boolean>, string, never, never>;
        deleteUserFromSubTenants: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<import("@frontegg/rest-api").RemoveUserFromSubTenantsRequest, boolean>], import("../interfaces").WithCallback<import("@frontegg/rest-api").RemoveUserFromSubTenantsRequest, boolean>, string, never, never>;
        lockUser: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<import("@frontegg/rest-api").IDeleteUser, boolean>], import("../interfaces").WithCallback<import("@frontegg/rest-api").IDeleteUser, boolean>, string, never, never>;
        resendActivationLink: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<import("@frontegg/rest-api").IResendActivationLink, boolean>], import("../interfaces").WithCallback<import("@frontegg/rest-api").IResendActivationLink, boolean>, string, never, never>;
        resendInvitationLink: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<import("@frontegg/rest-api").IResendInvitationLink, boolean>], import("../interfaces").WithCallback<import("@frontegg/rest-api").IResendInvitationLink, boolean>, string, never, never>;
        resendInvitationLinkToAllSubTenants: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<import("@frontegg/rest-api").IResendInvitationLink, boolean>], import("../interfaces").WithCallback<import("@frontegg/rest-api").IResendInvitationLink, boolean>, string, never, never>;
        getInvitationLink: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        createInvitationLink: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<import("@frontegg/rest-api").ICreateOrUpdateInviteUserLink, string>], import("../interfaces").WithCallback<import("@frontegg/rest-api").ICreateOrUpdateInviteUserLink, string>, string, never, never>;
        updateInvitationLink: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<import("@frontegg/rest-api").ICreateOrUpdateInviteUserLink, boolean>], import("../interfaces").WithCallback<import("@frontegg/rest-api").ICreateOrUpdateInviteUserLink, boolean>, string, never, never>;
        deleteInvitationLink: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[({
            callback?: ((data: boolean | null, error?: string | undefined) => void) | undefined;
        } | undefined)?], {
            callback?: ((data: boolean | null, error?: string | undefined) => void) | undefined;
        } | undefined, string, never, never>;
        openAddUserDialog: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[(Pick<import("./TeamState/interfaces").AddUserDialogState, "onClose"> | undefined)?], Pick<import("./TeamState/interfaces").AddUserDialogState, "onClose"> | undefined, string, never, never>;
        closeAddUserDialog: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[any?], any, string, never, never>;
        openDeleteUserDialog: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[(Pick<import("./TeamState/interfaces").DeleteUserDialogState, "email" | "onClose" | "userId"> | undefined)?], Pick<import("./TeamState/interfaces").DeleteUserDialogState, "email" | "onClose" | "userId"> | undefined, string, never, never>;
        closeDeleteUserDialog: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[any?], any, string, never, never>;
        openLockUserDialog: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[(Pick<import("./TeamState/interfaces").DeleteUserDialogState, "email" | "onClose" | "userId"> | undefined)?], Pick<import("./TeamState/interfaces").DeleteUserDialogState, "email" | "onClose" | "userId"> | undefined, string, never, never>;
        closeLockUserDialog: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[any?], any, string, never, never>;
        enrollMfa: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        verifyMfa: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<import("@frontegg/rest-api").IVerifyMfa, string | undefined>], import("../interfaces").WithCallback<import("@frontegg/rest-api").IVerifyMfa, string | undefined>, string, never, never>;
        verifyMfaAfterForce: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<import("@frontegg/rest-api").ILoginWithMfa, string | undefined>], import("../interfaces").WithCallback<import("@frontegg/rest-api").ILoginWithMfa, string | undefined>, string, never, never>;
        disableMfa: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<import("@frontegg/rest-api").IDisableMfa, boolean>], import("../interfaces").WithCallback<import("@frontegg/rest-api").IDisableMfa, boolean>, string, never, never>;
        loadSSOConfigurationsV2: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        saveSSOConfigurationV2: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<Partial<Pick<import("@frontegg/rest-api/auth/interfaces").ISSOConfiguration, "roleIds" | "enabled" | "generatedVerification" | "ssoEndpoint" | "publicCertificate" | "signRequest" | "acsUrl" | "spEntityId" | "oidcClientId" | "oidcSecret" | "type" | "groups">>, import("@frontegg/rest-api/auth/interfaces").ISSOConfiguration>], import("../interfaces").WithCallback<Partial<Pick<import("@frontegg/rest-api/auth/interfaces").ISSOConfiguration, "roleIds" | "enabled" | "generatedVerification" | "ssoEndpoint" | "publicCertificate" | "signRequest" | "acsUrl" | "spEntityId" | "oidcClientId" | "oidcSecret" | "type" | "groups">>, import("@frontegg/rest-api/auth/interfaces").ISSOConfiguration>, string, never, never>;
        updateSSOConfiguration: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<Partial<Pick<import("@frontegg/rest-api/auth/interfaces").ISSOConfiguration, "roleIds" | "enabled" | "generatedVerification" | "ssoEndpoint" | "publicCertificate" | "signRequest" | "acsUrl" | "spEntityId" | "oidcClientId" | "oidcSecret" | "type" | "groups">> & {
            ssoConfigId: string;
        }, import("@frontegg/rest-api/auth/interfaces").ISSOConfiguration>], import("../interfaces").WithCallback<Partial<Pick<import("@frontegg/rest-api/auth/interfaces").ISSOConfiguration, "roleIds" | "enabled" | "generatedVerification" | "ssoEndpoint" | "publicCertificate" | "signRequest" | "acsUrl" | "spEntityId" | "oidcClientId" | "oidcSecret" | "type" | "groups">> & {
            ssoConfigId: string;
        }, import("@frontegg/rest-api/auth/interfaces").ISSOConfiguration>, string, never, never>;
        deleteSSOConfiguration: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<{
            ssoConfigId: string;
        }, boolean>], import("../interfaces").WithCallback<{
            ssoConfigId: string;
        }, boolean>, string, never, never>;
        saveSSODomain: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<import("@frontegg/rest-api").ICreateSSODomain & {
            ssoConfigId: string;
        }, import("@frontegg/rest-api/auth/interfaces").ISSODomain>], import("../interfaces").WithCallback<import("@frontegg/rest-api").ICreateSSODomain & {
            ssoConfigId: string;
        }, import("@frontegg/rest-api/auth/interfaces").ISSODomain>, string, never, never>;
        deleteSSODomain: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<{
            domainId: string;
            ssoConfigId: string;
        }, boolean>], import("../interfaces").WithCallback<{
            domainId: string;
            ssoConfigId: string;
        }, boolean>, string, never, never>;
        validateSSODomainV2: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<{
            domainId: string;
            ssoConfigId: string;
        }, boolean>], import("../interfaces").WithCallback<{
            domainId: string;
            ssoConfigId: string;
        }, boolean>, string, never, never>;
        setSSODefaultRoles: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<{
            roleIds: string[];
            ssoConfigId: string;
        }, boolean>], import("../interfaces").WithCallback<{
            roleIds: string[];
            ssoConfigId: string;
        }, boolean>, string, never, never>;
        setSSOGroups: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<{
            ssoConfigId: string;
            groupsToAdd: import("@frontegg/rest-api").ICreateSamlGroup[];
            groupsToDelete: string[];
        }, boolean>], import("../interfaces").WithCallback<{
            ssoConfigId: string;
            groupsToAdd: import("@frontegg/rest-api").ICreateSamlGroup[];
            groupsToDelete: string[];
        }, boolean>, string, never, never>;
        updateSSOGroups: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<{
            ssoConfigId: string;
            changedGroups: import("@frontegg/rest-api").IUpdateSamlGroup[];
        }, boolean>], import("../interfaces").WithCallback<{
            ssoConfigId: string;
            changedGroups: import("@frontegg/rest-api").IUpdateSamlGroup[];
        }, boolean>, string, never, never>;
        saveSSOConfigurationByMetadata: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<{
            configFile: File;
        }, import("@frontegg/rest-api/auth/interfaces").ISSOConfiguration>], import("../interfaces").WithCallback<{
            configFile: File;
        }, import("@frontegg/rest-api/auth/interfaces").ISSOConfiguration>, string, never, never>;
        updateSSOConfigurationByMetadata: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<{
            configFile: File;
            ssoConfigId: string;
        }, import("@frontegg/rest-api/auth/interfaces").ISSOConfiguration>], import("../interfaces").WithCallback<{
            configFile: File;
            ssoConfigId: string;
        }, import("@frontegg/rest-api/auth/interfaces").ISSOConfiguration>, string, never, never>;
        loadSSOConfigurations: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        loadSSOAuthorizationRoles: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        saveSSOConfigurations: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<Partial<Pick<import("@frontegg/rest-api").ISamlConfiguration, "enabled" | "domain" | "ssoEndpoint" | "publicCertificate" | "signRequest" | "acsUrl" | "spEntityId" | "isSamlActive" | "oidcClientId" | "oidcSecret" | "type"> & {
            samlVendor: import("./SSOState/interfaces").SamlVendors;
        }>, boolean>], import("../interfaces").WithCallback<Partial<Pick<import("@frontegg/rest-api").ISamlConfiguration, "enabled" | "domain" | "ssoEndpoint" | "publicCertificate" | "signRequest" | "acsUrl" | "spEntityId" | "isSamlActive" | "oidcClientId" | "oidcSecret" | "type"> & {
            samlVendor: import("./SSOState/interfaces").SamlVendors;
        }>, boolean>, string, never, never>;
        saveSSOConfigurationsFile: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[File[]], File[], string, never, never>;
        saveSSOConfigurationsFileWithCallback: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<{
            configFile: File;
        }, boolean>], import("../interfaces").WithCallback<{
            configFile: File;
        }, boolean>, string, never, never>;
        validateSSODomain: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[({
            callback?: ((data: boolean | null, error?: string | undefined) => void) | undefined;
        } | undefined)?], {
            callback?: ((data: boolean | null, error?: string | undefined) => void) | undefined;
        } | undefined, string, never, never>;
        updateSSOAuthorizationRoles: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<{
            authorizationRoles: string[];
            groups?: import("@frontegg/rest-api").ISamlRolesGroup[] | undefined;
        }, boolean>], import("../interfaces").WithCallback<{
            authorizationRoles: string[];
            groups?: import("@frontegg/rest-api").ISamlRolesGroup[] | undefined;
        }, boolean>, string, never, never>;
        deleteSamlGroup: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<{
            id: string;
        }, boolean>], import("../interfaces").WithCallback<{
            id: string;
        }, boolean>, string, never, never>;
        createSamlGroup: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<import("@frontegg/rest-api").ICreateSamlGroup, boolean>], import("../interfaces").WithCallback<import("@frontegg/rest-api").ICreateSamlGroup, boolean>, string, never, never>;
        oidcPostlogin: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("@frontegg/rest-api").IOidcPostLogin], import("@frontegg/rest-api").IOidcPostLogin, string, never, never>;
        loadProfile: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        saveProfile: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("../interfaces").WithCallback<import("@frontegg/rest-api").IUserProfile, import("@frontegg/rest-api").IUserProfile>>], Partial<import("../interfaces").WithCallback<import("@frontegg/rest-api").IUserProfile, import("@frontegg/rest-api").IUserProfile>>, string, never, never>;
        changePassword: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<import("@frontegg/rest-api").IChangePassword, boolean>], import("../interfaces").WithCallback<import("@frontegg/rest-api").IChangePassword, boolean>, string, never, never>;
        signUpUser: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("./SignUp/interfaces").ISignUpUserPayload], import("./SignUp/interfaces").ISignUpUserPayload, string, never, never>;
        resetSignUpStateSoft: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        resetPhoneNumber: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<import("@frontegg/rest-api").IResetPhoneNumber, boolean>], import("../interfaces").WithCallback<import("@frontegg/rest-api").IResetPhoneNumber, boolean>, string, never, never>;
        verifyResetPhoneNumber: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<import("@frontegg/rest-api").IVerifyResetPhoneNumber, boolean>], import("../interfaces").WithCallback<import("@frontegg/rest-api").IVerifyResetPhoneNumber, boolean>, string, never, never>;
        changePhoneNumber: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<import("@frontegg/rest-api").IChangePhoneNumber & {
            recaptchaToken: string;
            email: string;
        }, boolean>], import("../interfaces").WithCallback<import("@frontegg/rest-api").IChangePhoneNumber & {
            recaptchaToken: string;
            email: string;
        }, boolean>, string, never, never>;
        forgotPassword: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("@frontegg/rest-api").IForgotPassword], import("@frontegg/rest-api").IForgotPassword, string, never, never>;
        resetPassword: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<import("@frontegg/rest-api").IResetPassword, boolean>], import("../interfaces").WithCallback<import("@frontegg/rest-api").IResetPassword, boolean>, string, never, never>;
        loadPasswordConfig: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[(import("@frontegg/rest-api").IGetUserPasswordConfig | undefined)?], import("@frontegg/rest-api").IGetUserPasswordConfig | undefined, string, never, never>;
        acceptInvitation: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("@frontegg/rest-api").IAcceptInvitation], import("@frontegg/rest-api").IAcceptInvitation, string, never, never>;
        activateAccount: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<import("./ActivateState/interfaces").IActivateAccountPayload, boolean>], import("../interfaces").WithCallback<import("./ActivateState/interfaces").IActivateAccountPayload, boolean>, string, never, never>;
        preActivateAccount: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("./ActivateState/interfaces").IPreActivateAccount], import("./ActivateState/interfaces").IPreActivateAccount, string, never, never>;
        getActivateAccountStrategy: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<import("@frontegg/rest-api").IGetActivateAccountStrategy, import("@frontegg/rest-api").IGetActivateAccountStrategyResponse>], import("../interfaces").WithCallback<import("@frontegg/rest-api").IGetActivateAccountStrategy, import("@frontegg/rest-api").IGetActivateAccountStrategyResponse>, string, never, never>;
        resendActivationEmail: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("@frontegg/rest-api").IResendActivationEmail], import("@frontegg/rest-api").IResendActivationEmail, string, never, never>;
        loadSocialLoginsConfiguration: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        loadSocialLoginsConfigurationV2: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        loginViaSocialLogin: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("./SocialLogins/interfaces").ILoginViaSocialLoginPayload], import("./SocialLogins/interfaces").ILoginViaSocialLoginPayload, string, never, never>;
        setSocialLoginError: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("@frontegg/rest-api").ISetSocialLoginError], import("@frontegg/rest-api").ISetSocialLoginError, string, never, never>;
        requestAuthorize: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[(boolean | undefined)?], boolean, string, never, never>;
        requestAuthorizeSSR: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[string], string, string, never, never>;
        requestHostedLoginAuthorize: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        handleHostedLoginCallback: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("./LoginState/interfaces").HostedLoginCallback], import("./LoginState/interfaces").HostedLoginCallback, string, never, never>;
        afterAuthNavigation: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        preLogin: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<import("@frontegg/rest-api").IPreLogin & {
            recaptchaToken?: string | undefined;
            invitationToken?: string | undefined;
        }, void>], import("../interfaces").WithCallback<import("@frontegg/rest-api").IPreLogin & {
            recaptchaToken?: string | undefined;
            invitationToken?: string | undefined;
        }, void>, string, never, never>;
        postLogin: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("@frontegg/rest-api").IPostLogin], import("@frontegg/rest-api").IPostLogin, string, never, never>;
        login: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<import("@frontegg/rest-api").ILogin, boolean>], import("../interfaces").WithCallback<import("@frontegg/rest-api").ILogin, boolean>, string, never, never>;
        loginWithMfa: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<import("@frontegg/rest-api").ILoginWithMfa, boolean>], import("../interfaces").WithCallback<import("@frontegg/rest-api").ILoginWithMfa, boolean>, string, never, never>;
        recoverMfa: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("@frontegg/rest-api").IRecoverMFAToken], import("@frontegg/rest-api").IRecoverMFAToken, string, never, never>;
        logout: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[((() => void) | undefined)?], (() => void) | undefined, string, never, never>;
        silentLogout: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[((() => void) | undefined)?], (() => void) | undefined, string, never, never>;
        checkIfAllowToRememberMfaDevice: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[{
            mfaToken: string;
        }], {
            mfaToken: string;
        }, string, never, never>;
        changePhoneNumberWithVerification: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<import("@frontegg/rest-api").IChangePhoneNumberWithVerification, boolean>], import("../interfaces").WithCallback<import("@frontegg/rest-api").IChangePhoneNumberWithVerification, boolean>, string, never, never>;
        verifyChangePhoneNumber: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<import("@frontegg/rest-api").IVerifyChangePhoneNumber, boolean>], import("../interfaces").WithCallback<import("@frontegg/rest-api").IVerifyChangePhoneNumber, boolean>, string, never, never>;
        quickSmsPasswordlessPreLogin: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<import("./LoginState/interfaces").IQuickSmsPasswordlessPreLoginPayload, boolean>], import("../interfaces").WithCallback<import("./LoginState/interfaces").IQuickSmsPasswordlessPreLoginPayload, boolean>, string, never, never>;
        passwordlessPreLogin: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<import("@frontegg/rest-api").IPasswordlessPreLogin, void>], import("../interfaces").WithCallback<import("@frontegg/rest-api").IPasswordlessPreLogin, void>, string, never, never>;
        passwordlessPostLogin: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<import("./LoginState/interfaces").IPasswordlessPostLoginPayload, boolean>], import("../interfaces").WithCallback<import("./LoginState/interfaces").IPasswordlessPostLoginPayload, boolean>, string, never, never>;
        verifyInviteToken: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("@frontegg/rest-api").IVerifyInviteToken], import("@frontegg/rest-api").IVerifyInviteToken, string, never, never>;
        webAuthnPrelogin: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithCallback<import("@frontegg/rest-api").IWebAuthnPreLogin, import("@frontegg/rest-api").IWebAuthnPreLoginResponse | null>], import("../interfaces").WithCallback<import("@frontegg/rest-api").IWebAuthnPreLogin, import("@frontegg/rest-api").IWebAuthnPreLoginResponse | null>, string, never, never>;
        webAuthnPostLogin: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("./LoginState/interfaces").IWebAuthnPostLoginPayload], import("./LoginState/interfaces").IWebAuthnPostLoginPayload, string, never, never>;
        webAuthnCreateNewDeviceSession: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[{
            callback?: ((data: import("@frontegg/rest-api").ICreateNewDeviceSessionResponse | null, error?: string | undefined) => void) | undefined;
        }], {
            callback?: ((data: import("@frontegg/rest-api").ICreateNewDeviceSessionResponse | null, error?: string | undefined) => void) | undefined;
        }, string, never, never>;
        webAuthnVerifyNewDeviceSession: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("./LoginState/interfaces").IVerifyNewWebAuthnDevicePayload], import("./LoginState/interfaces").IVerifyNewWebAuthnDevicePayload, string, never, never>;
        setSessionsPolicyState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("./SessionsPolicyState/interfaces").SessionsPolicyState>], Partial<import("./SessionsPolicyState/interfaces").SessionsPolicyState>, string, never, never>;
        resetSessionsPolicyState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        setSessionsState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("./SessionsState/interfaces").SessionsState>], Partial<import("./SessionsState/interfaces").SessionsState>, string, never, never>;
        resetSessionsState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        setRolesState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("./RolesState/interfaces").RolesState>], Partial<import("./RolesState/interfaces").RolesState>, string, never, never>;
        resetRolesState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        setTenantsState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("./TenantsState/interfaces").TenantsState>], Partial<import("./TenantsState/interfaces").TenantsState>, string, never, never>;
        resetTenantsState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        setAccountSettingsState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("./AccountSettingsState/interfaces").AccountSettingsState>], Partial<import("./AccountSettingsState/interfaces").AccountSettingsState>, string, never, never>;
        resetAccountSettingsState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        setSecurityPolicyState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("./SecurityPolicyState/interfaces").SecurityPolicyState>], Partial<import("./SecurityPolicyState/interfaces").SecurityPolicyState>, string, never, never>;
        setSecurityPolicyGlobalState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("../interfaces").WithStatus & {
            policy?: import("@frontegg/rest-api").ISecurityPolicy | undefined;
        }>], Partial<import("../interfaces").WithStatus & {
            policy?: import("@frontegg/rest-api").ISecurityPolicy | undefined;
        }>, string, never, never>;
        setSecurityPolicyPublicState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("../interfaces").WithStatus & {
            policy?: import("@frontegg/rest-api").IVendorConfig | undefined;
        }>], Partial<import("../interfaces").WithStatus & {
            policy?: import("@frontegg/rest-api").IVendorConfig | undefined;
        }>, string, never, never>;
        setSecurityPolicyAuthStrategyPublicState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("../interfaces").WithStatus & {
            policy?: import("@frontegg/rest-api").IAuthStrategiesConfig | undefined;
        }>], Partial<import("../interfaces").WithStatus & {
            policy?: import("@frontegg/rest-api").IAuthStrategiesConfig | undefined;
        }>, string, never, never>;
        setSecurityPolicyMfaState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("../interfaces").WithStatus & {
            policy?: import("@frontegg/rest-api").ISecurityPolicyMfa | undefined;
        }>], Partial<import("../interfaces").WithStatus & {
            policy?: import("@frontegg/rest-api").ISecurityPolicyMfa | undefined;
        }>, string, never, never>;
        setSecurityPolicyVendorMfaState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("../interfaces").WithStatus & {
            policy?: import("@frontegg/rest-api").ISecurityPolicyMfa | undefined;
        }>], Partial<import("../interfaces").WithStatus & {
            policy?: import("@frontegg/rest-api").ISecurityPolicyMfa | undefined;
        }>, string, never, never>;
        setSecurityPolicyLockoutState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("../interfaces").WithStatus & {
            policy?: import("@frontegg/rest-api").ISecurityPolicyLockout | undefined;
        }>], Partial<import("../interfaces").WithStatus & {
            policy?: import("@frontegg/rest-api").ISecurityPolicyLockout | undefined;
        }>, string, never, never>;
        setSecurityPolicyCaptchaState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("../interfaces").WithStatus & {
            policy?: import("@frontegg/rest-api").ISecurityPolicyCaptcha | undefined;
        }>], Partial<import("../interfaces").WithStatus & {
            policy?: import("@frontegg/rest-api").ISecurityPolicyCaptcha | undefined;
        }>, string, never, never>;
        setSecurityPolicyPasswordHistoryState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("../interfaces").WithStatus & {
            policy?: import("@frontegg/rest-api").ISecurityPolicyPasswordHistory | undefined;
        }>], Partial<import("../interfaces").WithStatus & {
            policy?: import("@frontegg/rest-api").ISecurityPolicyPasswordHistory | undefined;
        }>, string, never, never>;
        setSecurityPolicyPasswordState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("../interfaces").WithStatus & {
            policy?: Partial<import("@frontegg/rest-api").TestConfig> | undefined;
        }>], Partial<import("../interfaces").WithStatus & {
            policy?: Partial<import("@frontegg/rest-api").TestConfig> | undefined;
        }>, string, never, never>;
        resetSecurityPolicyState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        setApiTokensLoader: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("./ApiTokensState/interfaces").ApiStateIndicator], import("./ApiTokensState/interfaces").ApiStateIndicator, string, never, never>;
        setApiTokensError: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("./ApiTokensState/interfaces").ApiStateIndicator], import("./ApiTokensState/interfaces").ApiStateIndicator, string, never, never>;
        setApiTokensState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("./ApiTokensState/interfaces").ApiTokensState>], Partial<import("./ApiTokensState/interfaces").ApiTokensState>, string, never, never>;
        resetApiTokensState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        setTeamLoader: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("./TeamState/interfaces").TeamStateIndicator], import("./TeamState/interfaces").TeamStateIndicator, string, never, never>;
        setTeamError: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("./TeamState/interfaces").TeamStateIndicator], import("./TeamState/interfaces").TeamStateIndicator, string, never, never>;
        setTeamState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("./TeamState/interfaces").TeamState>], Partial<import("./TeamState/interfaces").TeamState>, string, never, never>;
        resetTeamState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        setMfaState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("./MfaState/interfaces").MFAState>], Partial<import("./MfaState/interfaces").MFAState>, string, never, never>;
        resetMfaState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        setSSOLoader: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("./SSOState/interfaces").SSOStateIndicator], import("./SSOState/interfaces").SSOStateIndicator, string, never, never>;
        setSSOError: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("./SSOState/interfaces").SSOStateIndicator], import("./SSOState/interfaces").SSOStateIndicator, string, never, never>;
        setSSOState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("./SSOState/interfaces").SSOState>], Partial<import("./SSOState/interfaces").SSOState>, string, never, never>;
        resetSSOState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        setProfileState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("./ProfileState/interfaces").ProfileState>], Partial<import("./ProfileState/interfaces").ProfileState>, string, never, never>;
        resetProfileState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        setSignUpState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("./SignUp/interfaces").SignUpState>], Partial<import("./SignUp/interfaces").SignUpState>, string, never, never>;
        resetSignUpState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        setResetPhoneNumberState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("./ResetPhoneNumberState/interfaces").ResetPhoneNumberState>], Partial<import("./ResetPhoneNumberState/interfaces").ResetPhoneNumberState>, string, never, never>;
        resetResetPhoneNumberState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        setForgotPasswordState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("./ForgotPasswordState/interfaces").ForgotPasswordState>], Partial<import("./ForgotPasswordState/interfaces").ForgotPasswordState>, string, never, never>;
        resetForgotPasswordState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        setAcceptInvitationState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("./AcceptInvitationState/interfaces").AcceptInvitationState>], Partial<import("./AcceptInvitationState/interfaces").AcceptInvitationState>, string, never, never>;
        resetAcceptInvitationState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        setActivateState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("./ActivateState/interfaces").ActivateAccountState>], Partial<import("./ActivateState/interfaces").ActivateAccountState>, string, never, never>;
        resetActivateState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        setActivateStrategyState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("./ActivateState/interfaces").ActivateAccountStrategyState>], Partial<import("./ActivateState/interfaces").ActivateAccountStrategyState>, string, never, never>;
        setSocialLoginsState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("./SocialLogins/interfaces").SocialLoginState>], Partial<import("./SocialLogins/interfaces").SocialLoginState>, string, never, never>;
        resetSocialLoginsState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        setLoginState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("./LoginState/interfaces").LoginState>], Partial<import("./LoginState/interfaces").LoginState>, string, never, never>;
        resetLoginState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        resetState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        setState: import("@reduxjs/toolkit").ActionCreatorWithPayload<Partial<import("./interfaces").AuthState>, string>;
        setUser: import("@reduxjs/toolkit").ActionCreatorWithPayload<import("./interfaces").User, string>;
    };
};
export default _default;

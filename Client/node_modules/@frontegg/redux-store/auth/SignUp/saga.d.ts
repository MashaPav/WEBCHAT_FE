import { PayloadAction } from '@reduxjs/toolkit';
import { IVendorConfig } from '@frontegg/rest-api';
import { ISignUpUserPayload } from './interfaces';
export declare function loadAllowSignUps(): Generator<import("redux-saga/effects").PutEffect<{
    payload: Partial<import("./interfaces").SignUpState>;
    type: string;
}> | import("redux-saga/effects").CallEffect<IVendorConfig> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("../../interfaces").WithStatus & {
        policy?: IVendorConfig | undefined;
    }>;
    type: string;
}>, void, IVendorConfig>;
export declare function signUpUser({ payload: { events, url, ...payload } }: PayloadAction<ISignUpUserPayload>): Generator<import("redux-saga/effects").PutEffect<{
    payload: Partial<import("./interfaces").SignUpState>;
    type: string;
}> | import("redux-saga/effects").SelectEffect | import("redux-saga/effects").CallEffect<import("@frontegg/rest-api").ISignUpResponse> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("../MfaState/interfaces").MFAState>;
    type: string;
}> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("../LoginState/interfaces").LoginState>;
    type: string;
}> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("../interfaces").AuthState>;
    type: string;
}> | import("redux-saga/effects").PutEffect<{
    payload: {
        callback?: ((data: import("@frontegg/rest-api").ITenantsResponse[] | null, error?: string | undefined) => void) | undefined;
    } | undefined;
    type: string;
}>, void, {
    routes: any;
    onRedirectTo: any;
} & {
    shouldActivate: any;
    user: any;
    tenantId: any;
    userId: any;
}>;
export declare function resetSignUpStateSoft(): Generator<import("redux-saga/effects").PutEffect<{
    payload: Partial<import("./interfaces").SignUpState>;
    type: string;
}> | import("redux-saga/effects").SelectEffect | import("redux-saga/effects").PutEffect<{
    payload: undefined;
    type: string;
}>, void, {
    allowSignUps: any;
    allowNotVerifiedUsersLogin: any;
}>;
export declare function signUpSaga(): Generator<import("redux-saga/effects").ForkEffect<never>, void, unknown>;

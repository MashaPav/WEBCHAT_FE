import { CallEffect } from 'redux-saga/effects';
import { IAllowedToRememberMfaDevice, ILoginResponse, ILoginResponseV2, ISamlMetadata } from '@frontegg/rest-api';
import { AuthState } from '../interfaces';
import { LoginFlow, LoginStep, QuickLoginStrategy } from './interfaces';
export declare function afterAuthNavigation(): Generator<import("redux-saga/effects").SelectEffect | CallEffect<true>, void, {
    routes: any;
    includeQueryParam: any;
}>;
export declare function refreshMetadata(): Generator<CallEffect<ISamlMetadata> | import("redux-saga/effects").PutEffect<{
    payload: Partial<AuthState>;
    type: string;
}>, void, ISamlMetadata & {
    isActive: boolean;
}>;
export declare function loadSSOPublicConfigurationFunction(): Generator<import("redux-saga/effects").PutEffect<{
    payload: Partial<AuthState>;
    type: string;
}> | CallEffect<import("@frontegg/rest-api").ISSOPublicConfiguration>, void, {
    isActive: any;
}>;
export declare const isMfaRequired: (user: ILoginResponse) => boolean;
export declare function getMfaRequiredState(user: any): Generator<import("redux-saga/effects").SelectEffect | CallEffect<IAllowedToRememberMfaDevice>, {
    loginState: {
        mfaToken: any;
        mfaRequired: any;
        loading: boolean;
        error: undefined;
        step: LoginStep.loginWithTwoFactor | LoginStep.forceTwoFactor;
        tenantsLoading: boolean;
        email: any;
        tenants: never[];
        allowRememberMfaDevice: any;
        mfaDeviceExpiration: any;
        flow: LoginFlow;
        ssoRedirectUrl?: string | undefined;
        inviteTokenTenantName?: string | undefined;
        inviteTokenError?: string | undefined;
        isNewUser?: boolean | undefined;
        phoneNumber?: string | undefined;
        quickLoginToRegister?: QuickLoginStrategy | undefined;
        changePhoneId?: string | undefined;
    };
    user: undefined;
    isAuthenticated: boolean;
}, AuthState & {
    isAllowedToRemember: any;
    mfaDeviceExpiration: any;
}>;
export declare function refreshToken(): Generator<import("redux-saga/effects").SelectEffect | CallEffect<void> | CallEffect<Generator<import("redux-saga/effects").SelectEffect | Generator<import("redux-saga/effects").SelectEffect | CallEffect<true>, void, {
    routes: any;
    includeQueryParam: any;
}> | import("redux-saga/effects").PutEffect<{
    payload: Partial<AuthState>;
    type: string;
}> | Generator<import("redux-saga/effects").SelectEffect | CallEffect<IAllowedToRememberMfaDevice>, {
    loginState: {
        mfaToken: any;
        mfaRequired: any;
        loading: boolean;
        error: undefined;
        step: LoginStep.loginWithTwoFactor | LoginStep.forceTwoFactor;
        tenantsLoading: boolean;
        email: any;
        tenants: never[];
        allowRememberMfaDevice: any;
        mfaDeviceExpiration: any;
        flow: LoginFlow;
        ssoRedirectUrl?: string | undefined;
        inviteTokenTenantName?: string | undefined;
        inviteTokenError?: string | undefined;
        isNewUser?: boolean | undefined;
        phoneNumber?: string | undefined;
        quickLoginToRegister?: QuickLoginStrategy | undefined;
        changePhoneId?: string | undefined;
    };
    user: undefined;
    isAuthenticated: boolean;
}, AuthState & {
    isAllowedToRemember: any;
    mfaDeviceExpiration: any;
}> | CallEffect<ILoginResponseV2> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("../..").TenantsState>;
    type: string;
}>, void, AuthState & ILoginResponseV2 & Partial<AuthState>>>, void, AuthState>;
export declare function loginSagas(): Generator<import("redux-saga/effects").ForkEffect<never>, void, unknown>;
export declare function loginSagasMock(): Generator<import("redux-saga/effects").ForkEffect<never>, void, unknown>;

import { IDisableMfa, ILoginWithMfa, IVerifyMfa } from '@frontegg/rest-api';
import { MFAState } from './interfaces';
import { WithCallback } from '../../interfaces';
declare const mfaState: MFAState;
declare const reducers: {
    setMfaState: {
        prepare: (payload: Partial<MFAState>) => {
            payload: Partial<MFAState>;
        };
        reducer: (state: import("..").AuthState, { payload }: {
            payload: Partial<MFAState>;
            type: string;
        }) => {
            onRedirectTo: (path: string, opts?: import("@frontegg/rest-api").RedirectOptions | undefined) => void;
            error?: any;
            isAuthenticated: boolean;
            isLoading: boolean;
            keepSessionAlive?: boolean | undefined;
            user?: import("..").User | null | undefined;
            isSSOAuth: boolean;
            ssoACS?: string | undefined;
            loginState: import("..").LoginState;
            activateState: import("..").ActivateAccountState;
            acceptInvitationState: import("..").AcceptInvitationState;
            forgotPasswordState: import("..").ForgotPasswordState;
            resetPhoneNumberState: import("..").ResetPhoneNumberState;
            ssoState: import("..").SSOState;
            profileState: import("..").ProfileState;
            mfaState: MFAState;
            teamState: import("..").TeamState;
            socialLoginState: import("..").SocialLoginState;
            signUpState: import("..").SignUpState;
            apiTokensState: import("..").ApiTokensState;
            securityPolicyState: import("..").SecurityPolicyState;
            accountSettingsState: import("..").AccountSettingsState;
            tenantsState: import("..").TenantsState;
            rolesState: import("..").RolesState;
            sessionsState: import("..").SessionsState;
            hostedLoginBox?: boolean | undefined;
            sessionsPolicyState: import("..").SessionsPolicyState;
            routes: import("..").AuthPageRoutes;
            header?: any;
            loaderComponent?: any;
        };
    };
    resetMfaState: (state: import("..").AuthState) => {
        onRedirectTo: (path: string, opts?: import("@frontegg/rest-api").RedirectOptions | undefined) => void;
        error?: any;
        isAuthenticated: boolean;
        isLoading: boolean;
        keepSessionAlive?: boolean | undefined;
        user?: import("..").User | null | undefined;
        isSSOAuth: boolean;
        ssoACS?: string | undefined;
        loginState: import("..").LoginState;
        activateState: import("..").ActivateAccountState;
        acceptInvitationState: import("..").AcceptInvitationState;
        forgotPasswordState: import("..").ForgotPasswordState;
        resetPhoneNumberState: import("..").ResetPhoneNumberState;
        ssoState: import("..").SSOState;
        profileState: import("..").ProfileState;
        mfaState: MFAState;
        teamState: import("..").TeamState;
        socialLoginState: import("..").SocialLoginState;
        signUpState: import("..").SignUpState;
        apiTokensState: import("..").ApiTokensState;
        securityPolicyState: import("..").SecurityPolicyState;
        accountSettingsState: import("..").AccountSettingsState;
        tenantsState: import("..").TenantsState;
        rolesState: import("..").RolesState;
        sessionsState: import("..").SessionsState;
        hostedLoginBox?: boolean | undefined;
        sessionsPolicyState: import("..").SessionsPolicyState;
        routes: import("..").AuthPageRoutes;
        header?: any;
        loaderComponent?: any;
    };
};
declare const actions: {
    enrollMfa: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    verifyMfa: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<IVerifyMfa, string | undefined>], WithCallback<IVerifyMfa, string | undefined>, string, never, never>;
    verifyMfaAfterForce: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<ILoginWithMfa, string | undefined>], WithCallback<ILoginWithMfa, string | undefined>, string, never, never>;
    disableMfa: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<IDisableMfa, boolean>], WithCallback<IDisableMfa, boolean>, string, never, never>;
};
/**
 *  To be used for actions types after dispatch, and should contains
 *  the reducers and actions as standalone function
 */
declare type DispatchedActions = {
    setMfaState: (state: Partial<MFAState>) => void;
    resetMfaState: () => void;
    enrollMfa: () => void;
    verifyMfa: (payload: WithCallback<IVerifyMfa, string | undefined>) => void;
    verifyMfaAfterForce: (payload: WithCallback<ILoginWithMfa, string | undefined>) => void;
    disableMfa: (payload: WithCallback<IDisableMfa>) => void;
};
export declare type MfaActions = DispatchedActions;
export { mfaState, reducers as mfaReducers, actions as mfaActions };

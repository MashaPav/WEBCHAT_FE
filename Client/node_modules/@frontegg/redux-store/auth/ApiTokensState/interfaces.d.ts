import { ITeamUserPermission, ITeamUserRole } from '@frontegg/rest-api';
import { LoaderIndicatorState, WithCallback } from '../../interfaces';
export interface ApiTokensState {
    loaders: LoaderIndicatorState<ApiStateKeys>;
    searchValue: string;
    apiTokensDataTenant: ITenantApiTokensData[];
    apiTokensDataUser: IApiTokensData[];
    showAddTokenDialog: boolean;
    createdByUserIdColumn?: createdByUserIdColumn;
    deleteTokenDialog: {
        open: boolean;
        clientId: string;
    };
    successDialog: {
        open: boolean;
        secret?: string;
        clientId?: string;
    };
    apiTokenType: ApiTokenType;
    roles: ITeamUserRole[];
    permissions: ITeamUserPermission[];
    errors?: any;
}
export declare type ApiTokenType = 'user' | 'tenant' | null;
export declare type createdByUserIdColumn = 'show' | 'hide' | undefined;
export interface IApiTokensData {
    clientId: string;
    createdAt: string;
    secret?: string;
    description: string;
    metadata?: {};
}
export declare type IUserApiTokensData = IApiTokensData;
export interface ITenantApiTokensData extends IApiTokensData {
    roleIds: string[];
    tenantId: string;
    createdByUserId: string;
}
export declare type ApiStateIndicator = {
    key: ApiStateKeys;
    value: string | boolean;
};
export declare enum ApiStateKeys {
    LOAD_API_TOKENS = "LOAD_API_TOKENS",
    ADD_API_TOKEN = "ADD_API_TOKEN",
    DELETE_API_TOKEN = "DELETE_API_TOKEN"
}
export declare type AddTenantApiTokenPayload = WithCallback<Pick<ITenantApiTokensData, 'description' | 'roleIds'>>;
export declare type AddUserApiTokenPayload = WithCallback<Pick<IApiTokensData, 'description'>>;

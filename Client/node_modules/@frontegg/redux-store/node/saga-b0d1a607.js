'use strict';

var restApi = require('@frontegg/rest-api');
var toolkit = require('@reduxjs/toolkit');
var effects = require('redux-saga/effects');

const initialState = {
    total: 0,
    offset: 0,
    filter: '',
    sortBy: 'createdAt',
    context: null,
    filters: [],
    rowsData: [],
    lastUpdated: new Date(),
    isLoading: true,
    isFetchMore: false,
    totalToday: 0,
    currentPage: 0,
    headerProps: [],
    sortDirection: 'desc',
    severeThisWeek: 0,
    predefinedFilters: [],
    isDownloadingCsv: false,
    virtualScroll: false,
};

const defaultItemsPerPage = 20;
const { name: storeName, actions: lifeCycleActions, reducer } = toolkit.createSlice({
    name: 'audits',
    initialState,
    reducers: {
        setContext: (state, { payload }) => {
            state.context = payload;
        },
        startLoading: (state) => {
            state.isLoading = true;
        },
        setVirtualScroll: (state, { payload }) => {
            state.virtualScroll = payload;
        },
        startRefresh: (state) => {
            state.isLoading = true;
        },
        startFetching: (state) => {
            state.isFetchMore = true;
        },
        finishLoading: (state) => {
            state.isLoading = false;
        },
        startDownloadingCsv: (state) => {
            state.isDownloadingCsv = true;
        },
        stopDownloadingCsv: (state) => {
            state.isDownloadingCsv = false;
        },
        loadStatsSuccess: (state, { payload }) => {
            state.error = undefined;
            state.totalToday = payload.totalToday;
            state.severeThisWeek = payload.severeThisWeek;
        },
        loadItemFailedAction: (state, { payload }) => {
            state.error = Object.assign(Object.assign({}, state.error), { [payload.name]: payload.error });
        },
        loadMetadataSuccess: (state, { payload }) => {
            state.error = {};
            state.headerProps = payload.properties;
            state.themeAudits = payload.theme ? payload.theme.styles : {};
        },
        loadAuditsSuccess: (state, { payload }) => {
            state.error = {};
            state.rowsData = payload.rowsData;
            state.lastUpdated = new Date();
            state.total = payload.total;
        },
        fetchMoreSuccess: (state, { payload }) => {
            state.error = {};
            state.offset = payload.offset;
            state.currentPage = payload.currentPage;
            state.isFetchMore = false;
        },
        setFilterData: (state, { payload }) => {
            state.filters = payload;
            state.currentPage = 0;
            state.offset = 0;
            state.isLoading = true;
        },
        textSearch: (state, { payload }) => {
            state.filter = payload;
            state.currentPage = 0;
            state.offset = 0;
            state.isLoading = true;
        },
        onPageChange: (state, { payload }) => {
            state.currentPage = payload - 1;
            state.offset = state.currentPage * defaultItemsPerPage;
            state.isLoading = true;
        },
        setDataSorting: (state, { payload }) => {
            state.sortBy = payload.sortBy;
            state.currentPage = 0;
            state.sortDirection = payload.sortDirection === 'asc' ? 'desc' : 'asc';
            state.offset = 0;
            state.isLoading = true;
        },
        setPredefinedFilters: (state, { payload }) => {
            state.predefinedFilters = payload;
            state.filters = Object.keys(payload).map((key) => ({ key, value: payload[key] }));
        },
    },
});
const actions = Object.assign(Object.assign({}, lifeCycleActions), { initData: toolkit.createAction(`${storeName}/initData`), loadAudits: toolkit.createAction(`${storeName}/loadAudits`), removeFilter: toolkit.createAction(`${storeName}/removeFilter`), filterData: toolkit.createAction(`${storeName}/filterData`), exportCSV: toolkit.createAction(`${storeName}/exportCSV`), deleteAudits: toolkit.createAction(`${storeName}/deleteAudits`) });

const select = () => effects.select((_) => _[storeName]);
function* loadStats() {
    const { sortBy, sortDirection } = yield select();
    try {
        const stats = yield effects.call(restApi.api.audits.getAuditsStats, {
            sortBy,
            sortDirection,
            count: defaultItemsPerPage,
        });
        yield effects.put(actions.loadStatsSuccess(stats));
    }
    catch (e) {
        const errorMessage = {
            name: 'stats',
            error: e,
        };
        console.error('failed to load stats - ', e);
        yield effects.put(actions.loadItemFailedAction(errorMessage));
    }
}
function* loadMetadata() {
    try {
        const result = yield effects.call(restApi.api.metadata.getAuditsMetadata);
        yield effects.put(actions.loadMetadataSuccess(result));
    }
    catch (e) {
        const errorMessage = {
            name: 'metadata',
            error: e,
        };
        console.error('failed to load metadata - ', e);
        yield effects.put(actions.loadItemFailedAction(errorMessage));
    }
}
const filterToObject = (arr) => arr.reduce((res, curr) => {
    res[curr.key] = curr.value;
    return res;
}, {});
function* loadAuditsFunction({ payload }) {
    const { filters, sortBy, sortDirection, filter, offset, virtualScroll } = yield select();
    const { appendMode = virtualScroll, onlyOneLoad = true, offset: incomeOffset } = payload || {};
    const { rowsData } = appendMode ? yield select() : { rowsData: [] };
    try {
        const f2o = filterToObject(filters);
        const { data, total } = yield effects.call(restApi.api.audits.getAudits, Object.assign(Object.assign(Object.assign(Object.assign({}, (virtualScroll && { paginationMode: 'virtual' })), { sortDirection,
            sortBy,
            filter }), f2o), { 
            // TODO: refactor once api become V2 with query field for virtual scroll
            offset: virtualScroll ? rowsData.length + incomeOffset || rowsData.length + offset : incomeOffset || offset, count: defaultItemsPerPage }));
        yield effects.put(actions.loadAuditsSuccess({ rowsData: [...rowsData, ...data], total }));
        onlyOneLoad && (yield effects.put(actions.finishLoading()));
    }
    catch (e) {
        const errorMessage = {
            name: 'audits',
            error: e,
        };
        console.error('failed to load audits - ', e);
        yield effects.put(actions.loadItemFailedAction(errorMessage));
    }
}
function* initDataFunction() {
    yield effects.put(actions.startLoading());
    yield effects.all([loadStats(), loadMetadata(), loadAuditsFunction({ payload: { onlyOneLoad: false }, type: '' })]);
    yield effects.put(actions.finishLoading());
}
function* removeFilterFunction({ payload }) {
    const { filters: allFilters } = yield select();
    const removedFilterIndex = allFilters.findIndex((item) => item.key === payload.key);
    if (removedFilterIndex < 0) {
        return;
    }
    const newFilters = [...allFilters.slice(0, removedFilterIndex), ...allFilters.slice(removedFilterIndex + 1)];
    yield effects.put(actions.setFilterData(newFilters));
}
function* filterDataFunction({ payload }) {
    const { filters: allFilters } = yield select();
    let filterIndex = allFilters.findIndex((item) => item.key === payload.key);
    if (filterIndex < 0) {
        filterIndex = allFilters.length;
    }
    const newFilters = [...allFilters.slice(0, filterIndex), payload, ...allFilters.slice(filterIndex + 1)];
    yield effects.put(actions.setFilterData(newFilters));
}
function* exportCsvFunction() {
    const { filters, sortBy, sortDirection, filter, headerProps } = yield select();
    const f2o = filterToObject(filters);
    yield effects.put(actions.startDownloadingCsv());
    const outputFileName = `audits.csv`;
    try {
        yield restApi.api.audits.exportAudits(Object.assign(Object.assign({ endpoint: 'csv/v2', headerProps,
            sortDirection,
            sortBy,
            filter }, f2o), { offset: 0, outputFileName }));
    }
    catch (e) {
        console.error('failed to export audits - ', e);
    }
    finally {
        yield effects.put(actions.stopDownloadingCsv());
    }
}
function* sagas() {
    yield effects.takeLatest(actions.initData, initDataFunction);
    yield effects.takeLatest(actions.removeFilter, removeFilterFunction);
    yield effects.takeLatest(actions.filterData, filterDataFunction);
    yield effects.takeLatest([actions.loadAudits, actions.textSearch, actions.onPageChange], loadAuditsFunction);
    yield effects.takeLatest([actions.setFilterData, actions.setDataSorting, actions.startRefresh], () => loadAuditsFunction({ payload: { appendMode: false }, type: '' }));
    yield effects.takeLatest(actions.exportCSV, exportCsvFunction);
}

exports.actions = actions;
exports.defaultItemsPerPage = defaultItemsPerPage;
exports.initialState = initialState;
exports.reducer = reducer;
exports.sagas = sagas;
exports.storeName = storeName;

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var constants = require('../constants-52e37c08.js');
var toolkit = require('@reduxjs/toolkit');
var effects = require('redux-saga/effects');
var restApi = require('@frontegg/rest-api');

function createModuleCaseReducers() {
    return {
        setLoading: {
            prepare: (payload) => ({ payload }),
            reducer: (state, action) => (Object.assign(Object.assign(Object.assign({}, state), { loading: action.payload }), (action.payload ? { error: null } : {}))),
        },
        setError: {
            prepare: (payload) => ({ payload }),
            reducer: (state, action) => (Object.assign(Object.assign({}, state), { error: action.payload, loading: false, fetching: false })),
        },
        setState: {
            prepare: (payload) => ({ payload }),
            reducer: (state, action) => (Object.assign(Object.assign({}, state), action.payload)),
        },
    };
}
function createKeyCaseReducer(key, setState) {
    return {
        prepare: (payload) => ({ payload }),
        reducer: (state, action) => (Object.assign(Object.assign({}, state), { [key]: setState(state[key], action) })),
    };
}
function createKeyCaseLoadingReducer(key) {
    return createKeyCaseReducer(key, (state, action) => (Object.assign(Object.assign({}, state), { loading: action.payload })));
}
function createKeyCaseErrorReducer(key) {
    return createKeyCaseReducer(key, (state, action) => (Object.assign(Object.assign({}, state), { error: action.payload, loading: false })));
}

const plansInitialState = {
    loading: false,
    error: null,
    fetching: true,
    plans: [],
};
const { actions: sliceActions$2, reducer: reducer$9, name: name$8 } = toolkit.createSlice({
    name: `${constants.subscriptionsStoreName}/plans`,
    initialState: plansInitialState,
    reducers: Object.assign({}, createModuleCaseReducers()),
});
const actions$9 = Object.assign({ loadPlans: toolkit.createAction(`${name$8}/loadPlans`) }, sliceActions$2);

const configInitialState = {
    loading: false,
    error: null,
    fetching: true,
    config: null,
};
const reducers$6 = Object.assign({}, createModuleCaseReducers());
const { actions: configActions, reducer: reducer$8, name: name$7, } = toolkit.createSlice({
    name: `${constants.subscriptionsStoreName}/config`,
    initialState: configInitialState,
    reducers: reducers$6,
});
const actions$8 = Object.assign({ loadPaymentConfiguration: toolkit.createAction(`${name$7}/loadPaymentConfiguration`) }, configActions);

const initialSubscriptionState = {
    loading: false,
    error: null,
    fetching: true,
    cancellation: {
        loading: false,
        error: null,
    },
    renewal: {
        loading: false,
        error: null,
    },
};
const reducers$5 = Object.assign(Object.assign({}, createModuleCaseReducers()), { setCancellationLoading: createKeyCaseLoadingReducer('cancellation'), setCancellationError: createKeyCaseErrorReducer('cancellation'), setRenewalLoading: createKeyCaseLoadingReducer('renewal'), setRenewalError: createKeyCaseErrorReducer('renewal') });
const { reducer: reducer$7, actions: overviewActions$1, name: name$6, } = toolkit.createSlice({
    name: `${constants.subscriptionsStoreName}/billing/subscription`,
    initialState: initialSubscriptionState,
    reducers: reducers$5,
});
const actions$7 = Object.assign({ load: toolkit.createAction(`${name$6}/loadSubscription`), cancelSubscription: toolkit.createAction(`${name$6}/cancelSubscription`), renewSubscription: toolkit.createAction(`${name$6}/renewSubscription`) }, overviewActions$1);

const initialBillingInformationState = {
    loading: false,
    error: null,
    fetching: true,
};
const reducers$4 = Object.assign({}, createModuleCaseReducers());
const { reducer: reducer$6, actions: overviewActions, name: name$5, } = toolkit.createSlice({
    name: `${constants.subscriptionsStoreName}/billing/information`,
    initialState: initialBillingInformationState,
    reducers: reducers$4,
});
const actions$6 = Object.assign({ loadBillingInformation: toolkit.createAction(`${name$5}/loadBillingInformation`), cancelSubscription: actions$7.cancelSubscription, renewSubscription: actions$7.renewSubscription }, overviewActions);

const initialPaymentMethodState = {
    loading: false,
    error: null,
    fetching: true,
};
const reducers$3 = Object.assign(Object.assign({}, createModuleCaseReducers()), { setState: {
        prepare: (payload) => ({ payload }),
        reducer: (state, action) => (Object.assign(Object.assign({}, state), action.payload)),
    } });
const { reducer: reducer$5, actions: paymentActions, name: name$4, } = toolkit.createSlice({
    name: `${constants.subscriptionsStoreName}/billing/payment`,
    initialState: initialPaymentMethodState,
    reducers: reducers$3,
});
const actions$5 = Object.assign({ loadPaymentMethod: toolkit.createAction(`${name$4}/loadPaymentMethod`), submitPaymentMethod: toolkit.createAction(`${name$4}/submitPaymentMethod`), submitPaymentMethodError: toolkit.createAction(`${name$4}/submitPaymentMethodError`), submitPaymentMethodSuccess: toolkit.createAction(`${name$4}/submitPaymentMethodSuccess`), updatePaymentMethodBillingDetails: toolkit.createAction(`${name$4}/updateBillingDetails`, (payload) => ({ payload })) }, paymentActions);

const initialInvoicesState = {
    loading: false,
    error: null,
    fetching: true,
    invoices: [],
    invoiceDownload: {
        loading: false,
        error: null
    }
};
const reducers$2 = Object.assign(Object.assign({}, createModuleCaseReducers()), { setInvoiceDownloadState: {
        prepare: (payload) => ({ payload }),
        reducer: (state, action) => (Object.assign(Object.assign({}, state), { invoiceDownload: Object.assign(Object.assign({}, state.invoiceDownload), action.payload) })),
    } });
const { reducer: reducer$4, actions: sliceActions$1, name: name$3, } = toolkit.createSlice({
    name: `${constants.subscriptionsStoreName}/billing/invoices`,
    initialState: initialInvoicesState,
    reducers: reducers$2,
});
const actions$4 = Object.assign({ loadInvoices: toolkit.createAction(`${name$3}/loadInvoices`), downloadInvoice: toolkit.createAction(`${name$3}/downloadInvoice`, (payload) => ({ payload })) }, sliceActions$1);

const billingInitialState = {
    information: initialBillingInformationState,
    invoices: initialInvoicesState,
    paymentMethod: initialPaymentMethodState,
    subscription: initialSubscriptionState,
};
const billingActions = {
    invoices: actions$4,
    information: actions$6,
    paymentMethod: actions$5,
    subscription: actions$7,
};
const billingReducer = toolkit.combineReducers({
    invoices: reducer$4,
    information: reducer$6,
    paymentMethod: reducer$5,
    subscription: reducer$7,
});

const checkoutInitialState = {
    fetching: true,
    loading: false,
    error: null,
    confirmed: false,
};
const reducers$1 = Object.assign({}, createModuleCaseReducers());
const { actions: checkoutActions, reducer: reducer$3, name: name$2 } = toolkit.createSlice({
    name: `${constants.subscriptionsStoreName}/checkout`,
    initialState: checkoutInitialState,
    reducers: reducers$1,
});
const actions$3 = Object.assign({ loadCheckout: toolkit.createAction(`${name$2}/loadCheckout`), resetCheckout: toolkit.createAction(`${name$2}/resetCheckout`), submitCheckout: toolkit.createAction(`${name$2}/submitCheckout`), confirmCheckout: toolkit.createAction(`${name$2}/confirmCheckout`, (payload) => ({ payload })), errorCheckout: toolkit.createAction(`${name$2}/errorCheckout`, (payload) => ({ payload })) }, checkoutActions);

const initialSubscriptionStripeState = {
    loading: false,
    error: null,
    cardSetupIntentSecret: null,
};
const reducers = Object.assign({}, createModuleCaseReducers());
const { reducer: reducer$2, actions: reducerActions, name: name$1, } = toolkit.createSlice({
    name: `${constants.subscriptionsStoreName}/stripe`,
    initialState: initialSubscriptionStripeState,
    reducers,
});
const actions$2 = Object.assign({ loadCustomer: toolkit.createAction(`${name$1}/loadCustomer`), createCardSetupIntentSecret: toolkit.createAction(`${name$1}/createCardSetupIntentSecret`) }, reducerActions);

const vendorPublicConfigInitialState = {
    loading: false,
    fetching: true,
    vendorPublicConfig: null,
};
const { actions: sliceActions, reducer: reducer$1, name, } = toolkit.createSlice({
    name: `${constants.subscriptionsStoreName}/vendorPublicConfig`,
    initialState: vendorPublicConfigInitialState,
    reducers: Object.assign({}, createModuleCaseReducers()),
});
const actions$1 = Object.assign({ loadVendorPublicConfiguration: toolkit.createAction(`${name}/loadVendorPublicConfiguration`) }, sliceActions);

const initialState = {
    config: configInitialState,
    plans: plansInitialState,
    checkout: checkoutInitialState,
    billing: billingInitialState,
    stripe: initialSubscriptionStripeState,
    vendorPublicConfig: vendorPublicConfigInitialState,
};
const actions = {
    config: actions$8,
    billing: billingActions,
    plans: actions$9,
    checkout: actions$3,
    stripe: actions$2,
    vendorPublicConfig: actions$1,
};
const reducer = toolkit.combineReducers({
    config: reducer$8,
    billing: billingReducer,
    plans: reducer$9,
    checkout: reducer$3,
    stripe: reducer$2,
    vendorPublicConfig: reducer$1,
});

exports.PaymentProvider = void 0;
(function (PaymentProvider) {
    PaymentProvider["STRIPE"] = "Stripe";
})(exports.PaymentProvider || (exports.PaymentProvider = {}));
exports.SubscriptionStatus = void 0;
(function (SubscriptionStatus) {
    SubscriptionStatus["ACTIVE"] = "ACTIVE";
    SubscriptionStatus["CANCELED"] = "CANCELED";
    SubscriptionStatus["INCOMPLETE"] = "INCOMPLETE";
    SubscriptionStatus["EXPIRED"] = "EXPIRED";
    SubscriptionStatus["TRIALING"] = "TRIALING";
})(exports.SubscriptionStatus || (exports.SubscriptionStatus = {}));
exports.SubscriptionCancellationPolicy = void 0;
(function (SubscriptionCancellationPolicy) {
    SubscriptionCancellationPolicy["AT_PERIOD_END"] = "atPeriodEnd";
})(exports.SubscriptionCancellationPolicy || (exports.SubscriptionCancellationPolicy = {}));

function toSubscriptionCancellation({ policy }) {
    return {
        policy: toSubscriptionCancellationPolicy(),
    };
}
function toSubscriptionCancellationPolicy(policy) {
    return exports.SubscriptionCancellationPolicy.AT_PERIOD_END;
}
function toSubscriptionStatus(status) {
    switch (status) {
        case restApi.ISubscriptionStatus.ACTIVE:
            return exports.SubscriptionStatus.ACTIVE;
        case restApi.ISubscriptionStatus.INCOMPLETE:
            return exports.SubscriptionStatus.INCOMPLETE;
        case restApi.ISubscriptionStatus.CANCELED:
            return exports.SubscriptionStatus.CANCELED;
        case restApi.ISubscriptionStatus.EXPIRED:
            return exports.SubscriptionStatus.EXPIRED;
        case restApi.ISubscriptionStatus.TRIALING:
            return exports.SubscriptionStatus.TRIALING;
        default:
            return exports.SubscriptionStatus.EXPIRED;
    }
}

const subscriptionResponseMock = {
    id: 'sub_1JbhYVEwsu4qiqnnfMhYAdY6',
    externalId: 'sub_1JbhYVEwsu4qiqnnfMhYAdY6',
    startDate: '2021-09-20T08:08:51.000Z',
    status: restApi.ISubscriptionStatus.ACTIVE,
    externallyManaged: false,
    cancellation: null,
    currentPeriodStart: '2021-09-20T08:08:51.000Z',
    currentPeriodEnd: '2021-10-20T08:08:51.000Z',
    plan: {
        // TODO: fix dummy data
        slug: 'test',
    },
};
const planResponseMock = [
    {
        id: 'prod_J60fUEvI7qV1eL',
        externalId: 'prod_J60fUEvI7qV1eL',
        name: 'Premium',
        description: '',
        price: {
            id: 'price_1IToe8Ewsu4qiqnndAV76J69',
            externalId: 'price_1IToe8Ewsu4qiqnndAV76J69',
            currency: 'usd',
            amount: 10000,
        },
        slug: 'premium',
    },
    {
        id: 'prod_J60duauCpXfcur',
        externalId: 'prod_J60duauCpXfcur',
        name: 'Free',
        description: 'Totally free plan. Nothing to pay.',
        price: {
            id: 'price_1ITocfEwsu4qiqnnnBHDx9fQ',
            externalId: 'price_1ITocfEwsu4qiqnnnBHDx9fQ',
            currency: 'usd',
            amount: 0,
        },
        slug: 'free',
    },
];
const invoicesMock = [
    {
        id: 'in_1JbhYWEwsu4qiqnnrUh6hsHa',
        externalId: 'in_1JbhYWEwsu4qiqnnrUh6hsHa',
        subscriptionId: 'sub_1JbhYVEwsu4qiqnnfMhYAdY6',
        paymentDate: '2021-09-20T08:08:51.000Z',
        totalAmount: 10000,
        currency: 'usd',
        paid: true,
        receiptNumber: '',
    },
    {
        id: 'in_1JbhYWEwsu4qiqnnrUh6hsHa',
        externalId: 'in_1JbhYWEwsu4qiqnnrUh6hsHa',
        subscriptionId: 'sub_1JbhYVEwsu4qiqnnfMhYAdY6',
        paymentDate: '2021-08-20T08:08:51.000Z',
        totalAmount: 10000,
        currency: 'usd',
        paid: true,
        receiptNumber: '',
    },
];
const paymentMethodsMock = [
    {
        id: 'id',
        externalId: 'externalId',
        type: restApi.PaymentMethodType.CARD,
        isDefault: true,
        last4: '4242',
        expMonth: 11,
        expYear: 25,
        brand: 'visa',
        billingDetails: {
            name: 'Dummy',
            email: 'dummy@email.com',
        },
    },
];
const vendorPublicConfigurationResponseMock = {
    allowPlanDowngrade: true,
    allowPlanCancellation: true,
};

function* subscriptionSagas() {
    yield effects.takeEvery(actions$7.load, loadSubscriptionTenant);
    yield effects.takeEvery(actions$7.cancelSubscription, cancelSubscription);
    yield effects.takeEvery(actions$7.renewSubscription, renewSubscription);
}
function* loadSubscriptionTenant() {
    const tenantId = yield effects.select((state) => { var _a, _b; return (_b = (_a = state.auth) === null || _a === void 0 ? void 0 : _a.user) === null || _b === void 0 ? void 0 : _b.tenantId; });
    yield loadSummaries(tenantId);
}
function* loadSubscription() {
    yield effects.put(actions$7.setLoading(true));
    try {
        const [subscription] = yield effects.call(restApi.api.subscriptions.getManagedSubscriptions);
        yield effects.put(actions$7.setState({
            subscription,
            fetching: false,
            loading: false,
            error: null,
        }));
    }
    catch (e) {
        yield effects.put(actions$7.setError(e));
    }
}
function* cancelSubscription() {
    const { subscription } = yield effects.select((state) => state.subscriptions.billing.subscription);
    if (!subscription) {
        yield effects.put(actions$7.setCancellationError('Subscription not found.'));
        return;
    }
    if (subscription === null || subscription === void 0 ? void 0 : subscription.externallyManaged) {
        yield effects.put(actions$7.setCancellationError('Billing is externally managed.'));
        return;
    }
    const { id: subscriptionId, cancellation, status } = subscription || {};
    const isCancellable = !cancellation && status === restApi.ISubscriptionStatus.ACTIVE;
    if (isCancellable) {
        try {
            yield effects.put(actions$7.setCancellationLoading(true));
            yield effects.call(restApi.api.subscriptions.cancelManagedSubscription, subscriptionId);
            yield loadSubscription();
            yield effects.put(actions$7.setCancellationLoading(false));
        }
        catch (e) {
            yield effects.put(actions$7.setCancellationError(e.message));
        }
    }
}
function* renewSubscription() {
    const { subscription } = yield effects.select((state) => state.subscriptions.billing.subscription);
    if (!subscription) {
        yield effects.put(actions$7.setCancellationError('Subscription not found.'));
        return;
    }
    if (subscription === null || subscription === void 0 ? void 0 : subscription.externallyManaged) {
        yield effects.put(actions$7.setCancellationError('Billing is externally managed'));
        return;
    }
    const { id: subscriptionId, cancellation } = subscription || {};
    const renewable = (cancellation === null || cancellation === void 0 ? void 0 : cancellation.policy) === restApi.ISubscriptionCancellationPolicy.AT_PERIOD_END;
    if (renewable) {
        try {
            yield effects.put(actions$7.setRenewalLoading(true));
            yield effects.call(restApi.api.subscriptions.renewManagedSubscription, subscriptionId);
            yield loadSubscription();
            yield effects.put(actions$7.setRenewalLoading(false));
        }
        catch (e) {
            yield effects.put(actions$7.setCancellationError(e.message));
        }
    }
}
/*********************************
 *  Preview Sagas
 *********************************/
function* loadMock() {
    yield effects.put(actions$7.setLoading(true));
    yield effects.delay(500);
    yield effects.put(actions$7.setState({
        subscription: subscriptionResponseMock,
        fetching: false,
        loading: false,
        error: null,
    }));
}
function* subscriptionSagasMock() {
    yield effects.takeEvery(actions$7.load, loadMock);
}

function* subscriptionBillingInformationSagas() {
    yield effects.takeEvery(actions$6.loadBillingInformation, loadBillingInformation);
}
function* loadBillingInformation() {
    yield loadBillingInformationAction(false);
}
function* loadBillingInformationAction(forceActive) {
    const paymentProvider = yield effects.select((state) => { var _a; return (_a = state.subscriptions.config.config) === null || _a === void 0 ? void 0 : _a.paymentProvider; });
    const tenantId = yield effects.select((state) => { var _a, _b; return (_b = (_a = state.auth) === null || _a === void 0 ? void 0 : _a.user) === null || _b === void 0 ? void 0 : _b.tenantId; });
    if (!paymentProvider || !tenantId) {
        yield effects.put(actions$6.setError(!paymentProvider ? 'Internal feature failure' : 'Not authorized'));
        return;
    }
    yield loadSummaries(tenantId, forceActive);
}
function* loadSummaries(tenantId, forceActive) {
    var _a, _b;
    yield effects.put(actions$6.setLoading(true));
    try {
        const summary = yield effects.call(restApi.api.subscriptions.getSubscriptionSummaries, tenantId);
        const { currentPlanId, externallyManaged } = summary;
        let subscriptionResponse = null;
        let planResponse;
        if (!externallyManaged) {
            [, planResponse] = yield effects.all([
                yield loadSubscription(),
                effects.call(restApi.api.subscriptions.getSubscriptionPlan, currentPlanId),
            ]);
            subscriptionResponse = yield effects.select((state) => state.subscriptions.billing.subscription.subscription || null);
        }
        else {
            planResponse = yield effects.call(restApi.api.subscriptions.getSubscriptionPlan, currentPlanId);
        }
        yield effects.put(actions$6.setState(Object.assign(Object.assign({ loading: false, fetching: false, summary }, (subscriptionResponse
            ? {
                subscription: {
                    id: subscriptionResponse.id,
                    externalId: subscriptionResponse.externalId,
                    startDate: subscriptionResponse.startDate,
                    currentPeriodStart: subscriptionResponse.currentPeriodStart,
                    currentPeriodEnd: subscriptionResponse.currentPeriodEnd,
                    status: forceActive ? exports.SubscriptionStatus.ACTIVE : toSubscriptionStatus(subscriptionResponse.status),
                    cancellation: subscriptionResponse.cancellation && toSubscriptionCancellation(subscriptionResponse.cancellation),
                    trialEnd: subscriptionResponse.trialEnd ? subscriptionResponse.trialEnd : null,
                },
            }
            : {})), (planResponse
            ? {
                plan: {
                    id: planResponse.id,
                    name: planResponse.name,
                    description: planResponse.description,
                    price: ((_a = planResponse.price) === null || _a === void 0 ? void 0 : _a.amount) || 0,
                    currency: ((_b = planResponse.price) === null || _b === void 0 ? void 0 : _b.currency) || 'usd',
                    recurringInterval: 'month',
                    slug: planResponse.slug,
                },
            }
            : {}))));
    }
    catch (e) {
        yield effects.put(actions$6.setError(e.message));
    }
}
/*********************************
 *  Preview Sagas
 *********************************/
function* loadBillingInformationMock() {
    yield loadSummariesMock();
}
function* loadSummariesMock() {
    var _a, _b;
    yield effects.put(actions$6.setLoading(true));
    yield effects.delay(500);
    yield effects.put(actions$6.setState({
        loading: false,
        fetching: false,
        summary: {
            subscriptionId: subscriptionResponseMock.id,
            paymentMethodId: 'mockPaymentMethodId',
            tenantConfigurationId: 'mockTenantConfigurationId',
            providerType: restApi.ProviderType.Stripe,
            externallyManaged: false,
            currentPlanId: planResponseMock[0].id,
            defaultPlanId: planResponseMock[0].id,
        },
        plan: Object.assign(Object.assign({}, planResponseMock[0]), { price: (_a = planResponseMock[0].price) === null || _a === void 0 ? void 0 : _a.amount, currency: (_b = planResponseMock[0].price) === null || _b === void 0 ? void 0 : _b.currency, recurringInterval: 'month' }),
    }));
}
function* subscriptionBillingInformationSagasMock() {
    yield effects.takeEvery(actions$6.loadBillingInformation, loadBillingInformationMock);
}

function* subscriptionsPaymentMethodSagas() {
    yield effects.takeEvery(actions$5.loadPaymentMethod, loadPaymentMethod);
    yield effects.takeEvery(actions$5.submitPaymentMethod, submitPaymentMethod);
    yield effects.takeEvery(actions$5.submitPaymentMethodError, submitPaymentMethodError);
    yield effects.takeEvery(actions$5.submitPaymentMethodSuccess, submitPaymentMethodSuccess);
    yield effects.takeEvery(actions$5.updatePaymentMethodBillingDetails, updateBillingDetails);
}
function* loadPaymentMethod() {
    yield effects.put(actions$5.setLoading(true));
    try {
        const paymentMethods = yield effects.call(restApi.api.subscriptions.getPaymentMethods);
        const paymentMethod = paymentMethods[0];
        yield effects.put(actions$5.setState({
            paymentMethod,
            loading: false,
            fetching: false,
        }));
    }
    catch (e) {
        yield effects.put(actions$5.setError(e.message));
    }
}
function* updateBillingDetails({ payload, }) {
    yield effects.put(actions$5.setLoading(true));
    const { id, email, address, callback } = payload;
    try {
        yield effects.call(restApi.api.subscriptions.updatePaymentMethodBillingDetails, id, Object.assign({ email }, address));
        yield effects.call(loadPaymentMethod);
        callback === null || callback === void 0 ? void 0 : callback(true);
    }
    catch (e) {
        yield effects.put(actions$5.setError(e.message));
        callback === null || callback === void 0 ? void 0 : callback(false);
    }
    yield effects.put(actions$5.setLoading(false));
}
function* submitPaymentMethod() {
    yield effects.put(actions$5.setLoading(true));
}
function* submitPaymentMethodError({ payload: error }) {
    yield effects.put(actions$5.setError(error));
}
function* submitPaymentMethodSuccess() {
    yield effects.put(actions$5.loadPaymentMethod());
}
/*********************************
 *  Preview Sagas
 *********************************/
function* loadPaymentMethodMock() {
    yield effects.put(actions$5.setLoading(true));
    yield effects.delay(500);
    const paymentMethod = paymentMethodsMock[0];
    yield effects.put(actions$5.setState({
        paymentMethod,
        loading: false,
        fetching: false,
    }));
}
function* subscriptionsPaymentMethodSagasMock() {
    yield effects.takeEvery(actions$5.loadPaymentMethod, loadPaymentMethodMock);
}

function* subscriptionInvoicesSagas() {
    yield effects.takeEvery(actions$4.loadInvoices, loadInvoices);
    yield effects.takeEvery(actions$4.downloadInvoice, downloadInvoice);
}
function* loadInvoices() {
    yield effects.put(actions$4.setLoading(true));
    try {
        const responseInvoices = yield effects.call(restApi.api.subscriptions.getSubscriptionInvoices);
        const invoices = responseInvoices.map((invoice) => ({
            id: invoice.id,
            externalId: invoice.externalId,
            subscriptionId: invoice.subscriptionId,
            paymentDate: new Date(Date.parse(invoice.paymentDate)),
            totalAmount: +((invoice.totalAmount || 0) / 100).toFixed(2),
            currency: invoice.currency || 'usd',
            paid: invoice.paid || false,
            receiptNumber: invoice.receiptNumber,
        }));
        yield effects.put(actions$4.setState({
            loading: false,
            fetching: false,
            invoices,
        }));
    }
    catch (e) {
        yield effects.put(actions$4.setError(e.message));
    }
}
function* downloadInvoice({ payload }) {
    yield effects.put(actions$4.setInvoiceDownloadState({ loading: true, error: null }));
    try {
        yield effects.call(restApi.api.subscriptions.getSubscriptionInvoicePdf, payload.invoiceId, payload.filename);
        yield effects.put(actions$4.setInvoiceDownloadState({ loading: false, error: null }));
    }
    catch (e) {
        yield effects.put(actions$4.setInvoiceDownloadState({ loading: false, error: e.message || null }));
    }
}
/*********************************
 *  Preview Sagas
 *********************************/
function* loadInvoicesMock() {
    yield effects.put(actions$4.setLoading(true));
    yield effects.delay(500);
    const selectPlanTitle = 'Premium';
    yield effects.put(actions$4.setState({
        loading: false,
        fetching: false,
        invoices: invoicesMock.map((invoice) => (Object.assign(Object.assign({}, invoice), { selectedPlan: selectPlanTitle, paymentDate: new Date(Date.parse(invoice.paymentDate)), totalAmount: +((invoice.totalAmount || 0) / 100).toFixed(2) }))),
    }));
    yield effects.put(actions$4.setLoading(false));
}
function* subscriptionInvoicesSagasMock() {
    yield effects.takeEvery(actions$4.loadInvoices, loadInvoicesMock);
}

function* billingSagas() {
    yield effects.all([
        effects.call(subscriptionBillingInformationSagas),
        effects.call(subscriptionsPaymentMethodSagas),
        effects.call(subscriptionInvoicesSagas),
        effects.call(subscriptionSagas),
    ]);
}
function* billingSagasMock() {
    yield effects.all([
        effects.call(subscriptionBillingInformationSagasMock),
        effects.call(subscriptionsPaymentMethodSagasMock),
        effects.call(subscriptionInvoicesSagasMock),
        effects.call(subscriptionSagasMock),
    ]);
}

function* checkoutSagas() {
    yield effects.takeEvery(actions$3.loadCheckout, loadCheckout);
    yield effects.takeEvery(actions$3.resetCheckout, resetCheckout);
    yield effects.takeEvery(actions$3.submitCheckout, submitCheckout);
    yield effects.takeEvery(actions$3.confirmCheckout, confirmPlan);
    yield effects.takeEvery(actions$3.errorCheckout, errorCheckout);
}
function* loadCheckout() {
    yield effects.put(actions$3.setState({
        fetching: false,
        loading: false,
        error: null,
        confirmed: false,
    }));
}
function* resetCheckout() {
    yield effects.put(actions$3.setState({
        loading: false,
        error: null,
        confirmed: false,
    }));
}
/**
 * Based on payment provider type
 */
function* submitCheckout() {
    yield effects.put(actions$3.setState({
        loading: true,
        error: null,
    }));
}
function* confirmPlan({ payload: { paymentMethodId, planId } }) {
    const subscription = yield effects.select((state) => state.subscriptions.billing.subscription.subscription);
    const summary = yield effects.select((state) => state.subscriptions.billing.information.summary);
    const isTrialing = (subscription === null || subscription === void 0 ? void 0 : subscription.status) === exports.SubscriptionStatus.TRIALING;
    const hasPaymentMethod = !!(summary === null || summary === void 0 ? void 0 : summary.paymentMethodId);
    if (!subscription) {
        yield effects.put(actions$3.setState({
            loading: false,
            error: 'Subscription not found',
        }));
        return;
    }
    yield effects.put(actions$3.setState({
        loading: true,
        error: null,
    }));
    if (isTrialing && hasPaymentMethod) {
        yield confirmCheckout();
        yield effects.put(actions$7.setState({
            subscription: Object.assign(Object.assign({}, subscription), { status: restApi.ISubscriptionStatus.ACTIVE }),
        }));
        return;
    }
    try {
        yield effects.call(restApi.api.subscriptions.updateManagedSubscription, subscription.id, {
            paymentMethodId,
            planId,
        });
        yield effects.all([
            loadBillingInformation(),
            loadPaymentMethod(),
            loadInvoices(),
        ]);
        yield confirmCheckout();
    }
    catch (e) {
        yield effects.put(actions$3.setState({
            loading: false,
            error: e.message,
        }));
    }
}
function* confirmCheckout() {
    yield effects.put(actions$3.setState({
        loading: false,
        error: null,
        confirmed: true,
    }));
}
function* errorCheckout({ payload }) {
    yield effects.put(actions$3.setState({
        loading: false,
        error: payload,
    }));
}
/*********************************
 *  Preview Sagas
 *********************************/
function* checkoutSagasMock() {
    yield effects.takeEvery(actions$3.resetCheckout, resetCheckout);
}

function* plansSagas() {
    yield effects.takeEvery(actions$9.loadPlans, loadPlans);
}
function* loadPlans() {
    yield effects.put(actions$9.setLoading(true));
    try {
        const products = yield effects.call(restApi.api.subscriptions.getSubscriptionPlans);
        const plans = products.map((item) => {
            var _a, _b;
            return ({
                id: item.id,
                name: item.name,
                description: item.description,
                price: ((_a = item.price) === null || _a === void 0 ? void 0 : _a.amount) || 0,
                currency: ((_b = item.price) === null || _b === void 0 ? void 0 : _b.currency) || 'usd',
                recurringInterval: 'month',
                slug: item.slug,
            });
        });
        yield effects.put(actions$9.setState({
            fetching: false,
            loading: false,
            plans,
        }));
    }
    catch (e) {
        yield effects.put(actions$9.setError(e.message));
    }
}
/*********************************
 *  Preview Sagas
 *********************************/
function* loadPlansMock() {
    yield effects.put(actions$9.setLoading(true));
    yield effects.delay(500);
    yield effects.put(actions$9.setState({
        fetching: false,
        loading: false,
        plans: planResponseMock.map((item) => {
            var _a, _b;
            return (Object.assign(Object.assign({}, item), { price: ((_a = item.price) === null || _a === void 0 ? void 0 : _a.amount) || 0, currency: ((_b = item.price) === null || _b === void 0 ? void 0 : _b.currency) || 'usd', recurringInterval: 'month' }));
        }),
    }));
}
function* plansSagasMock() {
    yield effects.takeEvery(actions$9.loadPlans, loadPlansMock);
}

exports.PaymentMethodType = void 0;
(function (PaymentMethodType) {
    PaymentMethodType["UNKNWON"] = "unknown";
    PaymentMethodType["CARD"] = "card";
})(exports.PaymentMethodType || (exports.PaymentMethodType = {}));

function* configSagas() {
    yield effects.takeEvery(actions$8.loadPaymentConfiguration, loadPaymentConfiguration);
}
function* loadPaymentConfiguration() {
    yield effects.put(actions$8.setLoading(true));
    try {
        const response = yield effects.call(restApi.api.subscriptions.getPaymentProviders) || [];
        const stripePaymentProvider = response.find((paymentProvider) => paymentProvider.status === '1' && paymentProvider.providerType === restApi.ProviderType.Stripe);
        if (stripePaymentProvider) {
            yield loadStripePaymentConfiguration();
        }
        else {
            yield effects.put(actions$8.setError('Payment provider not configured'));
        }
    }
    catch (e) {
        yield effects.put(actions$8.setError(e.message));
    }
}
function* loadStripePaymentConfiguration() {
    yield effects.put(actions$8.setLoading(true));
    try {
        const response = yield effects.call(restApi.api.subscriptions.getStripePaymentProviderConfiguration);
        yield effects.put(actions$8.setState({
            loading: false,
            fetching: false,
            config: {
                paymentProvider: exports.PaymentProvider.STRIPE,
                apiKey: response.publishableKey
            }
        }));
    }
    catch (e) {
        yield effects.put(actions$8.setError(e.message));
    }
}
/*********************************
 *  Preview Sagas
 *********************************/
function* loadPaymentConfigurationMock() {
    yield effects.put(actions$8.setLoading(true));
    yield effects.delay(500);
    yield effects.put(actions$8.setState({
        loading: false,
        fetching: false,
        config: {
            paymentProvider: exports.PaymentProvider.STRIPE,
            apiKey: ''
        },
    }));
}
function* configSagasMock() {
    yield effects.takeEvery(actions$8.loadPaymentConfiguration, loadPaymentConfigurationMock);
}

function* subscriptionStripeSagas() {
    yield effects.takeEvery(actions$2.createCardSetupIntentSecret, createCardSetupIntentSecret);
}
function* createCardSetupIntentSecret({ payload }) {
    yield effects.put(actions$2.setState({
        loading: true,
        error: null,
        cardSetupIntentSecret: null,
    }));
    try {
        const request = {};
        if (payload) {
            request.paymentMethodId = payload;
        }
        const { setupIntentSecret } = yield effects.call(restApi.api.subscriptions.createStripePaymentMethodSetupIntentSecret, request);
        yield effects.put(actions$2.setState({
            cardSetupIntentSecret: setupIntentSecret,
            loading: false,
        }));
    }
    catch (e) {
        yield effects.put(actions$2.setError(e.message));
    }
}

function* vendorPublicConfigSagas() {
    yield effects.takeEvery(actions$1.loadVendorPublicConfiguration, loadVendorPublicConfiguration);
}
function* loadVendorPublicConfiguration() {
    yield effects.put(actions$1.setLoading(true));
    try {
        const vendorPublicConfig = yield effects.call(restApi.api.subscriptions.getVendorPublicConfigurations);
        yield effects.put(actions$1.setState({
            fetching: false,
            loading: false,
            vendorPublicConfig,
        }));
    }
    catch (e) {
        yield effects.put(actions$1.setError(e.message));
    }
}
/*********************************
 *  Preview Sagas
 *********************************/
function* loadVendorPublicConfigurationMock() {
    yield effects.put(actions$1.setLoading(true));
    yield effects.delay(500);
    yield effects.put(actions$1.setState({
        fetching: false,
        loading: false,
        vendorPublicConfig: vendorPublicConfigurationResponseMock,
    }));
}
function* vendorPublicConfigSagasMock() {
    yield effects.takeEvery(actions$1.loadVendorPublicConfiguration, loadVendorPublicConfigurationMock);
}

function* sagas() {
    yield effects.all([
        effects.call(billingSagas),
        effects.call(checkoutSagas),
        effects.call(plansSagas),
        effects.call(configSagas),
        effects.call(subscriptionStripeSagas),
        effects.call(vendorPublicConfigSagas),
    ]);
}
function* mockSagas() {
    yield effects.all([
        effects.call(billingSagasMock),
        effects.call(checkoutSagasMock),
        effects.call(plansSagasMock),
        effects.call(configSagasMock),
        effects.call(vendorPublicConfigSagasMock),
    ]);
}

// export store
// export store
var subscriptionsStore = {
    sagas,
    mockSagas,
    reducer,
    actions,
    initialState,
    storeName: constants.subscriptionsStoreName,
};

exports.subscriptionsStoreName = constants.subscriptionsStoreName;
exports['default'] = subscriptionsStore;
exports.subscriptionActions = actions;
exports.subscriptionInitialState = initialState;
exports.subscriptionReducers = reducer;
exports.subscriptionSagas = sagas;
exports.subscriptionSagasMock = mockSagas;

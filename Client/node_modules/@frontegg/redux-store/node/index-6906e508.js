'use strict';

var constants = require('./constants-52e37c08.js');
var toolkit = require('@reduxjs/toolkit');
var effects = require('redux-saga/effects');
var restApi = require('@frontegg/rest-api');

const resetStateByKey = (key, initialState) => (state) => (Object.assign(Object.assign({}, state), { [key]: initialState[key] }));
const typeReducer = (key) => (state, { payload }) => (Object.assign(Object.assign({}, state), { [key]: payload }));
const typeReducerForKey = (key) => ({
    prepare: (payload) => ({ payload }),
    reducer: (state, { payload }) => {
        return Object.assign(Object.assign({}, state), { [key]: Object.assign(Object.assign({}, state[key]), payload) });
    },
});
const typeReducerNestedKey = (key, nestedKey) => ({
    prepare: (payload) => ({ payload }),
    reducer: (state, { payload }) => {
        var _a;
        return Object.assign(Object.assign({}, state), { [key]: Object.assign(Object.assign({}, state[key]), { [nestedKey]: Object.assign(Object.assign({}, (_a = state === null || state === void 0 ? void 0 : state[key]) === null || _a === void 0 ? void 0 : _a[nestedKey]), payload) }) });
    },
});
const loadersReducerForKey = (key) => ({
    prepare: (payload) => ({ payload }),
    reducer: (state, { payload }) => {
        var _a;
        return (Object.assign(Object.assign({}, state), { [key]: Object.assign(Object.assign({}, state[key]), { loaders: Object.assign(Object.assign({}, state[key].loaders), { [payload.key]: (_a = payload.value) !== null && _a !== void 0 ? _a : true }) }) }));
    },
});
const errorsReducerForKey = (key) => ({
    prepare: (payload) => ({ payload }),
    reducer: (state, { payload }) => {
        var _a;
        return (Object.assign(Object.assign({}, state), { [key]: Object.assign(Object.assign({}, state[key]), { errors: Object.assign(Object.assign({}, state[key].errors), { [payload.key]: (_a = payload.value) !== null && _a !== void 0 ? _a : true }) }) }));
    },
});
const delay = (delayTime = 500) => new Promise((resolve) => setTimeout(resolve, delayTime));
const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_';
const lookup = new Uint8Array(256);
for (let i = 0; i < chars.length; i++) {
    lookup[chars.charCodeAt(i)] = i;
}
const base64urlEncode = (arraybuffer) => {
    const bytes = new Uint8Array(arraybuffer);
    const len = bytes.length;
    let i;
    let base64url = '';
    for (i = 0; i < len; i += 3) {
        base64url += chars[bytes[i] >> 2];
        base64url += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];
        base64url += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];
        base64url += chars[bytes[i + 2] & 63];
    }
    if (len % 3 === 2) {
        base64url = base64url.substring(0, base64url.length - 1);
    }
    else if (len % 3 === 1) {
        base64url = base64url.substring(0, base64url.length - 2);
    }
    return base64url;
};
const base64urlDecode = (base64string) => {
    const bufferLength = base64string.length * 0.75;
    let len = base64string.length, i, p = 0, encoded1, encoded2, encoded3, encoded4;
    const bytes = new Uint8Array(bufferLength);
    for (i = 0; i < len; i += 4) {
        encoded1 = lookup[base64string.charCodeAt(i)];
        encoded2 = lookup[base64string.charCodeAt(i + 1)];
        encoded3 = lookup[base64string.charCodeAt(i + 2)];
        encoded4 = lookup[base64string.charCodeAt(i + 3)];
        bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);
        bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);
        bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);
    }
    return bytes.buffer;
};
const publicKeyCredentialToJSON = (pubKeyCred) => {
    if (pubKeyCred instanceof Array) {
        const arr = [];
        for (const i of pubKeyCred) {
            arr.push(publicKeyCredentialToJSON(i));
        }
        return arr;
    }
    else if (pubKeyCred instanceof ArrayBuffer) {
        return base64urlEncode(pubKeyCred);
    }
    else if (pubKeyCred instanceof Object) {
        const obj = {};
        for (const key in pubKeyCred) {
            obj[key] = publicKeyCredentialToJSON(pubKeyCred[key]);
        }
        return obj;
    }
    return pubKeyCred;
};

const reducers = {
    setVendorState: (state, { payload }) => (Object.assign(Object.assign({}, state), payload)),
};
const actions$1 = {
    loadVendorPublicInfo: toolkit.createAction(`${constants.vendorStoreName}/loadVendorPublicInfo`),
};

const initialState = {
    whiteLabelMode: false,
};
const { reducer, actions: sliceActions } = toolkit.createSlice({
    name: constants.vendorStoreName,
    initialState,
    reducers: Object.assign({}, reducers)
});
const actions = Object.assign(Object.assign({}, sliceActions), actions$1);

function* loadVendorPublicInfo() {
    try {
        const { whiteLabelMode = false } = yield restApi.api.vendor.getVendorPublicInfo();
        yield effects.put(actions.setVendorState({ whiteLabelMode }));
    }
    catch (e) {
        console.error('failed to getVendorPublicInfo - ', e);
    }
}
function* sagas() {
    yield effects.takeEvery(actions.loadVendorPublicInfo, loadVendorPublicInfo);
}

// export store
var vendorStore = {
    sagas,
    storeName: constants.vendorStoreName,
    initialState,
    reducer,
    actions,
};

exports.actions = actions;
exports.base64urlDecode = base64urlDecode;
exports.delay = delay;
exports.errorsReducerForKey = errorsReducerForKey;
exports.initialState = initialState;
exports.loadVendorPublicInfo = loadVendorPublicInfo;
exports.loadersReducerForKey = loadersReducerForKey;
exports.publicKeyCredentialToJSON = publicKeyCredentialToJSON;
exports.reducer = reducer;
exports.resetStateByKey = resetStateByKey;
exports.sagas = sagas;
exports.typeReducer = typeReducer;
exports.typeReducerForKey = typeReducerForKey;
exports.typeReducerNestedKey = typeReducerNestedKey;
exports.vendorStore = vendorStore;

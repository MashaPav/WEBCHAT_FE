'use strict';

var toolkit = require('@reduxjs/toolkit');
var vendor_index = require('./index-6906e508.js');
var restApi = require('@frontegg/rest-api');
var constants = require('./constants-52e37c08.js');
var tslib = require('tslib');
var effects = require('redux-saga/effects');
var uuid = require('uuid');
var audits_index = require('./audits/index.js');
var connectivity_index = require('./connectivity/index.js');
var subscriptions_index = require('./subscriptions/index.js');
var saga = require('./saga-b0d1a607.js');
var createSagaMiddleware = require('redux-saga');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var createSagaMiddleware__default = /*#__PURE__*/_interopDefaultLegacy(createSagaMiddleware);

exports.LoginStep = void 0;
(function (LoginStep) {
    LoginStep["preLogin"] = "preLogin";
    LoginStep["magicLinkPreLoginSuccess"] = "magicLinkPreLoginSuccess";
    LoginStep["loginWithSmsOtc"] = "loginWithSmsOtc";
    LoginStep["loginWithQuickSmsOtc"] = "loginWithQuickSmsOtc";
    LoginStep["loginWithOtc"] = "loginWithOtc";
    LoginStep["loginWithPassword"] = "loginWithPassword";
    LoginStep["loginWithTwoFactor"] = "loginWithTwoFactor";
    LoginStep["redirectToSSO"] = "redirectToSSO";
    LoginStep["loginWithSSOFailed"] = "loginWithSSOFailed";
    LoginStep["success"] = "success";
    LoginStep["forceTwoFactor"] = "forceTwoFactor";
    LoginStep["recoverTwoFactor"] = "recoverTwoFactor";
})(exports.LoginStep || (exports.LoginStep = {}));
exports.LoginFlow = void 0;
(function (LoginFlow) {
    LoginFlow["Login"] = "login";
    LoginFlow["RegisterQuickLogin"] = "registerQuickLogin";
})(exports.LoginFlow || (exports.LoginFlow = {}));
exports.QuickLoginStrategy = void 0;
(function (QuickLoginStrategy) {
    QuickLoginStrategy["Internal"] = "internal";
    QuickLoginStrategy["UsbKey"] = "usb-key";
    QuickLoginStrategy["Android"] = "android";
    QuickLoginStrategy["Sms"] = "sms";
})(exports.QuickLoginStrategy || (exports.QuickLoginStrategy = {}));

const loginState = {
    flow: exports.LoginFlow.Login,
    step: exports.LoginStep.preLogin,
    loading: false,
    email: '',
    tenants: [],
};
const reducers$h = {
    setLoginState: vendor_index.typeReducerForKey('loginState'),
    resetLoginState: vendor_index.resetStateByKey('loginState', { loginState }),
};
const actions$i = {
    requestAuthorize: toolkit.createAction(`${constants.authStoreName}/requestAuthorize`, (payload = false) => ({ payload })),
    requestAuthorizeSSR: toolkit.createAction(`${constants.authStoreName}/requestAuthorizeSSR`, (payload) => ({ payload })),
    requestHostedLoginAuthorize: toolkit.createAction(`${constants.authStoreName}/requestHostedLoginAuthorize`),
    handleHostedLoginCallback: toolkit.createAction(`${constants.authStoreName}/handleHostedLoginCallback`, (payload) => ({ payload })),
    afterAuthNavigation: toolkit.createAction(`${constants.authStoreName}/afterAuthNavigation`),
    preLogin: toolkit.createAction(`${constants.authStoreName}/preLogin`, (payload) => ({ payload })),
    postLogin: toolkit.createAction(`${constants.authStoreName}/postLogin`, (payload) => ({ payload })),
    login: toolkit.createAction(`${constants.authStoreName}/login`, (payload) => ({ payload })),
    loginWithMfa: toolkit.createAction(`${constants.authStoreName}/loginWithMfa`, (payload) => ({ payload })),
    recoverMfa: toolkit.createAction(`${constants.authStoreName}/recoverMfa`, (payload) => ({ payload })),
    logout: toolkit.createAction(`${constants.authStoreName}/logout`, (payload) => ({ payload })),
    silentLogout: toolkit.createAction(`${constants.authStoreName}/silentLogout`, (payload) => ({ payload })),
    checkIfAllowToRememberMfaDevice: toolkit.createAction(`${constants.authStoreName}/checkIfAllowToRememberMfaDevice`, (payload) => ({ payload })),
    changePhoneNumberWithVerification: toolkit.createAction(`${constants.authStoreName}/changePhoneNumberWithVerification`, (payload) => ({ payload })),
    verifyChangePhoneNumber: toolkit.createAction(`${constants.authStoreName}/verifyChangePhoneNumber`, (payload) => ({ payload })),
    quickSmsPasswordlessPreLogin: toolkit.createAction(`${constants.authStoreName}/quickSmsPasswordlessPreLogin`, (payload) => ({ payload })),
    passwordlessPreLogin: toolkit.createAction(`${constants.authStoreName}/passwordlessPreLogin`, (payload) => ({ payload })),
    passwordlessPostLogin: toolkit.createAction(`${constants.authStoreName}/passwordlessPostLogin`, (payload) => ({ payload })),
    verifyInviteToken: toolkit.createAction(`${constants.authStoreName}/verifyInviteToken`, (payload) => ({ payload })),
    webAuthnPrelogin: toolkit.createAction(`${constants.authStoreName}/webAuthnPrelogin`, (payload) => ({ payload })),
    webAuthnPostLogin: toolkit.createAction(`${constants.authStoreName}/webAuthnPostLogin`, (payload) => ({ payload })),
    webAuthnCreateNewDeviceSession: toolkit.createAction(`${constants.authStoreName}/webAuthnCreateNewDeviceSession`, (payload) => ({ payload })),
    webAuthnVerifyNewDeviceSession: toolkit.createAction(`${constants.authStoreName}/webAuthnVerifyNewDeviceSession`, (payload) => ({ payload })),
};

exports.ActivateAccountStep = void 0;
(function (ActivateAccountStep) {
    ActivateAccountStep["activating"] = "activating";
    ActivateAccountStep["success"] = "success";
    ActivateAccountStep["resend"] = "resend";
    ActivateAccountStep["activatingForm"] = "activatingForm";
})(exports.ActivateAccountStep || (exports.ActivateAccountStep = {}));

const activateState = {
    step: exports.ActivateAccountStep.activating,
    loading: false,
    resentEmail: false,
    activationStrategy: {
        loading: false,
    },
};
const reducers$g = {
    setActivateState: vendor_index.typeReducerForKey('activateState'),
    resetActivateState: vendor_index.resetStateByKey('activateState', { activateState }),
    setActivateStrategyState: vendor_index.typeReducerNestedKey('activateState', 'activationStrategy'),
};
const actions$h = {
    activateAccount: toolkit.createAction(`${constants.authStoreName}/activateAccount`, (payload) => ({ payload })),
    preActivateAccount: toolkit.createAction(`${constants.authStoreName}/preActivateAccount`, (payload) => ({ payload })),
    getActivateAccountStrategy: toolkit.createAction(`${constants.authStoreName}/getActivateAccountStrategy`, (payload) => ({ payload })),
    resendActivationEmail: toolkit.createAction(`${constants.authStoreName}/resendActivationEmail`, (payload) => ({
        payload,
    })),
};

exports.AcceptInvitationStep = void 0;
(function (AcceptInvitationStep) {
    AcceptInvitationStep["validate"] = "validate";
    AcceptInvitationStep["invalid"] = "invalid";
    AcceptInvitationStep["pending"] = "pending";
    AcceptInvitationStep["success"] = "success";
    AcceptInvitationStep["failed"] = "failed";
})(exports.AcceptInvitationStep || (exports.AcceptInvitationStep = {}));

const acceptInvitationState = {
    step: exports.AcceptInvitationStep.validate,
};
const reducers$f = {
    setAcceptInvitationState: vendor_index.typeReducerForKey('acceptInvitationState'),
    resetAcceptInvitationState: vendor_index.resetStateByKey('acceptInvitationState', {
        acceptInvitationState,
    }),
};
const actions$g = {
    acceptInvitation: toolkit.createAction(`${constants.authStoreName}/acceptInvitation`, (payload) => ({ payload })),
};

exports.ForgotPasswordStep = void 0;
(function (ForgotPasswordStep) {
    ForgotPasswordStep["forgotPassword"] = "forgotPassword";
    ForgotPasswordStep["success"] = "success";
})(exports.ForgotPasswordStep || (exports.ForgotPasswordStep = {}));

const forgotPasswordState = {
    step: exports.ForgotPasswordStep.forgotPassword,
    loading: false,
    email: '',
    passwordConfig: null,
};
const reducers$e = {
    setForgotPasswordState: vendor_index.typeReducerForKey('forgotPasswordState'),
    resetForgotPasswordState: vendor_index.resetStateByKey('forgotPasswordState', { forgotPasswordState }),
};
const actions$f = {
    forgotPassword: toolkit.createAction(`${constants.authStoreName}/forgotPassword`, (payload) => ({ payload })),
    resetPassword: toolkit.createAction(`${constants.authStoreName}/resetPassword`, (payload) => ({ payload })),
    loadPasswordConfig: toolkit.createAction(`${constants.authStoreName}/loadPasswordConfig`, (payload) => ({
        payload,
    })),
};

exports.ResetPhoneNumberStep = void 0;
(function (ResetPhoneNumberStep) {
    ResetPhoneNumberStep["ResetPhoneNumber"] = "ResetPhoneNumber";
    ResetPhoneNumberStep["VerifyResetPhoneNumber"] = "VerifyResetPhoneNumber";
    ResetPhoneNumberStep["ChangePhoneNumber"] = "ChangePhoneNumber";
})(exports.ResetPhoneNumberStep || (exports.ResetPhoneNumberStep = {}));

const resetPhoneNumberState = {
    step: exports.ResetPhoneNumberStep.ResetPhoneNumber,
    loading: false,
};
const reducers$d = {
    setResetPhoneNumberState: vendor_index.typeReducerForKey('resetPhoneNumberState'),
    resetResetPhoneNumberState: vendor_index.resetStateByKey('resetPhoneNumberState', { resetPhoneNumberState }),
};
const actions$e = {
    resetPhoneNumber: toolkit.createAction(`${constants.authStoreName}/resetPhoneNumber`, (payload) => ({ payload })),
    verifyResetPhoneNumber: toolkit.createAction(`${constants.authStoreName}/verifyResetPhoneNumber`, (payload) => ({ payload })),
    changePhoneNumber: toolkit.createAction(`${constants.authStoreName}/changePhoneNumber`, (payload) => ({ payload })),
};

const ssoState = {
    firstLoad: true,
    loading: true,
    saving: false,
    errors: {},
    loaders: {},
    ssoConfigurations: []
};
const reducers$c = {
    setSSOLoader: vendor_index.loadersReducerForKey('ssoState'),
    setSSOError: vendor_index.errorsReducerForKey('ssoState'),
    setSSOState: vendor_index.typeReducerForKey('ssoState'),
    resetSSOState: vendor_index.resetStateByKey('ssoState', { ssoState }),
};
const actions$d = {
    loadSSOConfigurationsV2: toolkit.createAction(`${constants.authStoreName}/loadSSOConfigurationsV2`),
    saveSSOConfigurationV2: toolkit.createAction(`${constants.authStoreName}/saveSSOConfigurationV2`, (payload) => ({ payload })),
    updateSSOConfiguration: toolkit.createAction(`${constants.authStoreName}/updateSSOConfiguration`, (payload) => ({ payload })),
    deleteSSOConfiguration: toolkit.createAction(`${constants.authStoreName}/deleteSSOConfiguration`, (payload) => ({ payload })),
    saveSSODomain: toolkit.createAction(`${constants.authStoreName}/saveSSODomain`, (payload) => ({ payload })),
    deleteSSODomain: toolkit.createAction(`${constants.authStoreName}/deleteSSODomain`, (payload) => ({ payload })),
    validateSSODomainV2: toolkit.createAction(`${constants.authStoreName}/validateSSODomainV2`, (payload) => ({ payload })),
    setSSODefaultRoles: toolkit.createAction(`${constants.authStoreName}/setSSODefaultRoles`, (payload) => ({ payload })),
    setSSOGroups: toolkit.createAction(`${constants.authStoreName}/setSSOGroups`, (payload) => ({ payload })),
    updateSSOGroups: toolkit.createAction(`${constants.authStoreName}/updateSSOGroups`, (payload) => ({ payload })),
    saveSSOConfigurationByMetadata: toolkit.createAction(`${constants.authStoreName}/saveSSOConfigurationByMetadata`, (payload) => ({ payload })),
    updateSSOConfigurationByMetadata: toolkit.createAction(`${constants.authStoreName}/updateSSOConfigurationByMetadata`, (payload) => ({ payload })),
    loadSSOConfigurations: toolkit.createAction(`${constants.authStoreName}/loadSSOConfigurations`),
    loadSSOAuthorizationRoles: toolkit.createAction(`${constants.authStoreName}/loadSSOAuthorizationRoles`),
    saveSSOConfigurations: toolkit.createAction(`${constants.authStoreName}/saveSSOConfigurations`, (payload) => ({ payload })),
    // NOTE: use withCallback in case of promise response
    saveSSOConfigurationsFile: toolkit.createAction(`${constants.authStoreName}/saveSSOConfigurationsFile`, (payload) => ({
        payload,
    })),
    saveSSOConfigurationsFileWithCallback: toolkit.createAction(`${constants.authStoreName}/saveSSOConfigurationsFileWithCallback`, (payload) => ({ payload })),
    validateSSODomain: toolkit.createAction(`${constants.authStoreName}/validateSSODomain`, (payload) => ({ payload })),
    updateSSOAuthorizationRoles: toolkit.createAction(`${constants.authStoreName}/updateSSOAuthorizationRoles`, (payload) => ({ payload })),
    deleteSamlGroup: toolkit.createAction(`${constants.authStoreName}/deleteSamlGroup`, (payload) => ({ payload })),
    createSamlGroup: toolkit.createAction(`${constants.authStoreName}/createSamlGroup`, (payload) => ({ payload })),
    oidcPostlogin: toolkit.createAction(`${constants.authStoreName}/oidcPostlogin`, (payload) => ({
        payload,
    })),
};

const profileState = {
    loading: false,
    error: null,
};
const reducers$b = {
    setProfileState: vendor_index.typeReducerForKey('profileState'),
    resetProfileState: vendor_index.resetStateByKey('profileState', { profileState }),
};
const actions$c = {
    loadProfile: toolkit.createAction(`${constants.authStoreName}/loadProfile`),
    saveProfile: toolkit.createAction(`${constants.authStoreName}/saveProfile`, (payload) => ({ payload })),
    changePassword: toolkit.createAction(`${constants.authStoreName}/changePassword`, (payload) => ({
        payload,
    })),
};

exports.MFAStep = void 0;
(function (MFAStep) {
    MFAStep["verify"] = "verify";
    MFAStep["recoveryCode"] = "recoveryCode";
})(exports.MFAStep || (exports.MFAStep = {}));

const mfaState = {
    step: exports.MFAStep.verify,
    loading: false,
};
const reducers$a = {
    setMfaState: vendor_index.typeReducerForKey('mfaState'),
    resetMfaState: vendor_index.resetStateByKey('mfaState', { mfaState }),
};
const actions$b = {
    enrollMfa: toolkit.createAction(`${constants.authStoreName}/enrollMfa`),
    verifyMfa: toolkit.createAction(`${constants.authStoreName}/verifyMfa`, (payload) => ({
        payload,
    })),
    verifyMfaAfterForce: toolkit.createAction(`${constants.authStoreName}/verifyMfaAfterForce`, (payload) => ({
        payload,
    })),
    disableMfa: toolkit.createAction(`${constants.authStoreName}/disableMfa`, (payload) => ({ payload })),
};

const teamState = {
    loaders: {},
    pageOffset: 0,
    pageSize: 20,
    errors: {},
    users: [],
    allUsers: [],
    roles: [],
    permissions: [],
    totalPages: 0,
    filter: [],
    sort: [],
    allUsersQueryParams: {
        _filter: null,
        _offset: 0,
        _limit: 20,
        _order: 'DESC',
        _sortBy: 'name',
    },
    addUserDialogState: {
        loading: false,
        open: false,
    },
    deleteUserDialogState: {
        loading: false,
        open: false,
    },
    lockUserDialogState: {
        loading: false,
        open: false,
    },
};
const reducers$9 = {
    setTeamLoader: vendor_index.loadersReducerForKey('teamState'),
    setTeamError: vendor_index.errorsReducerForKey('teamState'),
    setTeamState: vendor_index.typeReducerForKey('teamState'),
    resetTeamState: vendor_index.resetStateByKey('teamState', { teamState }),
};
const actions$a = {
    loadUsers: toolkit.createAction(`${constants.authStoreName}/loadUsers`, (payload) => ({ payload })),
    loadAllSubTenantsUsers: toolkit.createAction(`${constants.authStoreName}/loadAllSubTenantsUsers`, (payload) => ({ payload })),
    loadRoles: toolkit.createAction(`${constants.authStoreName}/loadRoles`, (payload) => ({ payload })),
    addUser: toolkit.createAction(`${constants.authStoreName}/addUser`, (payload) => ({ payload })),
    addUserToSubTenants: toolkit.createAction(`${constants.authStoreName}/addUserToSubTenants`, (payload) => ({ payload })),
    updateUser: toolkit.createAction(`${constants.authStoreName}/updateUser`, (payload) => ({
        payload,
    })),
    deleteUser: toolkit.createAction(`${constants.authStoreName}/deleteUser`, (payload) => ({ payload })),
    setUserRolesForSubTenants: toolkit.createAction(`${constants.authStoreName}/setUserRolesForSubTenants`, (payload) => ({ payload })),
    deleteUserFromSubTenants: toolkit.createAction(`${constants.authStoreName}/deleteUserFromSubTenants`, (payload) => ({ payload })),
    lockUser: toolkit.createAction(`${constants.authStoreName}/lockUser`, (payload) => ({ payload })),
    resendActivationLink: toolkit.createAction(`${constants.authStoreName}/resendActivationLink`, (payload) => ({ payload })),
    resendInvitationLink: toolkit.createAction(`${constants.authStoreName}/resendInvitationLink`, (payload) => ({ payload })),
    resendInvitationLinkToAllSubTenants: toolkit.createAction(`${constants.authStoreName}/resendInvitationLinkToAllSubTenants`, (payload) => ({ payload })),
    getInvitationLink: toolkit.createAction(`${constants.authStoreName}/getInvitationLink`),
    createInvitationLink: toolkit.createAction(`${constants.authStoreName}/createInvitationLink`, (payload) => ({ payload })),
    updateInvitationLink: toolkit.createAction(`${constants.authStoreName}/updateInvitationLink`, (payload) => ({ payload })),
    deleteInvitationLink: toolkit.createAction(`${constants.authStoreName}/deleteInvitationLink`, (payload) => ({ payload })),
    openAddUserDialog: toolkit.createAction(`${constants.authStoreName}/openAddUserDialog`, (payload) => ({ payload })),
    closeAddUserDialog: toolkit.createAction(`${constants.authStoreName}/closeAddUserDialog`, (payload) => ({ payload })),
    openDeleteUserDialog: toolkit.createAction(`${constants.authStoreName}/openDeleteUserDialog`, (payload) => ({
        payload,
    })),
    closeDeleteUserDialog: toolkit.createAction(`${constants.authStoreName}/closeDeleteUserDialog`, (payload) => ({ payload })),
    openLockUserDialog: toolkit.createAction(`${constants.authStoreName}/openLockUserDialog`, (payload) => ({
        payload,
    })),
    closeLockUserDialog: toolkit.createAction(`${constants.authStoreName}/closeLockUserDialog`, (payload) => ({ payload })),
};

const socialLoginState = {
    firstLoad: true,
    loading: false,
    error: '',
};
const reducers$8 = {
    setSocialLoginsState: vendor_index.typeReducerForKey('socialLoginState'),
    resetSocialLoginsState: vendor_index.resetStateByKey('socialLoginState', { socialLoginState }),
};
const actions$9 = {
    loadSocialLoginsConfiguration: toolkit.createAction(`${constants.authStoreName}/loadSocialLoginsConfiguration`),
    loadSocialLoginsConfigurationV2: toolkit.createAction(`${constants.authStoreName}/loadSocialLoginsConfigurationV2`),
    loginViaSocialLogin: toolkit.createAction(`${constants.authStoreName}/loginViaSocialLogin`, (payload) => ({
        payload,
    })),
    setSocialLoginError: toolkit.createAction(`${constants.authStoreName}/setSocialLoginError`, (payload) => ({
        payload,
    })),
};

exports.SignUpStage = void 0;
(function (SignUpStage) {
    SignUpStage["SignUp"] = "SignUp";
    SignUpStage["SignUpSuccess"] = "SignUpSuccess";
})(exports.SignUpStage || (exports.SignUpStage = {}));

const signUpState = {
    loading: false,
    allowSignUps: false,
    allowNotVerifiedUsersLogin: false,
    firstLoad: true,
    stage: exports.SignUpStage.SignUp,
};
const reducers$7 = {
    setSignUpState: vendor_index.typeReducerForKey('signUpState'),
    resetSignUpState: vendor_index.resetStateByKey('signUpState', { signUpState }),
};
const actions$8 = {
    signUpUser: toolkit.createAction(`${constants.authStoreName}/signUpUser`, (payload) => ({ payload })),
    resetSignUpStateSoft: toolkit.createAction(`${constants.authStoreName}/resetSignUpStateSoft`),
};

const apiTokensState = {
    apiTokenType: null,
    searchValue: '',
    showAddTokenDialog: false,
    createdByUserIdColumn: 'show',
    deleteTokenDialog: {
        open: false,
        clientId: '',
    },
    successDialog: {
        open: false,
        secret: '',
        clientId: '',
    },
    loaders: {},
    apiTokensDataTenant: [],
    apiTokensDataUser: [],
    roles: [],
    permissions: [],
    errors: {},
};
const reducers$6 = {
    setApiTokensLoader: vendor_index.loadersReducerForKey('apiTokensState'),
    setApiTokensError: vendor_index.errorsReducerForKey('apiTokensState'),
    setApiTokensState: vendor_index.typeReducerForKey('apiTokensState'),
    resetApiTokensState: vendor_index.resetStateByKey('apiTokensState', { apiTokensState }),
};
const actions$7 = {
    loadApiTokens: toolkit.createAction(`${constants.authStoreName}/loadApiTokens`, (payload) => ({
        payload,
    })),
    initApiTokensData: toolkit.createAction(`${constants.authStoreName}/initApiTokensData`, (payload) => ({ payload })),
    addTenantApiToken: toolkit.createAction(`${constants.authStoreName}/addTenantApiToken`, (payload) => ({
        payload,
    })),
    addUserApiToken: toolkit.createAction(`${constants.authStoreName}/addUserApiToken`, (payload) => ({ payload })),
    deleteUserApiToken: toolkit.createAction(`${constants.authStoreName}/deleteUserApiToken`, (payload) => ({ payload })),
    deleteTenantApiToken: toolkit.createAction(`${constants.authStoreName}/deleteTenantApiToken`, (payload) => ({ payload })),
};

const securityPolicyState = {
    globalPolicy: {
        loading: true,
    },
    publicPolicy: {
        loading: false,
    },
    vendorMfaPolicy: {
        loading: true,
    },
    mfaPolicy: {
        loading: true,
    },
    lockoutPolicy: {
        loading: true,
    },
    captchaPolicy: {
        loading: true,
    },
    passwordHistoryPolicy: {
        loading: true,
    },
    passwordPolicy: {
        loading: true,
    },
    publicAuthStrategyPolicy: {
        loading: true,
    },
};
const reducers$5 = {
    setSecurityPolicyState: vendor_index.typeReducerForKey('securityPolicyState'),
    setSecurityPolicyGlobalState: vendor_index.typeReducerNestedKey('securityPolicyState', 'globalPolicy'),
    setSecurityPolicyPublicState: vendor_index.typeReducerNestedKey('securityPolicyState', 'publicPolicy'),
    setSecurityPolicyAuthStrategyPublicState: vendor_index.typeReducerNestedKey('securityPolicyState', 'publicAuthStrategyPolicy'),
    setSecurityPolicyMfaState: vendor_index.typeReducerNestedKey('securityPolicyState', 'mfaPolicy'),
    setSecurityPolicyVendorMfaState: vendor_index.typeReducerNestedKey('securityPolicyState', 'vendorMfaPolicy'),
    setSecurityPolicyLockoutState: vendor_index.typeReducerNestedKey('securityPolicyState', 'lockoutPolicy'),
    setSecurityPolicyCaptchaState: vendor_index.typeReducerNestedKey('securityPolicyState', 'captchaPolicy'),
    setSecurityPolicyPasswordHistoryState: vendor_index.typeReducerNestedKey('securityPolicyState', 'passwordHistoryPolicy'),
    setSecurityPolicyPasswordState: vendor_index.typeReducerNestedKey('securityPolicyState', 'passwordPolicy'),
    resetSecurityPolicyState: vendor_index.resetStateByKey('securityPolicyState', { securityPolicyState }),
};
const actions$6 = {
    loadSecurityPolicy: toolkit.createAction(`${constants.authStoreName}/loadSecurityPolicy`),
    loadPublicSecurityPolicy: toolkit.createAction(`${constants.authStoreName}/loadPublicSecurityPolicy`),
    loadSecurityPolicyMfa: toolkit.createAction(`${constants.authStoreName}/loadSecurityPolicyMfa`),
    loadSecurityPolicyVendorMfa: toolkit.createAction(`${constants.authStoreName}/loadSecurityPolicyVendorMfa`),
    saveSecurityPolicyMfa: toolkit.createAction(`${constants.authStoreName}/saveSecurityPolicyMfa`, (payload) => ({ payload })),
    loadSecurityPolicyLockout: toolkit.createAction(`${constants.authStoreName}/loadSecurityPolicyLockout`),
    saveSecurityPolicyLockout: toolkit.createAction(`${constants.authStoreName}/saveSecurityPolicyLockout`, (payload) => ({ payload })),
    loadSecurityPolicyCaptcha: toolkit.createAction(`${constants.authStoreName}/loadSecurityPolicyCaptcha`),
    loadSecurityPolicyPasswordHistory: toolkit.createAction(`${constants.authStoreName}/loadSecurityPolicyPasswordHistory`),
    saveSecurityPolicyPasswordHistory: toolkit.createAction(`${constants.authStoreName}/saveSecurityPolicyPasswordHistory`, (payload) => ({ payload })),
    loadVendorPasswordConfig: toolkit.createAction(`${constants.authStoreName}/loadVendorPasswordConfig`),
    loadPublicAuthStrategiesPolicy: toolkit.createAction(`${constants.authStoreName}/loadPublicAuthStrategiesPolicy`),
};

const accountSettingsState = {
    loading: false,
};
const reducers$4 = {
    setAccountSettingsState: vendor_index.typeReducerForKey('accountSettingsState'),
    resetAccountSettingsState: vendor_index.resetStateByKey('accountSettingsState', { accountSettingsState }),
};
const actions$5 = {
    loadAccountSettings: toolkit.createAction(`${constants.authStoreName}/loadAccountSettings`, (payload) => ({ payload })),
    saveAccountSettings: toolkit.createAction(`${constants.authStoreName}/saveAccountSettings`, (payload) => ({ payload })),
};

const tenantsState = {
    tenants: [],
    subTenants: [],
    loading: true,
    tenantTree: null,
};
const reducers$3 = {
    setTenantsState: vendor_index.typeReducerForKey('tenantsState'),
    resetTenantsState: vendor_index.resetStateByKey('tenantsState', { tenantsState }),
};
const actions$4 = {
    switchTenant: toolkit.createAction(`${constants.authStoreName}/switchTenant`, (payload) => ({ payload })),
    loadTenants: toolkit.createAction(`${constants.authStoreName}/loadTenants`, (payload) => ({
        payload,
    })),
    loadSubTenants: toolkit.createAction(`${constants.authStoreName}/loadSubTenants`, (payload) => ({
        payload,
    })),
    loadSubTenantsTree: toolkit.createAction(`${constants.authStoreName}/loadSubTenantsTree`, (payload) => ({
        payload,
    })),
};

const rolesState = {
    loading: false,
    roles: [],
    permissions: [],
    permissionCategories: [],
};
const reducers$2 = {
    setRolesState: vendor_index.typeReducerForKey('rolesState'),
    resetRolesState: vendor_index.resetStateByKey('rolesState', { rolesState }),
};
const actions$3 = {
    loadRolesAndPermissions: toolkit.createAction(`${constants.authStoreName}/loadRoles`, (payload) => ({ payload })),
    addRole: toolkit.createAction(`${constants.authStoreName}/addRole`, (payload) => ({ payload })),
    updateRole: toolkit.createAction(`${constants.authStoreName}/updateRole`, (payload) => ({ payload })),
    deleteRole: toolkit.createAction(`${constants.authStoreName}/deleteRole`, (payload) => ({ payload })),
    attachPermissionsToRole: toolkit.createAction(`${constants.authStoreName}/attachPermissionsToRole`, (payload) => ({ payload })),
    attachPermissionToRoles: toolkit.createAction(`${constants.authStoreName}/attachPermissionToRoles`, (payload) => ({ payload })),
};

const sessionsState = {
    loading: false,
    sessions: [],
};
const reducers$1 = {
    setSessionsState: vendor_index.typeReducerForKey('sessionsState'),
    resetSessionsState: vendor_index.resetStateByKey('sessionsState', { sessionsState }),
};
const actions$2 = {
    loadUserSessions: toolkit.createAction(`${constants.authStoreName}/loadUserSessions`),
    loadCurrentUserSession: toolkit.createAction(`${constants.authStoreName}/loadCurrentUserSession`),
    deleteUserSession: toolkit.createAction(`${constants.authStoreName}/deleteUserSession`, (payload) => ({ payload })),
    deleteAllUserSessions: toolkit.createAction(`${constants.authStoreName}/deleteAllUserSessions`),
    revokeUserSessions: toolkit.createAction(`${constants.authStoreName}/revokeUserSessions`, (payload) => ({ payload })),
};

const sessionsPolicyState = {
    loading: false,
    configurations: {},
};
const reducers = {
    setSessionsPolicyState: vendor_index.typeReducerForKey('sessionsPolicyState'),
    resetSessionsPolicyState: vendor_index.resetStateByKey('sessionsPolicyState', { sessionsPolicyState }),
};
const actions$1 = {
    loadSessionsPolicy: toolkit.createAction(`${constants.authStoreName}/loadSessionsPolicy`),
    createOrUpdateSessionsPolicy: toolkit.createAction(`${constants.authStoreName}/createOrUpdateSessionsPolicy`, (payload) => ({ payload })),
};

const reinitializeState = {
    isAuthenticated: false,
    isLoading: true,
    isSSOAuth: false,
    user: null,
    signUpState,
    loginState,
    activateState,
    acceptInvitationState,
    forgotPasswordState,
    ssoState,
    profileState,
    mfaState,
    teamState,
    socialLoginState,
    apiTokensState,
    securityPolicyState,
    accountSettingsState,
    tenantsState,
    rolesState,
    resetPhoneNumberState,
    sessionsState,
    sessionsPolicyState,
};
const initialState$1 = Object.assign({ routes: {
        authenticatedUrl: '/',
        loginUrl: '/account/login',
        logoutUrl: '/account/logout',
        activateUrl: '/account/activate',
        acceptInvitationUrl: '/account/invitation/accept',
        forgetPasswordUrl: '/account/forget-password',
        resetPhoneNumberUrl: '/account/reset-phone-number',
        resetPasswordUrl: '/account/reset-password',
        socialLoginCallbackUrl: '/account/social/success',
        signUpUrl: '/account/sign-up',
        oidcRedirectUrl: '/account/oidc/callback',
        samlCallbackUrl: '/account/saml/callback',
        magicLinkCallbackUrl: '/account/login/magic-link',
        hostedLoginRedirectUrl: '/oauth/callback'
    }, onRedirectTo: () => { } }, reinitializeState);

const { reducer, actions: sliceActions } = toolkit.createSlice({
    name: constants.authStoreName,
    initialState: initialState$1,
    reducers: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ resetState: (state) => (Object.assign(Object.assign({}, state), reinitializeState)), setState: (state, { payload }) => (Object.assign(Object.assign({}, state), payload)), setUser: vendor_index.typeReducer('user') }, reducers$h), reducers$8), reducers$g), reducers$f), reducers$e), reducers$d), reducers$7), reducers$b), reducers$c), reducers$a), reducers$9), reducers$6), reducers$5), reducers$4), reducers$3), reducers$2), reducers$1), reducers),
});
const actions = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, sliceActions), actions$i), actions$9), actions$h), actions$g), actions$f), actions$e), actions$8), actions$c), actions$d), actions$b), actions$a), actions$7), actions$6), actions$5), actions$4), actions$3), actions$2), actions$1);

exports.SSOStateKeys = void 0;
(function (SSOStateKeys) {
    SSOStateKeys["LOAD_SSO_CONFIGURATIONS"] = "LOAD_SSO_CONFIGURATIONS";
    SSOStateKeys["SAVE_SSO_CONFIGURATION"] = "SAVE_SSO_CONFIGURATION";
    SSOStateKeys["UPDATE_SSO_CONFIGURATION"] = "UPDATE_SSO_CONFIGURATION";
    SSOStateKeys["SAVE_SSO_CONFIGURATION_BY_METADATA"] = "SAVE_SSO_CONFIGURATION_BY_METADATA";
    SSOStateKeys["UPDATE_SSO_CONFIGURATION_BY_METADATA"] = "UPDATE_SSO_CONFIGURATION";
    SSOStateKeys["DELETE_SSO_CONFIGURATION"] = "DELETE_SSO_CONFIGURATION";
    SSOStateKeys["SAVE_SSO_DOMAIN"] = "SAVE_SSO_DOMAIN";
    SSOStateKeys["DELETE_SSO_DOMAIN"] = "DELETE_SSO_DOMAIN";
    SSOStateKeys["VALIDATE_SSO_DOMAIN"] = "VALIDATE_SSO_DOMAIN";
    SSOStateKeys["UPDATE_SSO_DEFAULT_ROLES"] = "UPDATE_SSO_DEFAULT_ROLES";
    SSOStateKeys["DELETE_SSO_GROUPS"] = "DELETE_SSO_GROUPS";
    SSOStateKeys["SAVE_SSO_GROUPS"] = "SAVE_SSO_GROUPS";
    SSOStateKeys["GET_SSO_AUTHORIZATION_ROLES"] = "GET_SSO_AUTHORIZATION_ROLES";
})(exports.SSOStateKeys || (exports.SSOStateKeys = {}));
exports.SamlVendors = void 0;
(function (SamlVendors) {
    SamlVendors["Saml"] = "saml";
    SamlVendors["Okta"] = "okta";
    SamlVendors["Azure"] = "azure";
    SamlVendors["Google"] = "google";
    SamlVendors["Oidc"] = "oidc";
})(exports.SamlVendors || (exports.SamlVendors = {}));

function omitProps(props, keys) {
    const newProps = Object.assign({}, props);
    keys.forEach((key) => {
        delete newProps[key];
    });
    return newProps;
}
function generateCodeChallenge(codeVerifier) {
    return tslib.__awaiter(this, void 0, void 0, function* () {
        const digest = yield crypto.subtle.digest('SHA-256', new TextEncoder().encode(codeVerifier));
        // @ts-ignore
        return btoa(String.fromCharCode(...new Uint8Array(digest)))
            .replace(/=/g, '')
            .replace(/\+/g, '-')
            .replace(/\//g, '_');
    });
}
function createRandomString(length = 16) {
    let text = '';
    const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    for (let i = 0; i < length; i++) {
        text += possible.charAt(Math.floor(Math.random() * possible.length));
    }
    return text;
}
const readFileAsText = (file) => new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.readAsText(file);
    reader.onload = () => resolve(reader.result);
    reader.onerror = reject;
});

const apiTokensDataDemo = {
    clientId: 'CLIENT_ID_16806d3d-8fc3-4450-be97-abdaf66b723e',
    secret: 'SECRET_16806d3d-8fc3-4450-be97-abdaf66b723e',
    createdAt: 'createdAt',
    description: 'Demo API Token (preview only)',
};
const apiTokensDataTenantDemo = Object.assign(Object.assign({}, apiTokensDataDemo), { roleIds: [], tenantId: 'my-tenant-id', createdByUserId: 'createdByUserId' });
const roleDemo = [
    {
        id: 'roleId',
        key: 'admin',
        isDefault: false,
        name: 'Admin',
        description: null,
        permissions: ['adminPermissionId'],
        tenantId: 'tenantId',
        vendorId: 'vendorId',
        createdAt: new Date(),
        updatedAt: new Date(),
    },
];
const rolePermissionDemo = [
    {
        id: 'adminPermissionId',
        key: 'fe.*',
        name: 'General Admin',
        description: undefined,
        categoryId: 'category',
        fePermission: true,
        createdAt: new Date(),
        updatedAt: new Date(),
    },
];
const userProfileDemo = {
    id: 'testId',
    name: 'Demo User Name',
    email: 'demo-user@frontegg.com',
    mfaEnrolled: true,
    profileImage: undefined,
    profilePictureUrl: 'https://www.gravatar.com/avatar/42b2ad2bad6fc9b9db5086dfcf8072ac?d=https://ui-avatars.com/api/fe/128/random?t=1617261890875?t=1617261917434',
    roles: roleDemo,
    permissions: rolePermissionDemo,
    tenantId: 'my-tenant-id',
    tenantIds: ['my-tenant-id'],
    activatedForTenant: true,
    metadata: JSON.stringify({
        phoneNumber: '+972-54123456',
        jobTitle: 'Developer',
        address: {
            city: 'Tel Aviv',
            country: 'Israel',
        },
    }),
    roleIds: undefined,
    verified: undefined,
};
const userDemo = Object.assign(Object.assign({}, userProfileDemo), { accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1MTY5YmY0Zi02YmI5LTQ5NGMtOGNkZS05MDc4NDQ0NWY4MDciLCJuYW1lIjoiRHVtbXkgVXNlciIsImVtYWlsIjoiZHVtbXlAZnJvbnRlZ2cuY29tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsIm1ldGFkYXRhIjp7fSwicm9sZXMiOlsiYWRtaW4iXSwicGVybWlzc2lvbnMiOlsiZmUuKiJdLCJ0ZW5hbnRJZCI6Im15LXRlbmFudC1pZCIsInRlbmFudElkcyI6WyJteS10ZW5hbnQtaWQiXSwicHJvZmlsZVBpY3R1cmVVcmwiOiJodHRwczovL3d3dy5ncmF2YXRhci5jb20vYXZhdGFyLzQyYjJhZDJiYWQ2ZmM5YjlkYjUwODZkZmNmODA3MmFjP2Q9aHR0cHM6Ly91aS1hdmF0YXJzLmNvbS9hcGkvZmUvMTI4L3JhbmRvbT90PTE2MTcyNjE4OTA4NzU_dD0xNjE3MjYxOTE3NDM0IiwidHlwZSI6InVzZXJUb2tlbiIsImlhdCI6MTYxNzkwNjMyNCwiZXhwIjoxNjE3OTkyNzI0LCJpc3MiOiJmcm9udGVnZyJ9.paaXLkpWEWbQmUtoK2P8IwXCxK4WJp7XhXonvzF8g1I', expiresIn: 86400, mfaRequired: false, refreshToken: 'refresh-token-dummy-de39dc9c-9d22-4852-b7f5-c3c0aa613b58', type: 'userToken', iat: 1617906324, exp: 1617992724, iss: 'frontegg', email_verified: true });
const profileStateDemo = {
    loading: false,
    error: undefined,
    saving: true,
    profile: userProfileDemo,
};
const policyDemo = {
    id: 'id',
    enforceMFAType: 'DontForce',
    createdAt: new Date(),
    updatedAt: new Date(),
    allowOverrideEnforcePasswordHistory: true,
    allowOverridePasswordComplexity: false,
    allowOverridePasswordExpiration: false,
    allowSignups: true,
    apiTokensEnabled: true,
    cookieSameSite: 'cookieSameSite',
    defaultRefreshTokenExpiration: 0,
    defaultTokenExpiration: 1,
    publicKey: 'publicKey',
};
const publicSecurityPolicy = {
    allowSignups: true,
    allowNotVerifiedUsersLogin: false,
    apiTokensEnabled: true,
    forcePermissions: false,
    authStrategy: restApi.AuthStrategyEnum.EmailAndPassword,
};
const policyMfaDemo = {
    id: 'id',
    enforceMFAType: 'DontForce',
    createdAt: new Date(),
    updatedAt: new Date(),
};
const policyLockoutDemo = {
    id: 'id',
    enabled: true,
    maxAttempts: 1,
    createdAt: new Date(),
    updatedAt: new Date(),
};
const policyPasswordHistoryDemo = {
    id: 'id',
    enabled: true,
    historySize: 1,
    createdAt: new Date(),
    updatedAt: new Date(),
};
const samlConfigurationDemo = {
    enabled: true,
    domain: 'domain',
    validated: true,
    generatedVerification: 'generatedVerification',
    ssoEndpoint: 'ssoEndpoint',
    publicCertificate: 'publicCertificate',
    signRequest: true,
    createdAt: new Date(),
    updatedAt: new Date(),
    acsUrl: undefined,
    spEntityId: undefined,
    oidcClientId: undefined,
    oidcSecret: undefined,
    type: undefined,
};
const samlMetadataDemo = {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    properties: [],
    vendorId: 'vendorId',
    entityName: 'saml',
    isActive: true,
    configuration: {
        acsUrl: 'acsUrl',
        spEntityId: 'spEntityId',
    },
};
const rolesDemo = [
    {
        id: 'id',
        description: 'description',
        key: 'key',
        name: 'name',
        permissions: [],
        permissionLevel: 1,
    },
];
const ssoStateDemo = {
    firstLoad: false,
    loading: false,
    error: undefined,
    saving: false,
    samlConfiguration: samlConfigurationDemo,
    roles: rolesDemo,
    authorizationRoles: [],
    errors: {},
    loaders: {},
    ssoConfigurations: [],
};
const permissionsDemo = [
    {
        description: 'string',
        fePermission: true,
        id: 'id',
        key: 'key',
        name: 'name',
        roleIds: [],
        createdAt: new Date(),
        updatedAt: new Date(),
        categoryId: 'categoryId',
    },
];
const userTeamDemo2 = {
    id: 'id2',
    email: 'demo-user2@frontegg.com',
    name: 'Demo User Name2',
    phone: undefined,
    profileImage: undefined,
    profileImageUrl: undefined,
    tenantId: 'tenantId',
    vendorId: 'vendorId',
    roleIds: [],
    activatedForTenant: true,
    verified: false,
    createdAt: new Date().toISOString(),
    customData: undefined,
    lastLogin: undefined,
    mfaEnabled: undefined,
    roles: [],
}; // TODO add verified to ITeamUser
const userTeamDemo = {
    id: 'id',
    email: 'demo-user@frontegg.com',
    name: 'Demo User Name',
    phone: undefined,
    profileImage: undefined,
    profileImageUrl: undefined,
    tenantId: 'tenantId',
    vendorId: 'vendorId',
    roleIds: [],
    activatedForTenant: true,
    createdAt: new Date(2022, 4, 1).toISOString(),
    verified: true,
    customData: undefined,
    lastLogin: new Date(2022, 5, 25).toISOString(),
    mfaEnabled: undefined,
    roles: [],
};
const userSubTenantDemo = {
    metadata: '',
    mfaEnrolled: false,
    provider: '',
    sub: '',
    tenantIds: [],
    tenants: [],
    verified: false,
    id: 'id',
    email: 'email',
    name: 'name',
    tenantId: 'tenantId',
    createdAt: new Date(),
};
const usersDemo = [userTeamDemo, userTeamDemo2];
const allUsersDemo = [userSubTenantDemo];
const tenantsDemo = [
    {
        id: 'my-tenant-id',
        isReseller: false,
        name: 'Frontegg demo',
        deletedAt: null,
        metadata: undefined,
        tenantId: 'my-tenant-id',
        vendorId: 'vendorId',
        createdAt: new Date(),
        updatedAt: new Date(),
        address: undefined,
        timezone: undefined,
        dateFormat: undefined,
        timeFormat: undefined,
        currency: undefined,
        logo: undefined,
    },
];
const sessionsMock = [
    {
        id: `laptop`,
        userAgent: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.0 Safari/605.1.15",
        createdAt: new Date(),
        ipAddress: "190.194.88.251",
        current: true,
    },
    {
        id: `iphone`,
        userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 15_2_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.2 Mobile/15E148 Safari/604.1",
        createdAt: new Date(Date.now() - 10000),
        ipAddress: "191.49.203.21",
    },
    {
        id: `tablet`,
        userAgent: "Mozilla/5.0 (Linux; Android 6.0.1; SGP771 Build/32.2.A.0.253; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/52.0.2743.98 Safari/537.36",
        createdAt: new Date(Date.now() - 30000),
        ipAddress: "130.19.196.136",
    },
    {
        id: `anotherlaptop`,
        userAgent: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.0 Safari/605.1.15",
        createdAt: new Date(Date.now() - 1002232300),
        ipAddress: "2.228.163.92",
    }
];
const sessionsConfigDummies = {
    sessionConcurrentConfiguration: {
        isActive: true,
        maxSessions: 10,
    },
    sessionIdleTimeoutConfiguration: {
        isActive: true,
        timeout: 300
    },
    sessionTimeoutConfiguration: {
        isActive: true,
        timeout: 86400
    },
};

exports.UserVeirifedOriginTypes = void 0;
(function (UserVeirifedOriginTypes) {
    UserVeirifedOriginTypes["SOCIAL_LOGIN"] = "SOCIAL_LOGIN";
    UserVeirifedOriginTypes["PASSWORDLESS"] = "PASSWORDLESS";
    UserVeirifedOriginTypes["ACTIVATION_LINK"] = "ACTIVATION_LINK";
})(exports.UserVeirifedOriginTypes || (exports.UserVeirifedOriginTypes = {}));
exports.AuthenticationTypes = void 0;
(function (AuthenticationTypes) {
    AuthenticationTypes["SOCIAL_LOGIN"] = "SOCIAL_LOGIN";
    AuthenticationTypes["PASSWORD"] = "PASSWORD";
})(exports.AuthenticationTypes || (exports.AuthenticationTypes = {}));
exports.AdminPortalPagesForEvents = void 0;
(function (AdminPortalPagesForEvents) {
    AdminPortalPagesForEvents["profile"] = "profile";
    AdminPortalPagesForEvents["privacy"] = "privacy";
    AdminPortalPagesForEvents["personalApiTokens"] = "personalApiTokens";
    AdminPortalPagesForEvents["account"] = "account";
    AdminPortalPagesForEvents["users"] = "users";
    AdminPortalPagesForEvents["security"] = "security";
    AdminPortalPagesForEvents["sso"] = "sso";
    AdminPortalPagesForEvents["audits"] = "audits";
    AdminPortalPagesForEvents["webhooks"] = "webhooks";
    AdminPortalPagesForEvents["apiTokens"] = "apiTokens";
    AdminPortalPagesForEvents["roles"] = "roles";
    AdminPortalPagesForEvents["subscriptions"] = "subscription";
})(exports.AdminPortalPagesForEvents || (exports.AdminPortalPagesForEvents = {}));
const AdminPortalPages = {
    profile: exports.AdminPortalPagesForEvents.profile,
    privacy: exports.AdminPortalPagesForEvents.privacy,
    personalApiTokens: exports.AdminPortalPagesForEvents.personalApiTokens,
    account: exports.AdminPortalPagesForEvents.account,
    users: exports.AdminPortalPagesForEvents.users,
    security: exports.AdminPortalPagesForEvents.security,
    sso: exports.AdminPortalPagesForEvents.sso,
    audits: exports.AdminPortalPagesForEvents.audits,
    webhooks: exports.AdminPortalPagesForEvents.webhooks,
    apiTokens: exports.AdminPortalPagesForEvents.apiTokens,
    roles: exports.AdminPortalPagesForEvents.roles,
    subscriptions: exports.AdminPortalPagesForEvents.subscriptions,
};

function* loadAllowSignUps() {
    yield effects.put(actions.setSignUpState({ loading: true }));
    try {
        const policy = yield effects.call(restApi.api.auth.getVendorConfig);
        const { allowSignups: allowSignUps, allowNotVerifiedUsersLogin } = policy;
        yield effects.put(actions.setSignUpState({ loading: false, allowSignUps, allowNotVerifiedUsersLogin, firstLoad: false }));
        yield effects.put(actions.setSecurityPolicyPublicState({ policy, loading: false }));
    }
    catch (e) {
        yield effects.put(actions.setSignUpState({ loading: false, error: e.message, firstLoad: false }));
    }
}
function* signUpUser(_a) {
    var _b;
    var _c = _a.payload, { events, url } = _c, payload = tslib.__rest(_c, ["events", "url"]);
    yield effects.put(actions.setSignUpState({ loading: true }));
    try {
        const { routes, onRedirectTo } = yield effects.select((state) => state.auth);
        const { shouldActivate, user, tenantId, userId } = yield effects.call(restApi.api.auth.signUpUser, payload);
        if (!payload.invitationToken) {
            const { email, name, companyName } = payload;
            (_b = events === null || events === void 0 ? void 0 : events.signUpComplete) === null || _b === void 0 ? void 0 : _b.call(events, {
                email,
                name,
                companyName,
                url,
                authenticationType: exports.AuthenticationTypes.PASSWORD,
                id: userId,
                tenantId,
                createdAt: new Date(),
            });
        }
        restApi.ContextHolder.setAccessToken(user === null || user === void 0 ? void 0 : user.accessToken);
        restApi.ContextHolder.setUser(user);
        if (!shouldActivate && (user === null || user === void 0 ? void 0 : user.mfaRequired) && (user === null || user === void 0 ? void 0 : user.mfaToken)) {
            let step = exports.LoginStep.loginWithTwoFactor;
            if (user.hasOwnProperty('mfaEnrolled') && !user.mfaEnrolled) {
                yield effects.put(actions.setMfaState({
                    step: exports.MFAStep.verify,
                    qrCode: user.qrCode,
                    recoveryCode: user.recoveryCode,
                    mfaToken: user.mfaToken,
                    loading: false,
                }));
                step = exports.LoginStep.forceTwoFactor;
            }
            yield effects.put(actions.setLoginState({ step }));
            onRedirectTo(routes.loginUrl);
        }
        else {
            yield effects.put(actions.setSignUpState({ loading: false, shouldActivate, stage: exports.SignUpStage.SignUpSuccess }));
            yield effects.put(actions.setState({
                user,
                isAuthenticated: !!(user === null || user === void 0 ? void 0 : user.accessToken),
            }));
            if (!shouldActivate) {
                yield effects.put(actions.loadTenants());
            }
        }
    }
    catch (e) {
        restApi.ContextHolder.setAccessToken(null);
        restApi.ContextHolder.setUser(null);
        yield effects.put(actions.setSignUpState({ loading: false, error: e.message }));
    }
    yield effects.put(actions.setSignUpState({ loading: false }));
}
function* resetSignUpStateSoft() {
    const { allowSignUps, allowNotVerifiedUsersLogin } = yield effects.select((state) => state.auth.signUpState);
    yield effects.put(actions.resetSignUpState());
    yield effects.put(actions.setSignUpState({ allowSignUps, allowNotVerifiedUsersLogin }));
}
function* signUpSaga() {
    yield effects.takeLeading(actions.signUpUser, signUpUser);
    yield effects.takeLeading(actions.resetSignUpStateSoft, resetSignUpStateSoft);
}

function* loadSecurityPolicy() {
    yield effects.put(actions.setSecurityPolicyGlobalState({ loading: true, error: null }));
    try {
        const policy = yield effects.call(restApi.api.auth.getGlobalSecurityPolicy);
        yield effects.put(actions.setSecurityPolicyGlobalState({ policy, loading: false }));
    }
    catch (e) {
        yield effects.put(actions.setSecurityPolicyGlobalState({ error: e.message, loading: false }));
    }
    yield effects.put(actions.loadSecurityPolicyMfa());
    yield effects.put(actions.loadSecurityPolicyVendorMfa());
    yield effects.put(actions.loadSecurityPolicyLockout());
    yield effects.put(actions.loadSecurityPolicyCaptcha());
    yield effects.put(actions.loadPublicAuthStrategiesPolicy());
}
function* loadPublicSecurityPolicy() {
    yield effects.put(actions.setSecurityPolicyPublicState({ loading: true, error: null }));
    try {
        const policy = yield effects.call(restApi.api.auth.getVendorConfig);
        yield effects.put(actions.setSecurityPolicyPublicState({ policy, loading: false }));
    }
    catch (e) {
        yield effects.put(actions.setSecurityPolicyPublicState({ error: e.message, loading: false }));
    }
}
function* loadPublicAuthStrategiesPolicy() {
    yield effects.put(actions.setSecurityPolicyAuthStrategyPublicState({ loading: true, error: null }));
    try {
        const policy = yield effects.call(restApi.api.auth.getVendorPublicAuthStrategiesConfig);
        yield effects.put(actions.setSecurityPolicyAuthStrategyPublicState({ policy, loading: false }));
    }
    catch (e) {
        yield effects.put(actions.setSecurityPolicyAuthStrategyPublicState({ error: e.message, loading: false }));
    }
}
function* loadSecurityPolicyMfa() {
    yield effects.put(actions.setSecurityPolicyMfaState({ loading: true, error: null }));
    try {
        const policy = yield effects.call(restApi.api.auth.getMfaPolicy);
        yield effects.put(actions.setSecurityPolicyMfaState({ policy, loading: false }));
    }
    catch (e) {
        yield effects.put(actions.setSecurityPolicyMfaState({ error: e.message, loading: false }));
    }
}
function* loadSecurityPolicyVendorMfa() {
    yield effects.put(actions.setSecurityPolicyMfaState({ loading: true, error: null }));
    try {
        const policy = yield effects.call(restApi.api.auth.getVendorMfaPolicy);
        yield effects.put(actions.setSecurityPolicyVendorMfaState({ policy, loading: false }));
    }
    catch (e) {
        yield effects.put(actions.setSecurityPolicyVendorMfaState({ error: e.message, loading: false }));
    }
}
function* saveSecurityPolicyMfa(_a) {
    var _b = _a.payload, { callback } = _b, newSecurityPolicy = tslib.__rest(_b, ["callback"]);
    yield effects.put(actions.setSecurityPolicyMfaState({ saving: true, error: null }));
    try {
        const policy = yield effects.call(restApi.api.auth.saveMfaPolicy, newSecurityPolicy);
        yield effects.put(actions.setSecurityPolicyMfaState({ policy, saving: false }));
        callback === null || callback === void 0 ? void 0 : callback(policy);
    }
    catch (e) {
        yield effects.put(actions.setSecurityPolicyMfaState({ saving: false, error: e.message }));
        callback === null || callback === void 0 ? void 0 : callback(null, e);
    }
}
function* loadSecurityPolicyLockout() {
    yield effects.put(actions.setSecurityPolicyLockoutState({ loading: true, error: null }));
    try {
        const policy = yield effects.call(restApi.api.auth.getLockoutPolicy);
        yield effects.put(actions.setSecurityPolicyLockoutState({ policy, loading: false }));
    }
    catch (e) {
        yield effects.put(actions.setSecurityPolicyLockoutState({ error: e.message, loading: false }));
    }
}
function* saveSecurityPolicyLockout(_a) {
    var _b = _a.payload, { callback } = _b, newSecurityPolicy = tslib.__rest(_b, ["callback"]);
    yield effects.put(actions.setSecurityPolicyLockoutState({ saving: true, error: null }));
    try {
        const policy = yield effects.call(restApi.api.auth.saveLockoutPolicy, newSecurityPolicy);
        yield effects.put(actions.setSecurityPolicyLockoutState({ policy, saving: false }));
        callback === null || callback === void 0 ? void 0 : callback(policy);
    }
    catch (e) {
        yield effects.put(actions.setSecurityPolicyLockoutState({ saving: false, error: e.message }));
        callback === null || callback === void 0 ? void 0 : callback(null, e);
    }
}
function* loadSecurityPolicyCaptcha() {
    yield effects.put(actions.setSecurityPolicyLockoutState({ loading: true, error: null }));
    try {
        const policy = yield effects.call(restApi.api.auth.getCaptchaPolicy);
        yield effects.put(actions.setSecurityPolicyCaptchaState({ policy, loading: false }));
    }
    catch (e) {
        yield effects.put(actions.setSecurityPolicyCaptchaState({ error: e.message, loading: false }));
    }
}
function* loadSecurityPolicyPasswordHistory() {
    yield effects.put(actions.setSecurityPolicyPasswordHistoryState({ loading: true, error: null }));
    try {
        const policy = yield effects.call(restApi.api.auth.getPasswordHistoryPolicy);
        yield effects.put(actions.setSecurityPolicyPasswordHistoryState({ policy, loading: false }));
    }
    catch (e) {
        yield effects.put(actions.setSecurityPolicyPasswordHistoryState({ error: e.message, loading: false }));
    }
}
function* saveSecurityPolicyPasswordHistory(_a) {
    var _b = _a.payload, { callback } = _b, newSecurityPolicy = tslib.__rest(_b, ["callback"]);
    yield effects.put(actions.setSecurityPolicyPasswordHistoryState({ saving: true, error: null }));
    try {
        const policy = yield effects.call(restApi.api.auth.savePasswordHistoryPolicy, newSecurityPolicy);
        yield effects.put(actions.setSecurityPolicyPasswordHistoryState({ policy, saving: false }));
        callback === null || callback === void 0 ? void 0 : callback(policy);
    }
    catch (e) {
        yield effects.put(actions.setSecurityPolicyPasswordHistoryState({ saving: false, error: e.message }));
        callback === null || callback === void 0 ? void 0 : callback(null, e);
    }
}
function* loadVendorPasswordConfig() {
    yield effects.put(actions.setSecurityPolicyPasswordState({ loading: true, error: null }));
    try {
        const policy = yield effects.call(restApi.api.auth.getPasswordConfigPolicy);
        yield effects.put(actions.setSecurityPolicyPasswordState({ policy, loading: false }));
    }
    catch (e) {
        yield effects.put(actions.setSecurityPolicyPasswordState({ error: e.message, loading: false }));
    }
}
function* securityPolicySagas() {
    yield effects.takeLeading(actions.loadSecurityPolicy, loadSecurityPolicy);
    yield effects.takeEvery(actions.saveSecurityPolicyMfa, saveSecurityPolicyMfa);
    yield effects.takeEvery(actions.loadSecurityPolicyMfa, loadSecurityPolicyMfa);
    yield effects.takeEvery(actions.loadSecurityPolicyVendorMfa, loadSecurityPolicyVendorMfa);
    yield effects.takeEvery(actions.saveSecurityPolicyLockout, saveSecurityPolicyLockout);
    yield effects.takeEvery(actions.loadSecurityPolicyLockout, loadSecurityPolicyLockout);
    yield effects.takeEvery(actions.loadSecurityPolicyCaptcha, loadSecurityPolicyCaptcha);
    yield effects.takeEvery(actions.saveSecurityPolicyPasswordHistory, saveSecurityPolicyPasswordHistory);
    yield effects.takeEvery(actions.loadSecurityPolicyPasswordHistory, loadSecurityPolicyPasswordHistory);
    yield effects.takeEvery(actions.loadVendorPasswordConfig, loadVendorPasswordConfig);
    yield effects.takeEvery(actions.loadPublicSecurityPolicy, loadPublicSecurityPolicy);
    yield effects.takeEvery(actions.loadPublicAuthStrategiesPolicy, loadPublicAuthStrategiesPolicy);
}
/*********************************
 *  Preview Sagas
 *********************************/
function* loadPublicSecurityPolicyMock() {
    yield effects.put(actions.setSecurityPolicyPublicState({ loading: true, error: null }));
    try {
        yield effects.put(actions.setSecurityPolicyPublicState({ policy: publicSecurityPolicy, loading: false }));
    }
    catch (e) {
        yield effects.put(actions.setSecurityPolicyPublicState({ error: e.message, loading: false }));
    }
}
function* loadSecurityPolicyMock() {
    yield effects.put(actions.setSecurityPolicyGlobalState({ loading: true, error: null }));
    yield vendor_index.delay();
    yield effects.put(actions.setSecurityPolicyGlobalState({ policy: policyDemo, loading: false }));
    yield effects.put(actions.loadSecurityPolicyMfa());
    yield effects.put(actions.loadSecurityPolicyVendorMfa());
    yield effects.put(actions.loadSecurityPolicyLockout());
    yield effects.put(actions.loadSecurityPolicyCaptcha());
}
function* loadSecurityPolicyMfaMock() {
    yield effects.put(actions.setSecurityPolicyMfaState({ loading: true, error: null }));
    yield vendor_index.delay();
    yield effects.put(actions.setSecurityPolicyMfaState({ policy: policyMfaDemo, loading: false }));
}
function* loadSecurityPolicyVendorMfaMock() {
    yield effects.put(actions.setSecurityPolicyVendorMfaState({ loading: true, error: null }));
    yield vendor_index.delay();
    yield effects.put(actions.setSecurityPolicyVendorMfaState({ policy: policyMfaDemo, loading: false }));
}
function* saveSecurityPolicyMfaMock(_a) {
    var _b;
    var _c = _a.payload, { callback } = _c, newSecurityPolicy = tslib.__rest(_c, ["callback"]);
    yield effects.put(actions.setSecurityPolicyMfaState({ saving: true, error: null }));
    const policy = Object.assign(Object.assign({}, policyLockoutDemo), { id: (_b = newSecurityPolicy.id) !== null && _b !== void 0 ? _b : policyLockoutDemo.id, enforceMFAType: newSecurityPolicy.enforceMFAType });
    yield vendor_index.delay();
    yield effects.put(actions.setSecurityPolicyMfaState({ policy, saving: false }));
    callback === null || callback === void 0 ? void 0 : callback(policy);
}
function* loadSecurityPolicyLockoutMock() {
    yield effects.put(actions.setSecurityPolicyLockoutState({ loading: true, error: null }));
    yield vendor_index.delay();
    yield effects.put(actions.setSecurityPolicyLockoutState({ policy: policyLockoutDemo, loading: false }));
}
function* saveSecurityPolicyLockoutMock(_a) {
    var _b = _a.payload, { callback } = _b, newSecurityPolicy = tslib.__rest(_b, ["callback"]);
    yield effects.put(actions.setSecurityPolicyLockoutState({ saving: true, error: null }));
    yield vendor_index.delay();
    const policy = Object.assign(Object.assign(Object.assign({}, newSecurityPolicy), policyLockoutDemo), { id: newSecurityPolicy.id ? newSecurityPolicy.id : policyLockoutDemo.id });
    callback === null || callback === void 0 ? void 0 : callback(policy);
    yield effects.put(actions.setSecurityPolicyLockoutState({ policy, saving: false }));
}
function* loadSecurityPolicyCaptchaMock() {
    yield effects.put(actions.setSecurityPolicyLockoutState({ loading: true, error: null }));
    yield vendor_index.delay();
    yield effects.put(actions.setSecurityPolicyLockoutState({ policy: policyLockoutDemo, loading: false }));
}
function* loadSecurityPolicyPasswordHistoryMock() {
    yield effects.put(actions.setSecurityPolicyPasswordHistoryState({ loading: true, error: null }));
    yield vendor_index.delay();
    yield effects.put(actions.setSecurityPolicyPasswordHistoryState({ policy: policyPasswordHistoryDemo, loading: false }));
}
function* saveSecurityPolicyPasswordHistoryMock(_a) {
    var _b = _a.payload, { callback } = _b, newSecurityPolicy = tslib.__rest(_b, ["callback"]);
    yield effects.put(actions.setSecurityPolicyPasswordHistoryState({ saving: true, error: null }));
    yield vendor_index.delay();
    const policy = Object.assign(Object.assign(Object.assign({}, newSecurityPolicy), policyPasswordHistoryDemo), { id: newSecurityPolicy.id ? newSecurityPolicy.id : policyPasswordHistoryDemo.id });
    callback === null || callback === void 0 ? void 0 : callback(policy);
    yield effects.put(actions.setSecurityPolicyPasswordHistoryState({ policy, saving: false }));
}
function* securityPolicySagasMock() {
    yield effects.takeLeading(actions.loadSecurityPolicy, loadSecurityPolicyMock);
    yield effects.takeEvery(actions.loadPublicSecurityPolicy, loadPublicSecurityPolicyMock);
    yield effects.takeEvery(actions.saveSecurityPolicyMfa, saveSecurityPolicyMfaMock);
    yield effects.takeEvery(actions.loadSecurityPolicyMfa, loadSecurityPolicyMfaMock);
    yield effects.takeEvery(actions.loadSecurityPolicyVendorMfa, loadSecurityPolicyVendorMfaMock);
    yield effects.takeEvery(actions.saveSecurityPolicyLockout, saveSecurityPolicyLockoutMock);
    yield effects.takeEvery(actions.loadSecurityPolicyLockout, loadSecurityPolicyLockoutMock);
    yield effects.takeEvery(actions.loadSecurityPolicyCaptcha, loadSecurityPolicyCaptchaMock);
    yield effects.takeEvery(actions.saveSecurityPolicyPasswordHistory, saveSecurityPolicyPasswordHistoryMock);
    yield effects.takeEvery(actions.loadSecurityPolicyPasswordHistory, loadSecurityPolicyPasswordHistoryMock);
}

const authStrategyLoginStepMap = {
    [restApi.AuthStrategyEnum.Code]: exports.LoginStep.loginWithOtc,
    [restApi.AuthStrategyEnum.EmailAndPassword]: exports.LoginStep.loginWithPassword,
    [restApi.AuthStrategyEnum.MagicLink]: exports.LoginStep.magicLinkPreLoginSuccess,
    [restApi.AuthStrategyEnum.SmsCode]: exports.LoginStep.loginWithSmsOtc,
};
function* afterAuthNavigation() {
    var _a;
    const onRedirectTo = restApi.ContextHolder.onRedirectTo;
    const { routes, includeQueryParam } = yield effects.select((state) => state.auth);
    const { loginUrl, logoutUrl, socialLoginCallbackUrl, activateUrl } = routes;
    let { authenticatedUrl } = routes;
    const afterAuthRedirect = window.localStorage.getItem(constants.FRONTEGG_AFTER_AUTH_REDIRECT_URL);
    if (afterAuthRedirect && ![loginUrl, logoutUrl, socialLoginCallbackUrl, activateUrl].includes(afterAuthRedirect)) {
        authenticatedUrl = afterAuthRedirect;
    }
    window.localStorage.removeItem(constants.FRONTEGG_AFTER_AUTH_REDIRECT_URL);
    yield effects.delay(200);
    effects.put(actions.resetLoginState());
    const url = new URL(window === null || window === void 0 ? void 0 : window.location.href);
    let redirectUrl = authenticatedUrl;
    if (url.searchParams.get('redirectUrl')) {
        redirectUrl = (_a = url.searchParams.get('redirectUrl')) !== null && _a !== void 0 ? _a : authenticatedUrl;
    }
    else if (includeQueryParam) {
        redirectUrl += window.location.search;
    }
    onRedirectTo(redirectUrl, { refresh: redirectUrl.startsWith('http') });
}
function* refreshMetadata() {
    var _a;
    let ssoACS;
    try {
        const metadata = yield effects.call(restApi.api.metadata.getSamlMetadata);
        ssoACS = (_a = metadata === null || metadata === void 0 ? void 0 : metadata.configuration) === null || _a === void 0 ? void 0 : _a.acsUrl;
    }
    catch (e) {
        console.error(e);
    }
    yield effects.put(actions.setState({ ssoACS }));
}
function* loadSSOPublicConfigurationFunction() {
    try {
        const { isActive } = yield effects.call(restApi.api.auth.getSSOPublicConfiguration);
        yield effects.put(actions.setState({ isSSOAuth: isActive }));
    }
    catch (e) {
        console.error(e);
    }
}
const isMfaRequired = (user) => {
    if (user.mfaRequired && user.mfaToken) {
        restApi.ContextHolder.setAccessToken(null);
        restApi.ContextHolder.setUser(null);
        return true;
    }
    else {
        restApi.ContextHolder.setAccessToken(user.accessToken);
        restApi.ContextHolder.setUser(user);
        return false;
    }
};
function* getMfaRequiredState(user) {
    let setMfaState = {};
    let step = exports.LoginStep.loginWithTwoFactor;
    const { loginState } = yield effects.select((state) => state.auth);
    const { isAllowedToRemember, mfaDeviceExpiration } = yield effects.call(restApi.api.auth.checkIfAllowToRememberMfaDevice, user.mfaToken);
    if (user.hasOwnProperty('mfaEnrolled') && !user.mfaEnrolled) {
        setMfaState = {
            mfaState: {
                step: exports.MFAStep.verify,
                qrCode: user.qrCode,
                recoveryCode: user.recoveryCode,
                loading: false,
                mfaToken: user.mfaToken,
            },
        };
        step = exports.LoginStep.forceTwoFactor;
    }
    let quickLoginState = {};
    const quickLoginToRegister = localStorage.getItem('register-quick-login');
    if (quickLoginToRegister) {
        quickLoginState = {
            quickLoginToRegister,
            flow: exports.LoginFlow.RegisterQuickLogin
        };
    }
    return Object.assign(Object.assign({ user: undefined, isAuthenticated: false }, setMfaState), { loginState: Object.assign(Object.assign(Object.assign({}, loginState), quickLoginState), { mfaToken: user.mfaToken, mfaRequired: user.mfaRequired, loading: false, error: undefined, step, tenantsLoading: true, email: user.userEmail, tenants: [], allowRememberMfaDevice: isAllowedToRemember, mfaDeviceExpiration }) });
}
function* refreshToken() {
    const { hostedLoginBox } = yield effects.select((state) => state.auth);
    if (hostedLoginBox) {
        yield effects.call(refreshTokenHosted);
    }
    else {
        yield effects.call(refreshTokenEmbedded);
    }
}
function* refreshTokenHosted() {
    const { user } = yield effects.select((state) => state.auth);
    if (!(user === null || user === void 0 ? void 0 : user.refreshToken)) {
        restApi.ContextHolder.setAccessToken(null);
        restApi.ContextHolder.setUser(null);
        yield effects.put(actions.setState({ isAuthenticated: false }));
        return;
    }
    try {
        const body = {
            grant_type: 'refresh_token',
            refresh_token: user === null || user === void 0 ? void 0 : user.refreshToken
        };
        const authenticatedUser = yield effects.call(restApi.api.auth.exchangeOAuthTokens, body);
        yield effects.put(actions.setState({ user: authenticatedUser, isAuthenticated: true }));
        yield effects.put(actions.loadTenants());
    }
    catch (e) {
        restApi.ContextHolder.setAccessToken(null);
        restApi.ContextHolder.setUser(null);
        yield effects.put(actions.setState({ isAuthenticated: false }));
    }
}
function* refreshTokenEmbedded() {
    var _a;
    try {
        const onRedirectTo = restApi.ContextHolder.onRedirectTo;
        const { routes, loginState } = yield effects.select((state) => state.auth);
        const { user, tenants } = yield effects.call(restApi.api.auth.refreshTokenV2);
        if (isMfaRequired(user)) {
            const mfaRequiredState = yield getMfaRequiredState(user);
            yield effects.put(actions.setState(mfaRequiredState));
            onRedirectTo(routes.loginUrl, { preserveQueryParams: true });
        }
        else {
            if (user.email) {
                localStorage.setItem('email', user.email);
                localStorage.setItem('name', user.name);
            }
            const quickLoginToRegister = (_a = localStorage.getItem('register-quick-login')) !== null && _a !== void 0 ? _a : loginState.quickLoginToRegister;
            const shouldNavigateToRegisterQuicKLogin = quickLoginToRegister && localStorage.getItem(`${user.email}-${quickLoginToRegister}`) !== 'true' && !window.location.pathname.endsWith(routes.logoutUrl);
            yield effects.put(actions.setTenantsState({ tenants, loading: false }));
            yield effects.put(actions.setState({
                user,
                isAuthenticated: true,
                loginState: Object.assign(Object.assign({}, loginState), { quickLoginToRegister, flow: shouldNavigateToRegisterQuicKLogin ? exports.LoginFlow.RegisterQuickLogin : exports.LoginFlow.Login })
            }));
            if (shouldNavigateToRegisterQuicKLogin) {
                onRedirectTo(routes.loginUrl);
            }
            else if ([routes.loginUrl, routes.socialLoginCallbackUrl, routes.signUpUrl, routes.oidcRedirectUrl, routes.samlCallbackUrl]
                .some(url => url && window.location.pathname.endsWith(url))) {
                if (loginState.isNewUser && routes.signUpSuccessUrl && routes.socialLoginCallbackUrl === window.location.pathname) {
                    onRedirectTo(routes.signUpSuccessUrl, { refresh: routes.signUpSuccessUrl.startsWith('http') });
                }
                else {
                    yield afterAuthNavigation();
                }
            }
        }
    }
    catch (e) {
        restApi.ContextHolder.setAccessToken(null);
        restApi.ContextHolder.setUser(null);
        yield effects.put(actions.setState({ user: undefined, isAuthenticated: false }));
    }
}
function* requestAuthorize({ payload: firstTime }) {
    const calls = [];
    if (firstTime) {
        yield effects.put(actions.setState({ isLoading: true }));
        yield effects.put(actions.loadSocialLoginsConfigurationV2());
        calls.push(effects.call(loadAllowSignUps));
        calls.push(effects.call(loadPublicAuthStrategiesPolicy));
        calls.push(effects.call(loadSSOPublicConfigurationFunction));
        calls.push(effects.call(vendor_index.loadVendorPublicInfo));
        calls.push(effects.call(refreshMetadata));
    }
    calls.push(effects.call(refreshToken));
    yield effects.all(calls);
    yield effects.put(actions.setState({ isLoading: false }));
}
function* refreshTokenSSR(accessToken) {
    if (!accessToken) {
        restApi.ContextHolder.setAccessToken(null);
        restApi.ContextHolder.setUser(null);
        yield effects.put(actions.setState({ user: undefined, isAuthenticated: false }));
        return;
    }
    try {
        const onRedirectTo = restApi.ContextHolder.onRedirectTo;
        const { routes } = yield effects.select((state) => state.auth);
        const { user, tenants } = yield effects.call(restApi.api.auth.generateLoginResponseV2, { accessToken });
        if (isMfaRequired(user)) {
            const mfaRequiredState = yield getMfaRequiredState(user);
            yield effects.put(actions.setState(mfaRequiredState));
            onRedirectTo(routes.loginUrl, { preserveQueryParams: true });
        }
        else {
            yield effects.put(actions.setTenantsState({ tenants, loading: false }));
            yield effects.put(actions.setState({ user, isAuthenticated: true }));
        }
    }
    catch (e) {
        restApi.ContextHolder.setAccessToken(null);
        restApi.ContextHolder.setUser(null);
        yield effects.put(actions.setState({ user: undefined, isAuthenticated: false }));
    }
}
function* requestAuthorizeSSR({ payload: accessToken }) {
    const calls = [];
    yield effects.put(actions.setState({ isLoading: true }));
    yield effects.put(actions.loadSocialLoginsConfigurationV2());
    calls.push(effects.call(loadAllowSignUps));
    calls.push(effects.call(loadSSOPublicConfigurationFunction));
    calls.push(effects.call(vendor_index.loadVendorPublicInfo));
    calls.push(effects.call(refreshMetadata));
    calls.push(effects.call(refreshTokenSSR, accessToken));
    yield effects.all(calls);
    yield effects.put(actions.setState({ isLoading: false }));
}
function* requestHostedLoginAuthorize() {
    const { routes, context, onRedirectTo } = yield effects.select((state) => ({
        routes: state.auth.routes,
        onRedirectTo: state.auth.onRedirectTo,
        context: state.root.context,
    }));
    // Generate the relevant params for the redirect
    const nonce = createRandomString();
    const code_verifier = createRandomString();
    const code_challenge = yield effects.call(generateCodeChallenge, code_verifier);
    // We are saving the verifier in session storage to be able to validate the response
    localStorage.setItem(constants.HOSTED_LOGIN_VERIFIER_KEY, code_verifier);
    const redirectUrl = `${window.location.origin}${routes.hostedLoginRedirectUrl}`;
    const baseUrl = restApi.fetch.getBaseUrl(context, '/oauth/authorize');
    // Hard coded for now
    const oauthUrl = `${baseUrl}/oauth/authorize`;
    const params = {
        response_type: 'code',
        client_id: context.clientId || 'INVALID-CLIENT-ID',
        scope: 'openid email profile',
        redirect_uri: redirectUrl,
        code_challenge: code_challenge,
        code_challenge_method: 'S256',
        nonce,
    };
    const searchParams = new URLSearchParams(params);
    const url = `${oauthUrl}?${searchParams.toString()}`;
    onRedirectTo(url, { refresh: true });
}
function* handleHostedLoginCallback({ payload }) {
    // Hard coded for now
    const code_verifier = localStorage.getItem(constants.HOSTED_LOGIN_VERIFIER_KEY) || 'INVALID-CODE-VERIFIER';
    const routes = yield effects.select((state) => state.auth.routes);
    const redirectUrl = `${window.location.origin}${routes.hostedLoginRedirectUrl}`;
    const body = {
        code: payload.code,
        redirect_uri: redirectUrl,
        code_verifier,
        grant_type: 'authorization_code',
    };
    const user = yield effects.call(restApi.api.auth.exchangeOAuthTokens, body);
    // TODO: Validate nonce and aud
    yield effects.put(actions.setState({ user, isAuthenticated: true }));
    yield effects.put(actions.loadTenants());
    yield afterAuthNavigation();
}
function* changePhoneNumberWithVerification(_a) {
    var _b = _a.payload, { callback } = _b, payload = tslib.__rest(_b, ["callback"]);
    try {
        yield effects.put(actions.setLoginState({ loading: true }));
        const changePhoneRes = yield effects.call(restApi.api.auth.changePhoneNumberWithVerification, payload);
        yield effects.put(actions.setLoginState({ phoneNumber: payload.phoneNumber, loading: false, changePhoneId: changePhoneRes.changePhoneId, step: exports.LoginStep.loginWithQuickSmsOtc, error: undefined }));
        callback === null || callback === void 0 ? void 0 : callback(true);
    }
    catch (e) {
        yield effects.put(actions.setLoginState({ error: e.message, loading: false }));
    }
}
function* verifyChangePhoneNumber(_a) {
    var _b = _a.payload, { callback } = _b, payload = tslib.__rest(_b, ["callback"]);
    try {
        yield effects.put(actions.setLoginState({ loading: true }));
        yield effects.call(restApi.api.auth.verifyChangePhoneNumber, payload);
        yield effects.put(actions.setLoginState({ loading: false }));
        callback === null || callback === void 0 ? void 0 : callback(true);
    }
    catch (e) {
        yield effects.put(actions.setLoginState({ error: e.message, loading: false }));
    }
}
function* quickSmsPasswordlessPreLogin(_a) {
    var _b = _a.payload, { callback } = _b, payload = tslib.__rest(_b, ["callback"]);
    try {
        yield effects.put(actions.setLoginState({ loading: true }));
        const preloginRes = yield effects.call(restApi.api.auth.passwordlessPreLogin, Object.assign(Object.assign({}, payload), { type: restApi.AuthStrategyEnum.SmsCode }));
        yield effects.put(actions.setLoginState({
            step: exports.LoginStep.loginWithQuickSmsOtc,
            loading: false,
            email: payload.email,
            phoneNumber: preloginRes === null || preloginRes === void 0 ? void 0 : preloginRes.phoneNumber,
            error: undefined,
        }));
        callback === null || callback === void 0 ? void 0 : callback(true);
    }
    catch (e) {
        yield effects.put(actions.setLoginState({ error: e.message, loading: false }));
        callback === null || callback === void 0 ? void 0 : callback(e);
    }
}
function* passwordlessPreLogin(_a) {
    var _b = _a.payload, { callback } = _b, payload = tslib.__rest(_b, ["callback"]);
    try {
        const { onRedirectTo, routes } = yield effects.select(({ auth: { onRedirectTo, routes } }) => ({ onRedirectTo, routes }));
        yield effects.put(actions.setLoginState({ loading: true }));
        const preloginRes = yield effects.call(restApi.api.auth.passwordlessPreLogin, payload);
        const step = authStrategyLoginStepMap[payload.type];
        if (step === exports.LoginStep.loginWithSmsOtc && preloginRes.resetPhoneNumberToken) {
            yield effects.put(actions.setResetPhoneNumberState({
                resetPhoneNumberToken: preloginRes.resetPhoneNumberToken,
                step: exports.ResetPhoneNumberStep.VerifyResetPhoneNumber,
            }));
            onRedirectTo(routes.resetPhoneNumberUrl);
            return;
        }
        yield effects.put(actions.setLoginState({
            step,
            loading: false,
            email: payload.email,
            phoneNumber: preloginRes === null || preloginRes === void 0 ? void 0 : preloginRes.phoneNumber,
            error: undefined
        }));
        callback === null || callback === void 0 ? void 0 : callback();
    }
    catch (e) {
        yield effects.put(actions.setLoginState({ error: e.message, loading: false }));
        callback === null || callback === void 0 ? void 0 : callback();
    }
}
function* passwordlessPostLogin(_a) {
    var _b, _c;
    var _d = _a.payload, { callback, events } = _d, payload = tslib.__rest(_d, ["callback", "events"]);
    try {
        yield effects.put(actions.setLoginState({ loading: true }));
        const data = yield effects.call(restApi.api.auth.passwordlessPostLogin, payload);
        const onRedirectTo = restApi.ContextHolder.onRedirectTo;
        const { routes } = yield effects.select((state) => state.auth);
        if (isMfaRequired(data)) {
            const mfaRequiredState = yield getMfaRequiredState(data);
            yield effects.put(actions.setState(mfaRequiredState));
            onRedirectTo(routes.loginUrl, { preserveQueryParams: true });
        }
        else {
            const { loginState } = yield effects.select((state) => state.auth);
            const user = yield effects.call(restApi.api.auth.generateLoginResponse, data);
            if (data.emailVerified) {
                (_b = events === null || events === void 0 ? void 0 : events.userVerified) === null || _b === void 0 ? void 0 : _b.call(events, {
                    email: user.email,
                    origin: exports.UserVeirifedOriginTypes.PASSWORDLESS,
                    id: user.id,
                    tenantId: user.tenantId,
                    createdAt: new Date(),
                    name: user.name,
                });
            }
            if (user.email) {
                localStorage.setItem('email', user.email);
                localStorage.setItem('name', user.name);
            }
            yield effects.put(actions.setState({ user, isAuthenticated: true }));
            yield effects.put(actions.setLoginState({ error: undefined }));
            yield effects.put(actions.loadTenants());
            if (loginState.flow === exports.LoginFlow.Login) {
                yield afterAuthNavigation();
            }
            else {
                onRedirectTo(routes.loginUrl, { preserveQueryParams: true });
            }
            localStorage.removeItem('register-quick-login');
            callback === null || callback === void 0 ? void 0 : callback(true);
        }
    }
    catch (e) {
        yield effects.put(actions.setLoginState({ error: (_c = e.message) !== null && _c !== void 0 ? _c : 'Failed to authenticate' }));
    }
    finally {
        yield effects.put(actions.setLoginState({ loading: false }));
    }
}
function* verifyInviteToken({ payload }) {
    var _a;
    try {
        yield effects.put(actions.setLoginState({ loading: true }));
        const { name: inviteTokenTenantName } = yield effects.call(restApi.api.auth.verifyInviteToken, payload);
        yield effects.put(actions.setLoginState({ inviteTokenTenantName }));
    }
    catch (e) {
        console.error(e);
        yield effects.put(actions.setLoginState({ inviteTokenError: (_a = e.message) !== null && _a !== void 0 ? _a : `We couldn't verify your invitation` }));
    }
    finally {
        yield effects.put(actions.setLoginState({ loading: false }));
    }
}
function* preLogin({ payload: { email, recaptchaToken, invitationToken, callback, }, }) {
    yield effects.put(actions.setLoginState({ loading: true }));
    try {
        const onRedirectTo = yield effects.select(({ auth: { onRedirectTo } }) => onRedirectTo);
        let { address, idpType } = yield effects.call(restApi.api.auth.preLoginV2, { email });
        if (address) {
            if (idpType === exports.SamlVendors.Oidc && !address.includes('redirect_uri')) {
                const { routes: { oidcRedirectUrl } } = yield effects.select(({ auth: { routes } }) => ({ routes }));
                address += `&redirect_uri=${window.location.origin}${oidcRedirectUrl}`;
            }
            yield effects.put(actions.setLoginState({ step: exports.LoginStep.redirectToSSO, loading: false, ssoRedirectUrl: address }));
            setTimeout(() => {
                onRedirectTo(address, { refresh: true });
            }, 2000);
        }
        else {
            yield ssoPreloginFailed({ email, recaptchaToken, callback, invitationToken });
        }
    }
    catch (e) {
        yield ssoPreloginFailed({ email, recaptchaToken, callback, invitationToken });
    }
}
function* ssoPreloginFailed(_a) {
    var { callback } = _a, body = tslib.__rest(_a, ["callback"]);
    const publicPolicy = yield effects.select(({ auth: { securityPolicyState: { publicPolicy: { policy: publicPolicy } } } }) => publicPolicy);
    if (!(publicPolicy === null || publicPolicy === void 0 ? void 0 : publicPolicy.authStrategy)) {
        yield effects.put(actions.setLoginState({ step: exports.LoginStep.loginWithPassword, loading: false }));
        callback === null || callback === void 0 ? void 0 : callback();
        return;
    }
    if ((publicPolicy === null || publicPolicy === void 0 ? void 0 : publicPolicy.authStrategy) === restApi.AuthStrategyEnum.EmailAndPassword) {
        yield effects.put(actions.setLoginState({ step: exports.LoginStep.loginWithPassword, loading: false }));
        callback === null || callback === void 0 ? void 0 : callback();
    }
    else if ([restApi.AuthStrategyEnum.MagicLink, restApi.AuthStrategyEnum.Code, restApi.AuthStrategyEnum.SmsCode].includes(publicPolicy === null || publicPolicy === void 0 ? void 0 : publicPolicy.authStrategy)) {
        yield effects.put(actions.passwordlessPreLogin(Object.assign(Object.assign({}, body), { type: publicPolicy === null || publicPolicy === void 0 ? void 0 : publicPolicy.authStrategy, callback })));
    }
    else {
        yield effects.put(actions.setLoginState({ step: exports.LoginStep.loginWithPassword, loading: false }));
        callback === null || callback === void 0 ? void 0 : callback();
    }
}
function* webAuthnCreateNewDeviceSession({ payload: { callback } }) {
    try {
        yield effects.put(actions.setLoginState({ loading: true }));
        const { options } = yield effects.call(restApi.api.auth.webAuthnCreateNewDeviceSession);
        options.user.id = vendor_index.base64urlDecode(options.user.id);
        options.challenge = vendor_index.base64urlDecode(options.challenge);
        options.excludeCredentials = [];
        callback === null || callback === void 0 ? void 0 : callback(options);
    }
    catch (e) {
        yield effects.put(actions.setLoginState({ error: e.message }));
        callback === null || callback === void 0 ? void 0 : callback(null);
    }
    finally {
        yield effects.put(actions.setLoginState({ loading: false }));
    }
}
function* webAuthnVerifyNewDeviceSession(_a) {
    var _b = _a.payload, { callback } = _b, body = tslib.__rest(_b, ["callback"]);
    try {
        yield effects.put(actions.setLoginState({ loading: true }));
        const publicKey = vendor_index.publicKeyCredentialToJSON(body.publicKey);
        yield effects.call(restApi.api.auth.verifyNewDeviceSession, {
            id: publicKey.id,
            response: publicKey.response
        });
        callback === null || callback === void 0 ? void 0 : callback(true);
    }
    catch (e) {
        yield effects.put(actions.setLoginState({ error: e.message }));
        callback === null || callback === void 0 ? void 0 : callback(null);
    }
    finally {
        yield effects.put(actions.setLoginState({ loading: false }));
    }
}
function* webAuthnPrelogin(_a) {
    var _b;
    var _c = _a.payload, { callback } = _c, body = tslib.__rest(_c, ["callback"]);
    try {
        yield effects.put(actions.setLoginState({ loading: true }));
        const { options } = yield effects.call(restApi.api.auth.webAuthnPreLogin, body);
        options.challenge = vendor_index.base64urlDecode(options.challenge);
        options.allowCredentials = (_b = options.allowCredentials) === null || _b === void 0 ? void 0 : _b.map((credentials) => (Object.assign(Object.assign({}, credentials), { id: vendor_index.base64urlDecode(credentials.id) })));
        yield effects.put(actions.setLoginState({ error: undefined }));
        callback === null || callback === void 0 ? void 0 : callback(options);
    }
    catch (e) {
        yield effects.put(actions.setLoginState({ error: e.message }));
        callback === null || callback === void 0 ? void 0 : callback(null);
    }
    finally {
        yield effects.put(actions.setLoginState({ loading: false }));
    }
}
function* webAuthnPostLogin(_a) {
    var _b;
    var _c = _a.payload, { callback } = _c, body = tslib.__rest(_c, ["callback"]);
    try {
        yield effects.put(actions.setLoginState({ loading: true }));
        const publicKey = vendor_index.publicKeyCredentialToJSON(body.publicKey);
        const data = yield effects.call(restApi.api.auth.webAuthnPostLogin, Object.assign(Object.assign({}, publicKey), { response: Object.assign(Object.assign({}, publicKey.response), { userHandle: (_b = publicKey.response.userHandle) !== null && _b !== void 0 ? _b : undefined }), recaptchaToken: body.recaptchaToken, invitationToken: body.invitationToken }));
        if (isMfaRequired(data)) {
            const onRedirectTo = restApi.ContextHolder.onRedirectTo;
            const { routes } = yield effects.select((state) => state.auth);
            const mfaRequiredState = yield getMfaRequiredState(data);
            yield effects.put(actions.setState(mfaRequiredState));
            onRedirectTo(routes.loginUrl, { preserveQueryParams: true });
        }
        else {
            const user = yield effects.call(restApi.api.auth.generateLoginResponse, data);
            if (user.email) {
                localStorage.setItem('email', user.email);
                localStorage.setItem('name', user.name);
            }
            yield effects.put(actions.loadTenants());
            yield effects.put(actions.setState({ user, isAuthenticated: true }));
            yield effects.put(actions.setLoginState({ error: undefined }));
            yield afterAuthNavigation();
            callback === null || callback === void 0 ? void 0 : callback(true);
        }
    }
    catch (e) {
        yield effects.put(actions.setLoginState({ error: e.message }));
        callback === null || callback === void 0 ? void 0 : callback(null);
    }
    finally {
        yield effects.put(actions.setLoginState({ loading: false }));
    }
}
function* postLogin({ payload }) {
    const { onRedirectTo, routes } = yield effects.select(({ auth: { onRedirectTo, routes } }) => ({ onRedirectTo, routes }));
    yield effects.put(actions.setLoginState({ loading: true }));
    try {
        const user = yield effects.call(restApi.api.auth.postLogin, payload);
        restApi.ContextHolder.setAccessToken(user.accessToken);
        restApi.ContextHolder.setUser(user);
        yield effects.put(actions.setState({
            user: !!user.accessToken ? user : undefined,
            isAuthenticated: !!user.accessToken,
        }));
        yield afterAuthNavigation();
    }
    catch (e) {
        setTimeout(() => {
            onRedirectTo(routes.authenticatedUrl);
        }, 1000);
        yield effects.put(actions.setLoginState({ step: exports.LoginStep.loginWithSSOFailed, loading: false }));
    }
}
function* login({ payload: { email, password, recaptchaToken, invitationToken, callback, }, }) {
    yield effects.put(actions.setLoginState({ loading: true }));
    try {
        const user = yield effects.call(restApi.api.auth.login, {
            email,
            password,
            recaptchaToken,
            invitationToken,
        });
        restApi.ContextHolder.setAccessToken(user.accessToken);
        restApi.ContextHolder.setUser(user);
        let setMfaState = {};
        let step = exports.LoginStep.success;
        if (user.mfaRequired && user.mfaToken) {
            step = exports.LoginStep.loginWithTwoFactor;
            if (user.hasOwnProperty('mfaEnrolled') && !user.mfaEnrolled) {
                setMfaState = {
                    mfaState: {
                        step: exports.MFAStep.verify,
                        qrCode: user.qrCode,
                        recoveryCode: user.recoveryCode,
                        mfaToken: user.mfaToken,
                        loading: false,
                    },
                };
                step = exports.LoginStep.forceTwoFactor;
            }
        }
        const { loginState } = yield effects.select((state) => state.auth);
        const isLoginSucceeded = step === exports.LoginStep.success;
        const isAuthenticated = isLoginSucceeded && !!user.accessToken;
        const loggedInUser = isLoginSucceeded ? user : undefined;
        let allowRememberDevice = { isAllowedToRemember: false, mfaDeviceExpiration: 0 };
        if (user.mfaRequired && user.mfaToken) {
            allowRememberDevice = yield effects.call(restApi.api.auth.checkIfAllowToRememberMfaDevice, user.mfaToken);
        }
        const { isAllowedToRemember, mfaDeviceExpiration } = allowRememberDevice;
        if (user.email) {
            localStorage.setItem('email', user.email);
            localStorage.setItem('name', user.name);
        }
        yield effects.put(actions.setState(Object.assign(Object.assign({ user: loggedInUser, isAuthenticated }, setMfaState), { loginState: {
                flow: loginState.flow,
                quickLoginToRegister: loginState.quickLoginToRegister,
                email,
                loading: false,
                error: undefined,
                mfaToken: user.mfaToken,
                step: (!isLoginSucceeded || loginState.flow === exports.LoginFlow.Login) ? step : loginState.step,
                tenants: [],
                tenantsLoading: true,
                allowRememberMfaDevice: isAllowedToRemember,
                mfaDeviceExpiration,
            } })));
        if (isLoginSucceeded) {
            yield effects.put(actions.loadTenants());
        }
        if (isAuthenticated && loginState.flow === exports.LoginFlow.Login) {
            yield afterAuthNavigation();
        }
        localStorage.removeItem('register-quick-login');
        callback === null || callback === void 0 ? void 0 : callback(true);
    }
    catch (e) {
        restApi.ContextHolder.setAccessToken(null);
        restApi.ContextHolder.setUser(null);
        yield effects.put(actions.setLoginState({
            email,
            error: e.message,
            loading: false,
        }));
    }
}
function* loginWithMfa({ payload: { mfaToken, value, rememberDevice, callback }, }) {
    yield effects.put(actions.setLoginState({ loading: true }));
    try {
        const user = yield effects.call(restApi.api.auth.loginWithMfa, { mfaToken, value, rememberDevice });
        const { loginState } = yield effects.select((state) => state.auth);
        const step = loginState.flow === exports.LoginFlow.Login ? exports.LoginStep.success : loginState.step;
        yield effects.put(actions.setState({
            loginState: { flow: loginState.flow, quickLoginToRegister: loginState.quickLoginToRegister, loading: false, step, error: undefined, tenantsLoading: true, tenants: [] },
            user,
            isAuthenticated: true,
        }));
        if (user.email) {
            localStorage.setItem('email', user.email);
            localStorage.setItem('name', user.name);
        }
        yield effects.put(actions.loadTenants());
        yield effects.put(actions.setLoginState({ error: undefined, loading: false }));
        if (loginState.flow === exports.LoginFlow.Login) {
            yield afterAuthNavigation();
        }
        callback === null || callback === void 0 ? void 0 : callback(true);
    }
    catch (e) {
        yield effects.put(actions.setLoginState({ error: e.message, loading: false }));
        callback === null || callback === void 0 ? void 0 : callback(false, e);
    }
}
function* recoverMfa({ payload }) {
    yield effects.put(actions.setLoginState({ loading: true }));
    try {
        yield effects.call(restApi.api.auth.recoverMfaToken, payload);
        yield effects.put(actions.setLoginState({ loading: false, error: undefined, step: exports.LoginStep.preLogin }));
        yield effects.put(actions.setState({ user: undefined, isAuthenticated: false }));
    }
    catch (e) {
        yield effects.put(actions.setLoginState({ error: e.message, loading: false }));
    }
}
function* logout({ payload }) {
    yield effects.put(actions.setState({ isLoading: true }));
    try {
        yield effects.call(restApi.api.auth.logout);
    }
    catch (_a) {
    }
    yield effects.put(actions.resetState());
    yield effects.put(actions.requestAuthorize(true));
    payload === null || payload === void 0 ? void 0 : payload();
}
function* silentLogout({ payload }) {
    try {
        yield effects.call(restApi.api.auth.logout);
    }
    catch (_a) {
    }
    setTimeout(() => payload === null || payload === void 0 ? void 0 : payload(), 500);
}
function* loginSagas() {
    yield effects.takeLeading(actions.requestAuthorize, requestAuthorize);
    yield effects.takeLeading(actions.requestAuthorizeSSR, requestAuthorizeSSR);
    yield effects.takeLeading(actions.requestHostedLoginAuthorize, requestHostedLoginAuthorize);
    yield effects.takeLeading(actions.handleHostedLoginCallback, handleHostedLoginCallback);
    yield effects.takeLeading(actions.preLogin, preLogin);
    yield effects.takeLeading(actions.postLogin, postLogin);
    yield effects.takeLeading(actions.login, login);
    yield effects.takeLeading(actions.logout, logout);
    yield effects.takeLeading(actions.silentLogout, silentLogout);
    yield effects.takeLeading(actions.loginWithMfa, loginWithMfa);
    yield effects.takeLeading(actions.recoverMfa, recoverMfa);
    yield effects.takeLeading(actions.quickSmsPasswordlessPreLogin, quickSmsPasswordlessPreLogin);
    yield effects.takeLeading(actions.changePhoneNumberWithVerification, changePhoneNumberWithVerification);
    yield effects.takeLeading(actions.verifyChangePhoneNumber, verifyChangePhoneNumber);
    yield effects.takeLeading(actions.passwordlessPreLogin, passwordlessPreLogin);
    yield effects.takeLeading(actions.passwordlessPostLogin, passwordlessPostLogin);
    yield effects.takeLeading(actions.verifyInviteToken, verifyInviteToken);
    yield effects.takeLeading(actions.webAuthnPrelogin, webAuthnPrelogin);
    yield effects.takeLeading(actions.webAuthnPostLogin, webAuthnPostLogin);
    yield effects.takeLeading(actions.webAuthnCreateNewDeviceSession, webAuthnCreateNewDeviceSession);
    yield effects.takeLeading(actions.webAuthnVerifyNewDeviceSession, webAuthnVerifyNewDeviceSession);
    yield effects.takeLeading(actions.afterAuthNavigation, afterAuthNavigation);
}
/*********************************
 *  Preview Sagas
 *********************************/
function* requestAuthorizeMock({ payload: firstTime }) {
    if (firstTime) {
        yield effects.put(actions.setState({ isLoading: true }));
    }
    const user = userDemo;
    yield effects.put(actions.loadTenants());
    yield effects.put(actions.setState({ user, isAuthenticated: true, isLoading: false }));
}
function* loginSagasMock() {
    yield effects.takeLeading(actions.requestAuthorize, requestAuthorizeMock);
    yield effects.takeLeading(actions.afterAuthNavigation, afterAuthNavigation);
}

function* loadSSOConfigurations() {
    var _a, _b;
    try {
        yield effects.put(actions.setSSOState({ loading: true }));
        const samlConfiguration = yield effects.call(restApi.api.auth.getSamlConfiguration);
        const oidcConfiguration = yield effects.call(restApi.api.auth.getOidcConfiguration);
        const samlMetadata = yield effects.call(restApi.api.metadata.getSamlMetadata);
        samlConfiguration.acsUrl = (_a = samlMetadata === null || samlMetadata === void 0 ? void 0 : samlMetadata.configuration) === null || _a === void 0 ? void 0 : _a.acsUrl;
        samlConfiguration.spEntityId = (_b = samlMetadata === null || samlMetadata === void 0 ? void 0 : samlMetadata.configuration) === null || _b === void 0 ? void 0 : _b.spEntityId;
        samlConfiguration.isSamlActive = samlMetadata === null || samlMetadata === void 0 ? void 0 : samlMetadata.isActive;
        yield effects.put(actions.setSSOState({ samlConfiguration, oidcConfiguration, loading: false, firstLoad: false }));
    }
    catch (e) {
        yield effects.put(actions.setSSOState({ error: e.message, loading: false }));
    }
}
function* saveSSOConfigurationsFile({ payload: configFile }) {
    const oldSamlConfiguration = yield effects.select((state) => state.auth.ssoState.samlConfiguration);
    const loaderKey = 'saving';
    yield effects.put(actions.setSSOState({ error: undefined, [loaderKey]: true }));
    try {
        const metadata = yield readFileAsText(configFile[0]);
        const newSamlConfiguration = yield effects.call(restApi.api.auth.updateSamlVendorMetadata, { metadata });
        newSamlConfiguration.isSamlActive = oldSamlConfiguration === null || oldSamlConfiguration === void 0 ? void 0 : oldSamlConfiguration.isSamlActive;
        yield effects.put(actions.setSSOState({ samlConfiguration: newSamlConfiguration, error: undefined, [loaderKey]: false }));
    }
    catch (e) {
        yield effects.put(actions.setSSOState({ samlConfiguration: oldSamlConfiguration, error: e.message, [loaderKey]: false }));
    }
}
function* saveSSOConfigurationsFileWithCallback({ payload }) {
    const { configFile, callback } = payload;
    const oldSamlConfiguration = yield effects.select((state) => state.auth.ssoState.samlConfiguration);
    const loaderKey = 'saving';
    yield effects.put(actions.setSSOState({ error: undefined, [loaderKey]: true }));
    try {
        const metadata = yield readFileAsText(configFile);
        const newSamlConfiguration = yield effects.call(restApi.api.auth.updateSamlVendorMetadata, { metadata });
        newSamlConfiguration.isSamlActive = oldSamlConfiguration === null || oldSamlConfiguration === void 0 ? void 0 : oldSamlConfiguration.isSamlActive;
        yield effects.put(actions.setSSOState({ samlConfiguration: newSamlConfiguration, error: undefined, [loaderKey]: false }));
        callback === null || callback === void 0 ? void 0 : callback(true);
    }
    catch (e) {
        yield effects.put(actions.setSSOState({ samlConfiguration: oldSamlConfiguration, error: e.message, [loaderKey]: false }));
        callback === null || callback === void 0 ? void 0 : callback(null, e);
    }
}
function* saveSSOConfigurations({ payload }) {
    var _a, _b;
    const { callback, samlVendor } = payload, newSamlConfiguration = tslib.__rest(payload, ["callback", "samlVendor"]);
    const oldSamlConfiguration = yield effects.select((state) => state.auth.ssoState.samlConfiguration);
    const samlConfiguration = Object.assign(Object.assign({}, oldSamlConfiguration), newSamlConfiguration);
    let loaderKey = 'saving';
    if ((samlConfiguration === null || samlConfiguration === void 0 ? void 0 : samlConfiguration.enabled) !== oldSamlConfiguration.enabled) {
        loaderKey = 'loading';
    }
    try {
        const firstTimeConfigure = !(samlConfiguration === null || samlConfiguration === void 0 ? void 0 : samlConfiguration.domain);
        if (firstTimeConfigure) {
            yield effects.put(actions.setSSOState({ samlConfiguration: Object.assign(Object.assign({}, oldSamlConfiguration), samlConfiguration) }));
            return;
        }
        else {
            yield effects.put(actions.setSSOState({ error: undefined, [loaderKey]: true }));
        }
        if (payload.type === exports.SamlVendors.Saml) {
            const samlMetadata = yield effects.call(restApi.api.metadata.getSamlMetadata);
            samlConfiguration.acsUrl = (_a = samlMetadata === null || samlMetadata === void 0 ? void 0 : samlMetadata.configuration) === null || _a === void 0 ? void 0 : _a.acsUrl;
            samlConfiguration.spEntityId = (_b = samlMetadata === null || samlMetadata === void 0 ? void 0 : samlMetadata.configuration) === null || _b === void 0 ? void 0 : _b.spEntityId;
        }
        const updateSamlConfiguration = omitProps(samlConfiguration, [
            'validated',
            'generatedVerification',
            'createdAt',
            'updatedAt',
        ]);
        if ((oldSamlConfiguration === null || oldSamlConfiguration === void 0 ? void 0 : oldSamlConfiguration.domain) !== (updateSamlConfiguration === null || updateSamlConfiguration === void 0 ? void 0 : updateSamlConfiguration.domain)) {
            updateSamlConfiguration.ssoEndpoint = '';
            updateSamlConfiguration.publicCertificate = '';
            updateSamlConfiguration.signRequest = false;
        }
        updateSamlConfiguration.type = samlVendor === null || samlVendor === void 0 ? void 0 : samlVendor.toLowerCase();
        const newSamlConfiguration = yield effects.call(restApi.api.auth.updateSamlConfiguration, updateSamlConfiguration);
        newSamlConfiguration.isSamlActive = oldSamlConfiguration === null || oldSamlConfiguration === void 0 ? void 0 : oldSamlConfiguration.isSamlActive;
        yield effects.put(actions.setSSOState({ samlConfiguration: newSamlConfiguration, error: undefined, [loaderKey]: false }));
        callback === null || callback === void 0 ? void 0 : callback(true);
    }
    catch (e) {
        yield effects.put(actions.setSSOState({ samlConfiguration: oldSamlConfiguration, error: e.message, [loaderKey]: false }));
        callback === null || callback === void 0 ? void 0 : callback(null, e);
    }
}
function* validateSSODomain({ payload: { callback } = {} }) {
    const samlConfiguration = yield effects.select((state) => state.auth.ssoState.samlConfiguration);
    try {
        yield effects.put(actions.setSSOState({ error: undefined, saving: true }));
        yield effects.call(restApi.api.auth.validateSamlDomain);
        yield effects.put(actions.setSSOState({
            samlConfiguration: Object.assign(Object.assign({}, samlConfiguration), { validated: true }),
            error: undefined,
            saving: false,
        }));
        callback === null || callback === void 0 ? void 0 : callback(true);
    }
    catch (e) {
        yield effects.put(actions.setSSOState({
            samlConfiguration: Object.assign(Object.assign({}, samlConfiguration), { validated: false }),
            error: e.message,
            saving: false,
        }));
        callback === null || callback === void 0 ? void 0 : callback(null, e);
    }
}
function* getAuthorizationRoles() {
    try {
        const data = yield effects.call(restApi.api.auth.getSamlRoles);
        const groupsData = yield effects.call(restApi.api.auth.getSamlRolesGroups);
        yield effects.put(actions.setSSOState({
            authorizationRoles: data.roleIds,
            rolesGroups: groupsData,
            error: undefined,
        }));
    }
    catch (e) {
        yield effects.put(actions.setSSOState({
            error: e.message,
        }));
    }
}
function* updateRolesGroups(groups) {
    try {
        yield effects.all(groups.map((group) => effects.call(restApi.api.auth.updateSamlGroup, { id: group.id, roleIds: group.roleIds, group: group.group })));
    }
    catch (e) {
        yield effects.put(actions.setSSOState({
            error: e.message,
        }));
    }
}
function* updateAuthorizationRoles({ payload: { callback, authorizationRoles, groups }, }) {
    try {
        yield effects.put(actions.setSSOState({ error: undefined, saving: true }));
        yield effects.call(restApi.api.auth.updateSamlRoles, { roleIds: authorizationRoles });
        if (groups) {
            yield updateRolesGroups(groups);
        }
        yield getAuthorizationRoles();
        yield effects.put(actions.setSSOState({ error: undefined, saving: false }));
        callback === null || callback === void 0 ? void 0 : callback(true);
    }
    catch (e) {
        yield effects.put(actions.setSSOState({
            error: e.message,
            saving: false,
        }));
        callback === null || callback === void 0 ? void 0 : callback(null, e);
    }
}
function* deleteSamlGroupFunction({ payload: { callback, id } }) {
    try {
        yield effects.put(actions.setSSOState({ error: undefined, saving: true }));
        yield effects.call(restApi.api.auth.deleteSamlGroup, { id });
        yield getAuthorizationRoles();
        yield effects.put(actions.setSSOState({ error: undefined, saving: false }));
        callback === null || callback === void 0 ? void 0 : callback(true);
    }
    catch (e) {
        yield effects.put(actions.setSSOState({
            error: e.message,
            saving: false,
        }));
        callback === null || callback === void 0 ? void 0 : callback(null, e);
    }
}
function* createSamlGroupFunction({ payload: { group, roleIds, callback } }) {
    try {
        yield effects.put(actions.setSSOState({ error: undefined, saving: true }));
        yield effects.call(restApi.api.auth.createSamlGroup, { group, roleIds });
        yield getAuthorizationRoles();
        yield effects.put(actions.setSSOState({ error: undefined, saving: false }));
        callback === null || callback === void 0 ? void 0 : callback(true);
    }
    catch (e) {
        yield effects.put(actions.setSSOState({
            error: e.message,
            saving: false,
        }));
        callback === null || callback === void 0 ? void 0 : callback(null, e);
    }
}
function* oidcPostloginFunction({ payload }) {
    var _a;
    const data = { code: payload.code, redirectUri: payload.redirectUri, RelayState: payload.state };
    try {
        yield effects.put(actions.setSSOState({ loading: true }));
        yield effects.call(restApi.api.auth.oidcPostLoginV2, data);
        yield refreshToken();
        yield effects.put(actions.setSSOState({ loading: false }));
    }
    catch (e) {
        yield effects.put(actions.setSSOState({ loading: false, error: (_a = e.message) !== null && _a !== void 0 ? _a : 'Failed to authenticate', firstLoad: false }));
    }
}
function* ssoSagas$1() {
    yield effects.takeEvery(actions.loadSSOConfigurations, loadSSOConfigurations);
    yield effects.takeEvery(actions.saveSSOConfigurations, saveSSOConfigurations);
    yield effects.takeEvery(actions.saveSSOConfigurationsFile, saveSSOConfigurationsFile);
    yield effects.takeEvery(actions.saveSSOConfigurationsFileWithCallback, saveSSOConfigurationsFileWithCallback);
    yield effects.takeEvery(actions.validateSSODomain, validateSSODomain);
    yield effects.takeEvery(actions.loadSSOAuthorizationRoles, getAuthorizationRoles);
    yield effects.takeEvery(actions.updateSSOAuthorizationRoles, updateAuthorizationRoles);
    yield effects.takeEvery(actions.deleteSamlGroup, deleteSamlGroupFunction);
    yield effects.takeEvery(actions.createSamlGroup, createSamlGroupFunction);
    yield effects.takeEvery(actions.oidcPostlogin, oidcPostloginFunction);
}
/*********************************
 *  Preview Sagas
 *********************************/
function* loadSSOConfigurationsMock() {
    yield effects.put(actions.setSSOState({ loading: true }));
    yield vendor_index.delay();
    yield effects.put(actions.setSSOState({ samlConfiguration: samlConfigurationDemo, loading: false, firstLoad: false }));
}
function* saveSSOConfigurationsFileMock({ payload: configFile }) {
    const loaderKey = 'saving';
    yield effects.put(actions.setSSOState({ error: undefined, [loaderKey]: true }));
    const oldSamlConfiguration = yield effects.select((state) => state.auth.ssoState.samlConfiguration);
    const newSamlConfiguration = Object.assign(Object.assign(Object.assign({}, oldSamlConfiguration), { enabled: true }), configFile[0]);
    yield effects.put(actions.setSSOState({ samlConfiguration: newSamlConfiguration, error: undefined, [loaderKey]: false }));
}
function* saveSSOConfigurationsMock({ payload }) {
    var _a, _b;
    const { callback, samlVendor } = payload, newSamlConfiguration = tslib.__rest(payload, ["callback", "samlVendor"]);
    const oldSamlConfiguration = ssoStateDemo.samlConfiguration;
    const samlConfiguration = Object.assign(Object.assign({}, oldSamlConfiguration), newSamlConfiguration);
    let loaderKey = 'saving';
    if ((samlConfiguration === null || samlConfiguration === void 0 ? void 0 : samlConfiguration.enabled) !== oldSamlConfiguration.enabled) {
        loaderKey = 'loading';
    }
    const firstTimeConfigure = !(samlConfiguration === null || samlConfiguration === void 0 ? void 0 : samlConfiguration.domain);
    if (firstTimeConfigure) {
        yield effects.put(actions.setSSOState({ samlConfiguration: Object.assign(Object.assign({}, oldSamlConfiguration), samlConfiguration) }));
        return;
    }
    else {
        yield effects.put(actions.setSSOState({ error: undefined, [loaderKey]: true }));
    }
    yield vendor_index.delay();
    samlConfiguration.acsUrl = (_a = samlMetadataDemo === null || samlMetadataDemo === void 0 ? void 0 : samlMetadataDemo.configuration) === null || _a === void 0 ? void 0 : _a.acsUrl;
    samlConfiguration.spEntityId = (_b = samlMetadataDemo === null || samlMetadataDemo === void 0 ? void 0 : samlMetadataDemo.configuration) === null || _b === void 0 ? void 0 : _b.spEntityId;
    const updateSamlConfiguration = omitProps(samlConfiguration, [
        'validated',
        'generatedVerification',
        'createdAt',
        'updatedAt',
    ]);
    if ((oldSamlConfiguration === null || oldSamlConfiguration === void 0 ? void 0 : oldSamlConfiguration.domain) !== (updateSamlConfiguration === null || updateSamlConfiguration === void 0 ? void 0 : updateSamlConfiguration.domain)) {
        updateSamlConfiguration.ssoEndpoint = '';
        updateSamlConfiguration.publicCertificate = '';
        updateSamlConfiguration.signRequest = false;
    }
    updateSamlConfiguration.type = samlVendor === null || samlVendor === void 0 ? void 0 : samlVendor.toLowerCase();
    yield vendor_index.delay();
    yield effects.put(actions.setSSOState({ samlConfiguration: updateSamlConfiguration, error: undefined, [loaderKey]: false }));
    callback === null || callback === void 0 ? void 0 : callback(true);
}
function* validateSSODomainMock({ payload: { callback } = {} }) {
    const samlConfiguration = ssoStateDemo.samlConfiguration;
    yield effects.put(actions.setSSOState({ error: undefined, saving: true }));
    yield vendor_index.delay();
    yield effects.put(actions.setSSOState({
        samlConfiguration: Object.assign(Object.assign({}, samlConfiguration), { validated: true }),
        error: undefined,
        saving: false,
    }));
    callback === null || callback === void 0 ? void 0 : callback(true);
}
function* getAuthorizationRolesMock() {
    yield vendor_index.delay();
    const data = { roleIds: ['1', '2', '3'] };
    yield effects.put(actions.setSSOState({
        authorizationRoles: data.roleIds,
        error: undefined,
    }));
}
function* updateAuthorizationRolesMock({ payload: { callback, authorizationRoles }, }) {
    yield effects.put(actions.setSSOState({ error: undefined, saving: true }));
    yield vendor_index.delay();
    yield effects.put(actions.setSSOState({ authorizationRoles, error: undefined, saving: false }));
    callback === null || callback === void 0 ? void 0 : callback(true);
}
function* ssoSagasMock() {
    yield effects.takeEvery(actions.loadSSOConfigurations, loadSSOConfigurationsMock);
    yield effects.takeEvery(actions.saveSSOConfigurations, saveSSOConfigurationsMock);
    yield effects.takeEvery(actions.saveSSOConfigurationsFile, saveSSOConfigurationsFileMock);
    yield effects.takeEvery(actions.validateSSODomain, validateSSODomainMock);
    yield effects.takeEvery(actions.loadSSOAuthorizationRoles, getAuthorizationRolesMock);
    yield effects.takeEvery(actions.updateSSOAuthorizationRoles, updateAuthorizationRolesMock);
}

function* loadOidc() {
    try {
        const oidcConfiguration = yield effects.call(restApi.api.auth.getOidcConfiguration);
        return oidcConfiguration;
    }
    catch (e) {
        return null;
    }
}
function* loadSaml() {
    try {
        const samlMetadata = yield effects.call(restApi.api.metadata.getSamlMetadata);
        return samlMetadata;
    }
    catch (e) {
        return null;
    }
}
function* loadSSOConfigurationsV2() {
    try {
        yield effects.put(actions.setSSOLoader({ key: exports.SSOStateKeys.LOAD_SSO_CONFIGURATIONS, value: true }));
        const [oidcConfiguration, samlMetadata] = yield effects.all([effects.call(loadOidc), effects.call(loadSaml)]);
        const ssoConfigurations = yield effects.call(restApi.api.auth.getSSOConfigurations);
        yield effects.put(actions.setSSOState({
            ssoConfigurations,
            oidcConfiguration,
            samlMetadata
        }));
    }
    catch (error) {
        yield effects.put(actions.setSSOError({ key: exports.SSOStateKeys.LOAD_SSO_CONFIGURATIONS, value: error.message }));
    }
    finally {
        yield effects.put(actions.setSSOLoader({ key: exports.SSOStateKeys.LOAD_SSO_CONFIGURATIONS, value: false }));
    }
}
function* saveSSOConfigurationV2({ payload }) {
    var _a;
    yield effects.put(actions.setSSOLoader({ key: exports.SSOStateKeys.SAVE_SSO_CONFIGURATION, value: true }));
    const { callback } = payload, ssoConfiguration = tslib.__rest(payload, ["callback"]);
    const ssoConfigurations = yield effects.select((state) => state.auth.ssoState.ssoConfigurations);
    try {
        const newSsoConfiguration = yield effects.call(restApi.api.auth.createSSOConfiguration, Object.assign(Object.assign({}, ssoConfiguration), { enabled: (_a = ssoConfiguration.enabled) !== null && _a !== void 0 ? _a : false }));
        yield effects.put(actions.setSSOState({ ssoConfigurations: [...ssoConfigurations, newSsoConfiguration] }));
        callback === null || callback === void 0 ? void 0 : callback(newSsoConfiguration);
    }
    catch (error) {
        yield effects.put(actions.setSSOError({ key: exports.SSOStateKeys.SAVE_SSO_CONFIGURATION, value: error.message }));
        callback === null || callback === void 0 ? void 0 : callback(null, error);
    }
    finally {
        yield effects.put(actions.setSSOLoader({ key: exports.SSOStateKeys.SAVE_SSO_CONFIGURATION, value: false }));
    }
}
function* saveSSOConfigurationByMetadata({ payload }) {
    yield effects.put(actions.setSSOLoader({ key: exports.SSOStateKeys.SAVE_SSO_CONFIGURATION_BY_METADATA, value: true }));
    const { configFile, callback } = payload;
    const ssoConfigurations = yield effects.select((state) => state.auth.ssoState.ssoConfigurations);
    try {
        const metadata = yield readFileAsText(configFile);
        const newSsoConfiguration = yield effects.call(restApi.api.auth.createSSOConfigurationByMetadata, { metadata });
        yield effects.put(actions.setSSOState({ ssoConfigurations: [...ssoConfigurations, newSsoConfiguration] }));
        callback === null || callback === void 0 ? void 0 : callback(newSsoConfiguration);
    }
    catch (error) {
        yield effects.put(actions.setSSOError({ key: exports.SSOStateKeys.SAVE_SSO_CONFIGURATION_BY_METADATA, value: error.message }));
        callback === null || callback === void 0 ? void 0 : callback(null, error);
    }
    finally {
        yield effects.put(actions.setSSOLoader({ key: exports.SSOStateKeys.SAVE_SSO_CONFIGURATION_BY_METADATA, value: false }));
    }
}
function* updateSSOConfiguration({ payload }) {
    yield effects.put(actions.setSSOLoader({ key: exports.SSOStateKeys.UPDATE_SSO_CONFIGURATION, value: true }));
    const { callback, ssoConfigId } = payload, ssoConfiguration = tslib.__rest(payload, ["callback", "ssoConfigId"]);
    const ssoConfigurations = yield effects.select((state) => state.auth.ssoState.ssoConfigurations);
    try {
        const newSsoConfiguration = yield effects.call(restApi.api.auth.updateSSOConfiguration, ssoConfigId, ssoConfiguration);
        const newSsoConfigurations = ssoConfigurations.map((ssoConfig) => ssoConfig.id === ssoConfigId ? newSsoConfiguration : ssoConfig);
        yield effects.put(actions.setSSOState({ ssoConfigurations: newSsoConfigurations }));
        callback === null || callback === void 0 ? void 0 : callback(newSsoConfiguration);
    }
    catch (error) {
        yield effects.put(actions.setSSOError({ key: exports.SSOStateKeys.UPDATE_SSO_CONFIGURATION, value: error.message }));
        callback === null || callback === void 0 ? void 0 : callback(null, error);
    }
    finally {
        yield effects.put(actions.setSSOLoader({ key: exports.SSOStateKeys.UPDATE_SSO_CONFIGURATION, value: false }));
    }
}
function* updateSSOConfigurationByMetadata({ payload }) {
    yield effects.put(actions.setSSOLoader({ key: exports.SSOStateKeys.UPDATE_SSO_CONFIGURATION_BY_METADATA, value: true }));
    const { callback, ssoConfigId, configFile } = payload;
    const ssoConfigurations = yield effects.select((state) => state.auth.ssoState.ssoConfigurations);
    try {
        const metadata = yield readFileAsText(configFile);
        const newSsoConfiguration = yield effects.call(restApi.api.auth.updateSSOConfigurationByMetadata, ssoConfigId, { metadata });
        const newSsoConfigurations = ssoConfigurations.map((ssoConfig) => ssoConfig.id === ssoConfigId ? newSsoConfiguration : ssoConfig);
        yield effects.put(actions.setSSOState({ ssoConfigurations: newSsoConfigurations }));
        callback === null || callback === void 0 ? void 0 : callback(newSsoConfiguration);
    }
    catch (error) {
        yield effects.put(actions.setSSOError({ key: exports.SSOStateKeys.UPDATE_SSO_CONFIGURATION, value: error.message }));
        callback === null || callback === void 0 ? void 0 : callback(null, error);
    }
    finally {
        yield effects.put(actions.setSSOLoader({ key: exports.SSOStateKeys.UPDATE_SSO_CONFIGURATION, value: false }));
    }
}
function* deleteSSOConfiguration({ payload }) {
    yield effects.put(actions.setSSOLoader({ key: exports.SSOStateKeys.DELETE_SSO_CONFIGURATION, value: true }));
    const { ssoConfigId, callback } = payload;
    const ssoConfigurations = yield effects.select((state) => state.auth.ssoState.ssoConfigurations);
    try {
        yield effects.call(restApi.api.auth.deleteSSOConfiguration, ssoConfigId);
        yield effects.put(actions.setSSOState({ ssoConfigurations: ssoConfigurations.filter(({ id }) => id !== ssoConfigId) }));
        callback === null || callback === void 0 ? void 0 : callback(true);
    }
    catch (error) {
        yield effects.put(actions.setSSOError({ key: exports.SSOStateKeys.DELETE_SSO_CONFIGURATION, value: error.message }));
        callback === null || callback === void 0 ? void 0 : callback(null, error);
    }
    finally {
        yield effects.put(actions.setSSOLoader({ key: exports.SSOStateKeys.DELETE_SSO_CONFIGURATION, value: false }));
    }
}
function* saveSSODomain({ payload }) {
    const { callback, ssoConfigId } = payload, body = tslib.__rest(payload, ["callback", "ssoConfigId"]);
    yield effects.put(actions.setSSOLoader({ key: exports.SSOStateKeys.SAVE_SSO_DOMAIN, value: true }));
    const ssoConfigurations = yield effects.select((state) => state.auth.ssoState.ssoConfigurations);
    try {
        const domain = yield effects.call(restApi.api.auth.createSSODomain, ssoConfigId, body);
        const newSsoConfigurations = ssoConfigurations.map((ssoConfig) => {
            if (ssoConfig.id === ssoConfigId) {
                return Object.assign(Object.assign({}, ssoConfig), { domains: [...ssoConfig.domains, domain] });
            }
            return ssoConfig;
        });
        yield effects.put(actions.setSSOState({ ssoConfigurations: newSsoConfigurations }));
        callback === null || callback === void 0 ? void 0 : callback(domain);
    }
    catch (error) {
        yield effects.put(actions.setSSOError({ key: exports.SSOStateKeys.SAVE_SSO_DOMAIN, value: error.message }));
        callback === null || callback === void 0 ? void 0 : callback(null, error);
    }
    finally {
        yield effects.put(actions.setSSOLoader({ key: exports.SSOStateKeys.SAVE_SSO_DOMAIN, value: false }));
    }
}
function* deleteSSODomain({ payload }) {
    const { ssoConfigId, domainId, callback } = payload;
    yield effects.put(actions.setSSOLoader({ key: exports.SSOStateKeys.DELETE_SSO_DOMAIN, value: true }));
    const ssoConfigurations = yield effects.select((state) => state.auth.ssoState.ssoConfigurations);
    try {
        yield effects.call(restApi.api.auth.deleteSSODomain, ssoConfigId, domainId);
        const newSsoConfigurations = ssoConfigurations.map((ssoConfig) => {
            if (ssoConfig.id === ssoConfigId) {
                return Object.assign(Object.assign({}, ssoConfig), { domains: ssoConfig.domains.filter(({ id }) => id !== domainId) });
            }
            return ssoConfig;
        });
        yield effects.put(actions.setSSOState({ ssoConfigurations: newSsoConfigurations }));
        callback === null || callback === void 0 ? void 0 : callback(true);
    }
    catch (error) {
        yield effects.put(actions.setSSOError({ key: exports.SSOStateKeys.DELETE_SSO_DOMAIN, value: error.message }));
        callback === null || callback === void 0 ? void 0 : callback(null, error);
    }
    finally {
        yield effects.put(actions.setSSOLoader({ key: exports.SSOStateKeys.DELETE_SSO_DOMAIN, value: false }));
    }
}
function* validateSSODomainV2({ payload }) {
    const { callback, domainId, ssoConfigId } = payload;
    yield effects.put(actions.setSSOLoader({ key: exports.SSOStateKeys.VALIDATE_SSO_DOMAIN, value: true }));
    const ssoConfigurations = yield effects.select((state) => state.auth.ssoState.ssoConfigurations);
    try {
        yield effects.call(restApi.api.auth.validateSSODomain, ssoConfigId, domainId);
        const newSsoConfigurations = ssoConfigurations.map((ssoConfig) => {
            if (ssoConfig.id === ssoConfigId) {
                return Object.assign(Object.assign({}, ssoConfig), { domains: ssoConfig.domains.map((ssoDomain) => ssoDomain.id === domainId ? Object.assign(Object.assign({}, ssoDomain), { validated: true }) : ssoDomain) });
            }
            return ssoConfig;
        });
        yield effects.put(actions.setSSOState({ ssoConfigurations: newSsoConfigurations }));
        callback === null || callback === void 0 ? void 0 : callback(true);
    }
    catch (error) {
        yield effects.put(actions.setSSOError({ key: exports.SSOStateKeys.VALIDATE_SSO_DOMAIN, value: error.message }));
        callback === null || callback === void 0 ? void 0 : callback(null, error);
    }
    finally {
        yield effects.put(actions.setSSOLoader({ key: exports.SSOStateKeys.VALIDATE_SSO_DOMAIN, value: false }));
    }
}
function* setSSODefaultRoles({ payload: { callback, ssoConfigId, roleIds }, }) {
    yield effects.put(actions.setSSOLoader({ key: exports.SSOStateKeys.UPDATE_SSO_DEFAULT_ROLES, value: true }));
    const ssoConfigurations = yield effects.select((state) => state.auth.ssoState.ssoConfigurations);
    try {
        yield effects.call(restApi.api.auth.setSSODefaultRoles, ssoConfigId, { roleIds });
        const newSsoConfigurations = ssoConfigurations.map((ssoConfig) => {
            if (ssoConfig.id === ssoConfigId) {
                return Object.assign(Object.assign({}, ssoConfig), { roleIds });
            }
            return ssoConfig;
        });
        yield effects.put(actions.setSSOState({ ssoConfigurations: newSsoConfigurations }));
        callback === null || callback === void 0 ? void 0 : callback(true);
    }
    catch (error) {
        yield effects.put(actions.setSSOError({ key: exports.SSOStateKeys.UPDATE_SSO_DEFAULT_ROLES, value: error.message }));
        callback === null || callback === void 0 ? void 0 : callback(null, error);
    }
    finally {
        yield effects.put(actions.setSSOLoader({ key: exports.SSOStateKeys.UPDATE_SSO_DEFAULT_ROLES, value: false }));
    }
}
function* setSSOGroups({ payload: { groupsToAdd, groupsToDelete, ssoConfigId, callback } }) {
    yield effects.put(actions.setSSOLoader({ key: exports.SSOStateKeys.SAVE_SSO_GROUPS, value: true }));
    const ssoConfigurations = yield effects.select((state) => state.auth.ssoState.ssoConfigurations);
    try {
        yield effects.all(groupsToDelete.map((groupId) => effects.call(restApi.api.auth.deleteSSOGroup, ssoConfigId, groupId)));
        yield effects.all(groupsToAdd.map((group) => effects.call(restApi.api.auth.createSSOGroup, ssoConfigId, group)));
        const groups = yield effects.call(restApi.api.auth.getSSOGroups, ssoConfigId);
        const newSsoConfigurations = ssoConfigurations.map((ssoConfig) => {
            if (ssoConfig.id === ssoConfigId) {
                return Object.assign(Object.assign({}, ssoConfig), { groups });
            }
            return ssoConfig;
        });
        yield effects.put(actions.setSSOState({ ssoConfigurations: newSsoConfigurations }));
        callback === null || callback === void 0 ? void 0 : callback(true);
    }
    catch (error) {
        yield effects.put(actions.setSSOError({ key: exports.SSOStateKeys.SAVE_SSO_GROUPS, value: error.message }));
        callback === null || callback === void 0 ? void 0 : callback(null, error);
    }
    finally {
        yield effects.put(actions.setSSOLoader({ key: exports.SSOStateKeys.SAVE_SSO_GROUPS, value: false }));
    }
}
function* updateSSOGroups({ payload: { ssoConfigId, changedGroups, callback } }) {
    try {
        yield effects.all(changedGroups.map((group) => effects.call(restApi.api.auth.updateSSOGroup, ssoConfigId, group)));
        callback === null || callback === void 0 ? void 0 : callback(true);
    }
    catch (error) {
        yield effects.put(actions.setSSOError({ key: exports.SSOStateKeys.SAVE_SSO_GROUPS, value: error.message }));
        callback === null || callback === void 0 ? void 0 : callback(null, error);
    }
    finally {
        yield effects.put(actions.setSSOLoader({ key: exports.SSOStateKeys.SAVE_SSO_GROUPS, value: false }));
    }
}
function* ssoSagas() {
    yield effects.takeEvery(actions.loadSSOConfigurationsV2, loadSSOConfigurationsV2);
    yield effects.takeEvery(actions.saveSSOConfigurationV2, saveSSOConfigurationV2);
    yield effects.takeEvery(actions.saveSSODomain, saveSSODomain);
    yield effects.takeEvery(actions.deleteSSODomain, deleteSSODomain);
    yield effects.takeEvery(actions.validateSSODomainV2, validateSSODomainV2);
    yield effects.takeEvery(actions.updateSSOConfiguration, updateSSOConfiguration);
    yield effects.takeEvery(actions.deleteSSOConfiguration, deleteSSOConfiguration);
    yield effects.takeEvery(actions.setSSOGroups, setSSOGroups);
    yield effects.takeEvery(actions.updateSSOGroups, updateSSOGroups);
    yield effects.takeEvery(actions.setSSODefaultRoles, setSSODefaultRoles);
    yield effects.takeEvery(actions.saveSSOConfigurationByMetadata, saveSSOConfigurationByMetadata);
    yield effects.takeEvery(actions.updateSSOConfigurationByMetadata, updateSSOConfigurationByMetadata);
}

function* loadProfile() {
    yield effects.put(actions.setProfileState({ loading: true }));
    try {
        const profile = yield effects.retry(3, 2000, restApi.api.teams.getProfile);
        const currentUser = yield effects.select((state) => state.auth.user);
        actions.setUser(Object.assign(Object.assign({}, currentUser), profile));
        yield effects.put(actions.setProfileState({ profile, loading: false }));
    }
    catch (e) {
        yield effects.put(actions.setProfileState({ loading: false, error: e.message }));
    }
}
function b64toBlob(base64, contentType) {
    const sliceSize = 512;
    const byteCharacters = atob(base64);
    const byteArrays = [];
    for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {
        const slice = byteCharacters.slice(offset, offset + sliceSize);
        const byteNumbers = new Array(slice.length);
        for (let i = 0; i < slice.length; i++) {
            byteNumbers[i] = slice.charCodeAt(i);
        }
        byteArrays.push(new Uint8Array(byteNumbers));
    }
    return new Blob(byteArrays, { type: contentType });
}
function base64ToFormData(base64, key = 'file') {
    const matchResult = base64.match(/^data:image\/([A-Za-z-+\/]+);base64,(.+)$/);
    if (matchResult == null) {
        return null;
    }
    // Get the content type of the image
    const contentType = `image/${matchResult[1]}`;
    // get the real base64 content of the file
    const data = matchResult[2];
    // Convert it to a blob to upload
    const blob = b64toBlob(data, contentType);
    // Create a FormData and append the file with "image" as parameter name
    const formDataToUpload = new FormData();
    formDataToUpload.append(key, new File([blob], key, { type: contentType }));
    return formDataToUpload;
}
function* saveProfile(_a) {
    var _b = _a.payload, { callback, profilePictureUrl } = _b, payload = tslib.__rest(_b, ["callback", "profilePictureUrl"]);
    yield effects.put(actions.setProfileState({ saving: true, error: null }));
    try {
        const oldProfileData = yield effects.select((state) => state.auth.profileState.profile);
        let newProfilePictureUrl = oldProfileData.profilePictureUrl;
        if (profilePictureUrl !== oldProfileData.profilePictureUrl && profilePictureUrl) {
            const matchResult = (profilePictureUrl || '').match(/^data:image\/([A-Za-z-+\/]+);base64,(.+)$/);
            if (matchResult) {
                const profileImage = base64ToFormData(profilePictureUrl, 'image');
                if (profileImage) {
                    newProfilePictureUrl = yield effects.call(restApi.api.teams.updateProfileImage, profileImage);
                    const imageTimeStamp = Date.now().toString();
                    const urlTemplate = new URL(newProfilePictureUrl);
                    urlTemplate.searchParams.set('t', imageTimeStamp);
                    newProfilePictureUrl = urlTemplate.href;
                }
            }
        }
        const newProfileData = Object.assign(Object.assign(Object.assign({}, oldProfileData), payload), { profilePictureUrl: newProfilePictureUrl });
        const profile = yield effects.call(restApi.api.teams.updateProfile, newProfileData);
        const currentUser = yield effects.select((state) => state.auth.user);
        yield effects.put(actions.setUser(Object.assign(Object.assign({}, currentUser), profile)));
        yield effects.put(actions.setProfileState({ profile, saving: false }));
        callback === null || callback === void 0 ? void 0 : callback(newProfileData);
    }
    catch (e) {
        yield effects.put(actions.setProfileState({ saving: false, error: e.message }));
        callback === null || callback === void 0 ? void 0 : callback(null, e);
    }
}
function* changePassword({ payload }) {
    var _a, _b;
    yield effects.put(actions.setProfileState({ loading: true }));
    try {
        yield effects.call(restApi.api.teams.changePassword, payload);
        yield effects.put(actions.setProfileState({ loading: false, error: undefined }));
        (_a = payload.callback) === null || _a === void 0 ? void 0 : _a.call(payload, true);
    }
    catch (e) {
        yield effects.put(actions.setProfileState({ loading: false, error: e.message }));
        (_b = payload.callback) === null || _b === void 0 ? void 0 : _b.call(payload, null, e);
    }
}
function* profileSagas() {
    yield effects.takeLeading(actions.loadProfile, loadProfile);
    yield effects.takeEvery(actions.saveProfile, saveProfile);
    yield effects.takeEvery(actions.changePassword, changePassword);
}
/*********************************
 *  Preview Sagas
 *********************************/
function* loadProfileMock() {
    yield effects.put(actions.setProfileState({ loading: true }));
    yield vendor_index.delay();
    yield effects.put(actions.setUser(Object.assign(Object.assign({}, (userDemo)), userProfileDemo)));
    yield effects.put(actions.setProfileState({ loading: false, profile: userProfileDemo }));
}
function* saveProfileMock(_a) {
    var _b = _a.payload, { callback, profilePictureUrl } = _b, payload = tslib.__rest(_b, ["callback", "profilePictureUrl"]);
    yield effects.put(actions.setProfileState({ saving: true, error: null }));
    const oldProfileData = profileStateDemo;
    let newProfilePictureUrl = oldProfileData.profile.profilePictureUrl;
    if (profilePictureUrl !== oldProfileData.profile.profilePictureUrl && profilePictureUrl) {
        const matchResult = (profilePictureUrl || '').match(/^data:image\/([A-Za-z-+\/]+);base64,(.+)$/);
        if (matchResult) {
            newProfilePictureUrl = profilePictureUrl;
        }
    }
    const newProfileData = Object.assign(Object.assign(Object.assign({}, oldProfileData.profile), payload), { profilePictureUrl: newProfilePictureUrl });
    const currentUser = userDemo;
    yield vendor_index.delay();
    yield effects.put(actions.setUser(Object.assign(Object.assign({}, currentUser), newProfileData)));
    yield effects.put(actions.setProfileState({ loading: false, error: null, saving: false, profile: newProfileData }));
    callback === null || callback === void 0 ? void 0 : callback(newProfileData);
}
function* changePasswordMock({ payload }) {
    var _a;
    yield effects.put(actions.setProfileState({ loading: true }));
    yield vendor_index.delay();
    yield effects.put(actions.setProfileState({ loading: false, error: undefined }));
    (_a = payload.callback) === null || _a === void 0 ? void 0 : _a.call(payload, true);
}
function* profileSagasMock() {
    yield effects.takeLeading(actions.loadProfile, loadProfileMock);
    yield effects.takeEvery(actions.saveProfile, saveProfileMock);
    yield effects.takeEvery(actions.changePassword, changePasswordMock);
}

function* enrollMfa() {
    yield effects.put(actions.setMfaState({ loading: true }));
    try {
        const { qrCode } = yield effects.call(restApi.api.auth.enrollMfa);
        yield effects.put(actions.setMfaState({ loading: false, error: undefined, qrCode }));
    }
    catch (e) {
        yield effects.put(actions.setMfaState({ loading: false, error: e.message }));
    }
}
function* verifyMfa(_a) {
    var _b = _a.payload, { callback } = _b, payload = tslib.__rest(_b, ["callback"]);
    yield effects.put(actions.setMfaState({ loading: true }));
    try {
        const user = yield effects.select((state) => state.auth.user);
        const data = yield effects.call(restApi.api.auth.verifyMfa, payload);
        const mfaState = {
            step: exports.MFAStep.recoveryCode,
            loading: false,
            error: undefined,
        };
        if (data === null || data === void 0 ? void 0 : data.recoveryCode) {
            mfaState.recoveryCode = data.recoveryCode;
        }
        yield effects.put(actions.setMfaState(mfaState));
        yield effects.put(actions.setUser(Object.assign(Object.assign({}, user), { mfaEnrolled: true })));
        callback === null || callback === void 0 ? void 0 : callback(mfaState.recoveryCode);
    }
    catch (e) {
        yield effects.put(actions.setMfaState({ loading: false, error: e.message }));
        callback === null || callback === void 0 ? void 0 : callback(null, e);
    }
}
function* verifyMfaAfterForce(_a) {
    var _b = _a.payload, { callback } = _b, payload = tslib.__rest(_b, ["callback"]);
    yield effects.put(actions.setMfaState({ loading: true }));
    try {
        const user = yield effects.call(restApi.api.auth.loginWithMfa, payload);
        const mfaState = {
            step: exports.MFAStep.recoveryCode,
            loading: false,
            error: undefined,
        };
        if (user === null || user === void 0 ? void 0 : user.recoveryCode) {
            mfaState.recoveryCode = user.recoveryCode;
        }
        yield effects.put(actions.setMfaState(mfaState));
        yield effects.put(actions.setState({ user }));
        yield effects.put(actions.loadTenants());
        callback === null || callback === void 0 ? void 0 : callback(mfaState.recoveryCode);
    }
    catch (e) {
        yield effects.put(actions.setMfaState({ loading: false, error: e.message }));
        callback === null || callback === void 0 ? void 0 : callback(null, e);
    }
}
function* disableMfa({ payload }) {
    var _a, _b;
    yield effects.put(actions.setMfaState({ loading: true }));
    try {
        const user = yield effects.select((state) => state.auth.user);
        yield restApi.api.auth.disableMfa(payload);
        yield effects.put(actions.setMfaState({ loading: false, error: undefined }));
        yield effects.put(actions.setUser(Object.assign(Object.assign({}, user), { mfaEnrolled: false })));
        (_a = payload.callback) === null || _a === void 0 ? void 0 : _a.call(payload, true);
    }
    catch (e) {
        yield effects.put(actions.setMfaState({ loading: false, error: e.message }));
        (_b = payload.callback) === null || _b === void 0 ? void 0 : _b.call(payload, false, e);
    }
}
function* mfaSagas() {
    yield effects.takeEvery(actions.enrollMfa, enrollMfa);
    yield effects.takeEvery(actions.verifyMfa, verifyMfa);
    yield effects.takeEvery(actions.disableMfa, disableMfa);
    yield effects.takeEvery(actions.verifyMfaAfterForce, verifyMfaAfterForce);
}
/*********************************
 *  Preview Sagas
 *********************************/
function* enrollMfaMock() {
    yield effects.put(actions.setMfaState({ loading: true }));
    const qrCode = 'test';
    yield effects.put(actions.setMfaState({ loading: false, error: undefined, qrCode }));
}
function* verifyMfaMock({ payload: { callback }, }) {
    yield effects.put(actions.setMfaState({ loading: true }));
    yield vendor_index.delay();
    const data = { token: 'token', recoveryCode: 'recoveryCode' };
    const mfaState = {
        step: exports.MFAStep.recoveryCode,
        loading: false,
        error: undefined,
    };
    if (data === null || data === void 0 ? void 0 : data.recoveryCode) {
        mfaState.recoveryCode = data.recoveryCode;
    }
    yield effects.put(actions.setMfaState(mfaState));
    yield effects.put(actions.setUser(Object.assign(Object.assign({}, userDemo), { mfaEnrolled: true })));
    callback === null || callback === void 0 ? void 0 : callback(mfaState.recoveryCode);
}
function* verifyMfaAfterForceMock(_a) {
    var _b = _a.payload, { callback } = _b, payload = tslib.__rest(_b, ["callback"]);
    yield effects.put(actions.setMfaState({ loading: true }));
    yield vendor_index.delay();
    const data = Object.assign(Object.assign({}, payload), { recoveryCode: 'recoveryCode' });
    const mfaState = {
        step: exports.MFAStep.recoveryCode,
        loading: false,
        error: undefined,
    };
    if (data === null || data === void 0 ? void 0 : data.recoveryCode) {
        mfaState.recoveryCode = data.recoveryCode;
    }
    yield effects.put(actions.setMfaState(mfaState));
    yield vendor_index.delay();
    yield effects.put(actions.setUser(Object.assign(Object.assign({}, userDemo), { mfaEnrolled: true })));
    callback === null || callback === void 0 ? void 0 : callback(mfaState.recoveryCode);
}
function* disableMfaMock({ payload }) {
    var _a;
    yield effects.put(actions.setMfaState({ loading: true }));
    yield vendor_index.delay();
    yield effects.put(actions.setMfaState({ loading: false, error: undefined }));
    yield effects.put(actions.setUser(Object.assign(Object.assign({}, userDemo), { mfaEnrolled: false })));
    (_a = payload.callback) === null || _a === void 0 ? void 0 : _a.call(payload, true);
}
function* mfaSagasMock() {
    yield effects.takeEvery(actions.enrollMfa, enrollMfaMock);
    yield effects.takeEvery(actions.verifyMfa, verifyMfaMock);
    yield effects.takeEvery(actions.disableMfa, disableMfaMock);
    yield effects.takeEvery(actions.verifyMfaAfterForce, verifyMfaAfterForceMock);
}

function* forgotPassword({ payload }) {
    yield effects.put(actions.setForgotPasswordState({ loading: true }));
    try {
        yield effects.call(restApi.api.auth.forgotPassword, payload);
        yield effects.put(actions.setForgotPasswordState({ loading: false, error: undefined, step: exports.ForgotPasswordStep.success }));
    }
    catch (e) {
        yield effects.put(actions.setForgotPasswordState({ loading: false, error: e.message || 'Unknown error occurred' }));
    }
}
function* resetPassword(_a) {
    var _b = _a.payload, { callback } = _b, body = tslib.__rest(_b, ["callback"]);
    yield effects.put(actions.setForgotPasswordState({ loading: true }));
    try {
        yield effects.call(restApi.api.auth.resetPassword, body);
        yield effects.put(actions.setForgotPasswordState({ loading: false, error: undefined, step: exports.ForgotPasswordStep.success }));
        callback === null || callback === void 0 ? void 0 : callback(true);
    }
    catch (e) {
        yield effects.put(actions.setForgotPasswordState({ loading: false, error: e.message }));
        callback === null || callback === void 0 ? void 0 : callback(false);
    }
}
function* loadPasswordConfig({ payload }) {
    yield effects.put(actions.setForgotPasswordState({ loading: true }));
    try {
        const passwordConfig = yield effects.call(restApi.api.auth.loadPasswordConfig, payload);
        yield effects.put(actions.setForgotPasswordState({ loading: false, passwordConfig }));
    }
    catch (e) {
        yield effects.put(actions.setForgotPasswordState({ loading: false, error: e.message }));
    }
}
function* forgotPasswordSagas() {
    yield effects.takeLeading(actions.forgotPassword, forgotPassword);
    yield effects.takeLeading(actions.resetPassword, resetPassword);
    yield effects.takeLeading(actions.loadPasswordConfig, loadPasswordConfig);
}

function* preActivateAccount({ payload: { userId, token } }) {
    yield effects.put(actions.setActivateState({ loading: true, step: exports.ActivateAccountStep.activating }));
    try {
        const { isAuthenticated } = yield effects.select((state) => state.auth);
        if (isAuthenticated) {
            yield effects.put(actions.silentLogout());
        }
        const strategy = yield effects.call(restApi.api.auth.getActivateAccountStrategy, { userId, token });
        yield effects.put(actions.setActivateStrategyState({ strategy, loading: false, error: undefined }));
        if (strategy.shouldSetPassword) {
            yield effects.put(actions.setActivateState({ loading: false, step: exports.ActivateAccountStep.activatingForm }));
        }
    }
    catch (e) {
        yield effects.put(actions.setActivateState({ loading: false, error: e.message }));
    }
}
function* activateAccount(_a) {
    var _b;
    var _c = _a.payload, { callback, events } = _c, payload = tslib.__rest(_c, ["callback", "events"]);
    yield effects.put(actions.setActivateState({ loading: true }));
    try {
        const onRedirectTo = restApi.ContextHolder.onRedirectTo;
        const { routes } = yield effects.select((state) => state.auth);
        const data = yield effects.call(restApi.api.auth.activateAccount, payload);
        if (data.redirectLocation) {
            window.location.href = data.redirectLocation;
            return;
        }
        if (isMfaRequired(data)) {
            yield effects.put(actions.setActivateState({ step: exports.ActivateAccountStep.success }));
            const mfaRequiredState = yield getMfaRequiredState(data);
            yield effects.put(actions.setState(mfaRequiredState));
            yield effects.delay(1000);
            onRedirectTo(routes.loginUrl, { preserveQueryParams: true });
        }
        else {
            yield effects.put(actions.setActivateState({ step: exports.ActivateAccountStep.success }));
            const { user, tenants } = yield effects.call(restApi.api.auth.generateLoginResponseV2, data);
            (_b = events === null || events === void 0 ? void 0 : events.userVerified) === null || _b === void 0 ? void 0 : _b.call(events, { email: user.email, origin: exports.UserVeirifedOriginTypes.ACTIVATION_LINK, id: user.id, tenantId: user.tenantId, name: user.name, createdAt: new Date() });
            yield effects.put(actions.setTenantsState({ tenants, loading: false }));
            yield effects.put(actions.setState({ user, isAuthenticated: true }));
            yield effects.delay(1000);
            yield afterAuthNavigation();
            yield effects.put(actions.resetActivateState());
        }
        callback === null || callback === void 0 ? void 0 : callback(true);
    }
    catch (e) {
        yield effects.put(actions.setActivateState({ loading: false, error: e.message }));
    }
}
function* getActivateAccountStrategy({ payload, }) {
    const { callback } = payload, params = tslib.__rest(payload, ["callback"]);
    yield effects.put(actions.setActivateStrategyState({ loading: true }));
    try {
        const strategy = yield effects.call(restApi.api.auth.getActivateAccountStrategy, params);
        yield effects.put(actions.setActivateStrategyState({ strategy, loading: false, error: undefined }));
        callback === null || callback === void 0 ? void 0 : callback(strategy);
    }
    catch (e) {
        yield effects.put(actions.setActivateStrategyState({ loading: false, error: e.message }));
    }
}
function* resendActivationEmailFunction({ payload }) {
    yield effects.put(actions.setActivateState({ loading: true }));
    try {
        yield effects.call(restApi.api.auth.resendActivationEmail, { email: payload.email });
        yield effects.put(actions.setActivateState({ loading: false, error: undefined, resentEmail: true }));
    }
    catch (e) {
        yield effects.put(actions.setActivateState({ loading: false, error: e.message }));
    }
}
function* activateSagas() {
    yield effects.takeLeading(actions.activateAccount, activateAccount);
    yield effects.takeLeading(actions.preActivateAccount, preActivateAccount);
    yield effects.takeLeading(actions.getActivateAccountStrategy, getActivateAccountStrategy);
    yield effects.takeLeading(actions.resendActivationEmail, resendActivationEmailFunction);
}

function* acceptInvitation({ payload }) {
    if (!payload.token || !payload.userId) {
        yield effects.put(actions.setAcceptInvitationState({ error: undefined, step: exports.AcceptInvitationStep.invalid }));
        return;
    }
    try {
        yield effects.put(actions.setAcceptInvitationState({ error: undefined, step: exports.AcceptInvitationStep.pending }));
        yield effects.call(restApi.api.auth.acceptInvitation, payload);
        yield effects.put(actions.setState({
            isAuthenticated: false,
            user: null,
            acceptInvitationState: { error: undefined, step: exports.AcceptInvitationStep.success },
        }));
    }
    catch (e) {
        yield effects.put(actions.setAcceptInvitationState({ step: exports.AcceptInvitationStep.failed, error: e.message }));
    }
}
function* acceptInvitationSagas() {
    yield effects.takeLeading(actions.acceptInvitation, acceptInvitation);
}

exports.TeamStateKeys = void 0;
(function (TeamStateKeys) {
    TeamStateKeys["USERS"] = "USERS";
    TeamStateKeys["STATS"] = "STATS";
    TeamStateKeys["UPDATE_USER"] = "UPDATE_USER";
    TeamStateKeys["DELETE_USER"] = "DELETE_USER";
    TeamStateKeys["RESEND_ACTIVATE_LINK"] = "RESEND_ACTIVATE_LINK";
    TeamStateKeys["RESEND_INVITATION_LINK"] = "RESEND_INVITATION_LINK";
    TeamStateKeys["ROLES_AND_PERMISSIONS"] = "ROLES_AND_PERMISSIONS";
    TeamStateKeys["CREATE_TOKEN_LINK"] = "CREATE_TOKEN_LINK";
    TeamStateKeys["GET_TOKEN_LINK"] = "GET_TOKEN_LINK";
    TeamStateKeys["UPDATE_TOKEN_LINK"] = "UPDATE_TOKEN_LINK";
    TeamStateKeys["DELETE_TOKEN_LINK"] = "DELETE_TOKEN_LINK";
    TeamStateKeys["CONFIG_TOKEN_LINK"] = "CONFIG_TOKEN_LINK";
})(exports.TeamStateKeys || (exports.TeamStateKeys = {}));

const selectTeamState = () => effects.select((_) => _[constants.authStoreName].teamState);
function* loadUsers({ payload }) {
    var _a, _b, _c, _d;
    const { silentLoading, callback } = payload;
    const teamState = yield selectTeamState();
    const pageSize = (_a = payload.pageSize) !== null && _a !== void 0 ? _a : teamState.pageSize;
    const pageOffset = (_b = payload.pageOffset) !== null && _b !== void 0 ? _b : teamState.pageOffset;
    const filter = (_c = payload.filter) !== null && _c !== void 0 ? _c : teamState.filter;
    const sort = (_d = payload.sort) !== null && _d !== void 0 ? _d : teamState.sort;
    yield effects.put(actions.setTeamLoader({ key: exports.TeamStateKeys.USERS, value: !silentLoading }));
    yield effects.put(actions.setTeamState({
        pageSize,
        pageOffset,
        filter,
        sort,
    }));
    try {
        const [{ items: users, totalPages, totalItems }, { items: roles }, { items: permissions }] = yield effects.all([
            effects.call(restApi.api.teams.loadUsers, {
                pageSize,
                pageOffset,
                filter,
                sort,
            }),
            effects.call(restApi.api.teams.loadAvailableRoles),
            effects.call(restApi.api.teams.loadAvailablePermissions),
        ]);
        yield effects.put(actions.setTeamState({ users, totalPages, totalItems, roles, permissions }));
        callback === null || callback === void 0 ? void 0 : callback(users);
    }
    catch (e) {
        yield effects.put(actions.setTeamError({ key: exports.TeamStateKeys.USERS, value: e.message }));
        yield effects.put(actions.setTeamState({ totalPages: 0, users: [] }));
        callback === null || callback === void 0 ? void 0 : callback(null, e);
    }
    yield effects.put(actions.setTeamLoader({ key: exports.TeamStateKeys.USERS, value: false }));
}
function* loadAllSubTenantsUsers({ payload, }) {
    var _a, _b, _c, _d, _e;
    const { silentLoading, callback } = payload;
    const teamState = yield selectTeamState();
    const _limit = (_a = payload._limit) !== null && _a !== void 0 ? _a : teamState.allUsersQueryParams._limit;
    const _offset = (_b = payload._offset) !== null && _b !== void 0 ? _b : teamState.allUsersQueryParams._offset;
    const _filter = (_c = payload._filter) !== null && _c !== void 0 ? _c : teamState.allUsersQueryParams._filter;
    const _sortBy = (_d = payload._sortBy) !== null && _d !== void 0 ? _d : teamState.allUsersQueryParams._sortBy;
    const _order = (_e = payload._order) !== null && _e !== void 0 ? _e : teamState.allUsersQueryParams._order;
    const allUsersQueryParams = {
        _limit: _limit || 20,
        _offset: _offset || 0,
        _filter: _filter || '',
        _sortBy: _sortBy || 'name',
        _order: _order || 'DESC',
    };
    yield effects.put(actions.setTeamLoader({ key: exports.TeamStateKeys.USERS, value: !silentLoading }));
    yield effects.put(actions.setTeamState({
        allUsersQueryParams,
    }));
    try {
        const [{ items: users, _metadata: { totalPages, totalItems }, }, { items: roles }, { items: permissions },] = yield effects.all([
            effects.call(restApi.api.subTenants.loadAllUsers, Object.assign({}, allUsersQueryParams)),
            effects.call(restApi.api.teams.loadAvailableRoles),
            effects.call(restApi.api.teams.loadAvailablePermissions),
        ]);
        yield effects.put(actions.setTeamState({
            allUsers: users,
            totalPages,
            totalItems,
            roles,
            permissions,
        }));
        callback === null || callback === void 0 ? void 0 : callback(users);
    }
    catch (e) {
        yield effects.put(actions.setTeamError({ key: exports.TeamStateKeys.USERS, value: e.message }));
        yield effects.put(actions.setTeamState({ totalPages: 0, users: [] }));
        callback === null || callback === void 0 ? void 0 : callback(null, e);
    }
    yield effects.put(actions.setTeamLoader({ key: exports.TeamStateKeys.USERS, value: false }));
}
function* loadRoles({ payload }) {
    var _a, _b;
    yield effects.put(actions.setTeamLoader({ key: exports.TeamStateKeys.ROLES_AND_PERMISSIONS, value: true }));
    try {
        const [{ items: roles }, { items: permissions }] = yield effects.all([
            effects.call(restApi.api.teams.loadAvailableRoles),
            effects.call(restApi.api.teams.loadAvailablePermissions),
        ]);
        yield effects.put(actions.setTeamState({ roles, permissions }));
        (_a = payload === null || payload === void 0 ? void 0 : payload.callback) === null || _a === void 0 ? void 0 : _a.call(payload, { roles, permissions });
    }
    catch (e) {
        (_b = payload === null || payload === void 0 ? void 0 : payload.callback) === null || _b === void 0 ? void 0 : _b.call(payload, null, e);
        yield effects.put(actions.setTeamError({ key: exports.TeamStateKeys.ROLES_AND_PERMISSIONS, value: e.message }));
    }
    yield effects.put(actions.setTeamLoader({ key: exports.TeamStateKeys.ROLES_AND_PERMISSIONS, value: true }));
}
function* addUser({ payload }) {
    const { callback } = payload, body = tslib.__rest(payload, ["callback"]);
    const teamState = yield selectTeamState();
    yield effects.put(actions.setTeamState({ addUserDialogState: Object.assign(Object.assign({}, teamState.addUserDialogState), { loading: true }) }));
    try {
        const res = yield effects.call(restApi.api.teams.addUser, body);
        const { roles } = res, userWithoutRoleIds = tslib.__rest(res, ["roles"]);
        const roleIds = roles.map((role) => role.id);
        const newUser = Object.assign(Object.assign({}, userWithoutRoleIds), { roleIds });
        callback === null || callback === void 0 ? void 0 : callback(newUser);
        yield effects.put(actions.setTeamState({
            users: [newUser, ...teamState.users],
            addUserDialogState: { open: false, loading: false },
        }));
    }
    catch (e) {
        yield effects.put(actions.setTeamState({
            addUserDialogState: Object.assign(Object.assign({}, teamState.addUserDialogState), { loading: false, error: e.message }),
        }));
        callback === null || callback === void 0 ? void 0 : callback(null, e.message);
    }
}
function* addUserToSubTenants({ payload }) {
    const { callback } = payload, body = tslib.__rest(payload, ["callback"]);
    const teamState = yield selectTeamState();
    yield effects.put(actions.setTeamState({ addUserDialogState: Object.assign(Object.assign({}, teamState.addUserDialogState), { loading: true }) }));
    try {
        yield effects.call(restApi.api.subTenants.addUserToTenantAndSubTenants, body);
        const { items: users, _metadata: { totalPages, totalItems }, } = yield effects.call(restApi.api.subTenants.loadAllUsers, {
            _limit: 20,
            _offset: 0,
            _filter: '',
            _sortBy: 'name',
            _order: 'DESC',
        });
        yield effects.put(actions.setTeamState({
            allUsers: users,
            totalPages,
            totalItems,
            addUserDialogState: { open: false, loading: false },
        }));
        callback === null || callback === void 0 ? void 0 : callback(null);
    }
    catch (e) {
        yield effects.put(actions.setTeamState({
            addUserDialogState: Object.assign(Object.assign({}, teamState.addUserDialogState), { loading: false, error: e.message }),
        }));
        callback === null || callback === void 0 ? void 0 : callback(null, e.message);
    }
}
function* updateUser({ payload }) {
    var _a;
    const { callback, profileImage } = payload, body = tslib.__rest(payload, ["callback", "profileImage"]);
    const { id: userId } = body;
    const teamState = yield selectTeamState();
    const oldUserData = teamState.users.find((user) => user.id === body.id);
    yield effects.put(actions.setTeamLoader({ key: exports.TeamStateKeys.UPDATE_USER, value: userId || '' }));
    yield effects.put(actions.setTeamState({ addUserDialogState: Object.assign(Object.assign({}, teamState.addUserDialogState), { loading: true }) }));
    yield effects.put(actions.setTeamState({
        addUserDialogState: Object.assign(Object.assign({}, teamState.addUserDialogState), { loading: true }),
        users: teamState.users.map((user) => {
            if (user.id === body.id) {
                return Object.assign(Object.assign({}, user), body);
            }
            return user;
        }),
    }));
    try {
        if (oldUserData.roleIds.length > 0 && ((_a = body.roleIds) === null || _a === void 0 ? void 0 : _a.length) === 0) {
            body.roleIds = [''];
        }
        const { item: newUser } = yield effects.call(restApi.api.teams.updateUser, body);
        callback === null || callback === void 0 ? void 0 : callback(newUser);
        yield effects.put(actions.setTeamState({
            users: teamState.users.map((user) => user.id === newUser.id
                ? Object.assign(Object.assign(Object.assign({}, user), newUser), { createdAt: user.createdAt, customData: user.customData, lastLogin: user.lastLogin }) : user),
        }));
        yield effects.put(actions.setTeamLoader({ key: exports.TeamStateKeys.UPDATE_USER, value: false }));
    }
    catch (e) {
        yield effects.put(actions.setTeamState({
            addUserDialogState: Object.assign(Object.assign({}, teamState.addUserDialogState), { loading: false, error: e.message }),
            users: teamState.users.map((user) => (user.id === body.id ? Object.assign(Object.assign({}, user), oldUserData) : user)),
        }));
        yield effects.put(actions.setTeamLoader({ key: exports.TeamStateKeys.UPDATE_USER, value: false }));
        callback === null || callback === void 0 ? void 0 : callback(null, e.message);
    }
}
function* deleteUser({ payload }) {
    const { callback } = payload, body = tslib.__rest(payload, ["callback"]);
    const teamState = yield selectTeamState();
    yield effects.put(actions.setTeamState({ deleteUserDialogState: Object.assign(Object.assign({}, teamState.deleteUserDialogState), { loading: true }) }));
    try {
        yield effects.call(restApi.api.teams.deleteUser, body);
        callback === null || callback === void 0 ? void 0 : callback(true);
        yield effects.put(actions.setTeamState({
            users: teamState.users.filter((user) => user.id !== body.userId),
            deleteUserDialogState: { open: false, loading: false },
        }));
    }
    catch (e) {
        yield effects.put(actions.setTeamState({
            deleteUserDialogState: Object.assign(Object.assign({}, teamState.deleteUserDialogState), { loading: false, error: e.message }),
        }));
        callback === null || callback === void 0 ? void 0 : callback(null, e.message);
    }
}
function* setUserRolesForSubTenants({ payload, }) {
    const { callback, userId } = payload, body = tslib.__rest(payload, ["callback", "userId"]);
    const teamState = yield selectTeamState();
    yield effects.put(actions.setTeamState({ addUserDialogState: Object.assign(Object.assign({}, teamState.addUserDialogState), { loading: true }) }));
    try {
        yield effects.call(restApi.api.subTenants.setUserRolesForSubTenants, userId, body);
        const updatedUser = teamState.allUsers.find((user) => user.id === userId);
        let newTenants = [];
        if (updatedUser) {
            newTenants = updatedUser.tenants.map((tenant) => {
                var _a;
                return (Object.assign(Object.assign({}, tenant), { roles: ((_a = body.subTenantsRoles
                        .find((roleUpdate) => roleUpdate.tenantId === tenant.tenantId)) === null || _a === void 0 ? void 0 : _a.roleIds.map((roleId) => {
                        const role = teamState.roles.find(({ id }) => roleId === id);
                        return role;
                    }).filter((role) => role)) || tenant.roles }));
            });
        }
        yield effects.put(actions.setTeamState({
            allUsers: [
                ...teamState.allUsers.filter((user) => user.id !== userId),
                ...(updatedUser ? [Object.assign(Object.assign({}, updatedUser), { tenants: newTenants })] : []),
            ],
            addUserDialogState: { open: false, loading: false },
        }));
        callback === null || callback === void 0 ? void 0 : callback(true);
    }
    catch (e) {
        yield effects.put(actions.setTeamState({
            addUserDialogState: Object.assign(Object.assign({}, teamState.addUserDialogState), { loading: false, error: e.message }),
        }));
        callback === null || callback === void 0 ? void 0 : callback(null, e.message);
    }
}
function* deleteUserFromSubTenants({ payload }) {
    const { callback } = payload, body = tslib.__rest(payload, ["callback"]);
    const teamState = yield selectTeamState();
    yield effects.put(actions.setTeamState({ deleteUserDialogState: Object.assign(Object.assign({}, teamState.deleteUserDialogState), { loading: true }) }));
    try {
        yield effects.call(restApi.api.subTenants.removeUserFromTenantAndSubTenants, body);
        callback === null || callback === void 0 ? void 0 : callback(true);
        yield effects.put(actions.setTeamState({
            allUsers: teamState.allUsers.filter((user) => user.id !== body.userId && user.tenants.length === body.subTenants.length),
            deleteUserDialogState: { open: false, loading: false },
        }));
    }
    catch (e) {
        yield effects.put(actions.setTeamState({
            deleteUserDialogState: Object.assign(Object.assign({}, teamState.deleteUserDialogState), { loading: false, error: e.message }),
        }));
        callback === null || callback === void 0 ? void 0 : callback(null, e.message);
    }
}
function* resendActivationLink({ payload }) {
    const { callback } = payload, body = tslib.__rest(payload, ["callback"]);
    yield effects.put(actions.setTeamLoader({ key: exports.TeamStateKeys.RESEND_ACTIVATE_LINK, value: body.userId }));
    try {
        yield effects.call(restApi.api.teams.resendActivationLink, body);
        callback === null || callback === void 0 ? void 0 : callback(true);
    }
    catch (e) {
        yield effects.put(actions.setTeamError({ key: exports.TeamStateKeys.RESEND_ACTIVATE_LINK, value: e.message }));
        callback === null || callback === void 0 ? void 0 : callback(null, e.message);
    }
    yield effects.put(actions.setTeamLoader({ key: exports.TeamStateKeys.RESEND_ACTIVATE_LINK, value: false }));
}
function* resendInvitationLink({ payload }) {
    const { callback } = payload, body = tslib.__rest(payload, ["callback"]);
    yield effects.put(actions.setTeamLoader({ key: exports.TeamStateKeys.RESEND_INVITATION_LINK, value: body.email }));
    try {
        yield effects.call(restApi.api.teams.resendInvitationLink, body);
        callback === null || callback === void 0 ? void 0 : callback(true);
    }
    catch (e) {
        yield effects.put(actions.setTeamError({ key: exports.TeamStateKeys.RESEND_INVITATION_LINK, value: e.message }));
        callback === null || callback === void 0 ? void 0 : callback(null, e.message);
    }
    yield effects.put(actions.setTeamLoader({ key: exports.TeamStateKeys.RESEND_INVITATION_LINK, value: false }));
}
function* resendInvitationLinkToAllSubTenants({ payload, }) {
    const { callback } = payload, body = tslib.__rest(payload, ["callback"]);
    yield effects.put(actions.setTeamLoader({ key: exports.TeamStateKeys.RESEND_INVITATION_LINK, value: body.email }));
    try {
        yield effects.call(restApi.api.teams.resendInvitationLinkToAllTenants, body);
        callback === null || callback === void 0 ? void 0 : callback(true);
    }
    catch (e) {
        yield effects.put(actions.setTeamError({ key: exports.TeamStateKeys.RESEND_INVITATION_LINK, value: e.message }));
        callback === null || callback === void 0 ? void 0 : callback(null, e.message);
    }
    yield effects.put(actions.setTeamLoader({ key: exports.TeamStateKeys.RESEND_INVITATION_LINK, value: false }));
}
function* getInvitationLinkConfig() {
    yield effects.put(actions.setTeamError({ key: exports.TeamStateKeys.CONFIG_TOKEN_LINK, value: false }));
    try {
        const invitationLinkConfig = yield effects.call(restApi.api.teams.getInviteLinkConfiguration);
        yield effects.put(actions.setTeamState({ inviteTokenState: Object.assign({}, invitationLinkConfig) }));
    }
    catch (e) {
        yield effects.put(actions.setTeamError({ key: exports.TeamStateKeys.CONFIG_TOKEN_LINK, value: e.message }));
    }
}
function* getInvitationLink() {
    yield effects.put(actions.setTeamError({ key: exports.TeamStateKeys.GET_TOKEN_LINK, value: false }));
    try {
        yield effects.call(getInvitationLinkConfig);
        const data = yield effects.call(restApi.api.teams.getInviteUserLink);
        const { inviteTokenState } = yield selectTeamState();
        yield effects.put(actions.setTeamState({ inviteTokenState: Object.assign(Object.assign({}, inviteTokenState), data) }));
    }
    catch (e) {
        yield effects.put(actions.setTeamError({ key: exports.TeamStateKeys.GET_TOKEN_LINK, value: e.message }));
    }
}
function* createInvitationLink({ payload: { callback }, }) {
    yield effects.put(actions.setTeamError({ key: exports.TeamStateKeys.CREATE_TOKEN_LINK, value: false }));
    const { inviteTokenState } = yield selectTeamState();
    try {
        const data = yield effects.call(restApi.api.teams.createInviteUserLink, { expiresInMinutes: 43200 });
        yield effects.put(actions.setTeamState({ inviteTokenState: Object.assign(Object.assign({}, inviteTokenState), data) }));
        callback === null || callback === void 0 ? void 0 : callback(data.token);
    }
    catch (e) {
        callback === null || callback === void 0 ? void 0 : callback(null, e.message);
        yield effects.put(actions.setTeamError({ key: exports.TeamStateKeys.CREATE_TOKEN_LINK, value: e.message }));
    }
}
function* updateInvitationLink({ payload: { callback, expiresInMinutes, shouldSendEmail }, }) {
    const { inviteTokenState } = yield selectTeamState();
    yield effects.put(actions.setTeamError({ key: exports.TeamStateKeys.UPDATE_TOKEN_LINK, value: false }));
    try {
        const data = yield effects.call(restApi.api.teams.updateInviteUserLink, { expiresInMinutes, shouldSendEmail });
        yield effects.put(actions.setTeamState({ inviteTokenState: Object.assign(Object.assign({}, inviteTokenState), data) }));
        callback === null || callback === void 0 ? void 0 : callback(true);
    }
    catch (e) {
        callback === null || callback === void 0 ? void 0 : callback(null, e.message);
        yield effects.put(actions.setTeamError({ key: exports.TeamStateKeys.UPDATE_TOKEN_LINK, value: e.message }));
    }
}
function* deleteInvitationLink({ payload }) {
    const { callback } = payload !== null && payload !== void 0 ? payload : {};
    yield effects.put(actions.setTeamError({ key: exports.TeamStateKeys.DELETE_TOKEN_LINK, value: false }));
    try {
        yield effects.call(restApi.api.teams.deleteInviteUserLink);
        yield effects.put(actions.setTeamState({ inviteTokenState: undefined }));
        callback === null || callback === void 0 ? void 0 : callback(true);
    }
    catch (e) {
        yield effects.put(actions.setTeamError({ key: exports.TeamStateKeys.DELETE_TOKEN_LINK, value: e.message }));
        callback === null || callback === void 0 ? void 0 : callback(false, e.message);
    }
}
function* openAddUserDialog({ payload }) {
    yield effects.put(actions.setTeamState({
        addUserDialogState: Object.assign({ open: true, loading: false, error: false }, payload),
    }));
}
function* closeAddUserDialog({ payload }) {
    const teamState = yield selectTeamState();
    const { addUserDialogState: { onClose }, } = teamState;
    onClose === null || onClose === void 0 ? void 0 : onClose(payload);
    yield effects.put(actions.setTeamState({
        addUserDialogState: {
            loading: false,
            error: false,
            open: false,
        },
    }));
}
function* openDeleteUserDialog({ payload }) {
    yield effects.put(actions.setTeamState({
        deleteUserDialogState: Object.assign({ open: true, loading: false, error: false }, payload),
    }));
}
function* closeDeleteUserDialog({ payload }) {
    const teamState = yield selectTeamState();
    const { deleteUserDialogState: { onClose }, } = teamState;
    onClose === null || onClose === void 0 ? void 0 : onClose(payload);
    yield effects.put(actions.setTeamState({
        deleteUserDialogState: {
            loading: false,
            error: false,
            open: false,
        },
    }));
}
function* teamSagas() {
    yield effects.takeLatest(actions.loadUsers, loadUsers);
    yield effects.takeLatest(actions.loadAllSubTenantsUsers, loadAllSubTenantsUsers);
    yield effects.takeLatest(actions.loadRoles, loadRoles);
    yield effects.takeEvery(actions.addUser, addUser);
    yield effects.takeEvery(actions.addUserToSubTenants, addUserToSubTenants);
    yield effects.takeEvery(actions.updateUser, updateUser);
    yield effects.takeEvery(actions.setUserRolesForSubTenants, setUserRolesForSubTenants);
    yield effects.takeEvery(actions.deleteUser, deleteUser);
    yield effects.takeEvery(actions.deleteUserFromSubTenants, deleteUserFromSubTenants);
    yield effects.takeEvery(actions.resendActivationLink, resendActivationLink);
    yield effects.takeEvery(actions.resendInvitationLink, resendInvitationLink);
    yield effects.takeEvery(actions.resendInvitationLinkToAllSubTenants, resendInvitationLinkToAllSubTenants);
    yield effects.takeEvery(actions.getInvitationLink, getInvitationLink);
    yield effects.takeEvery(actions.createInvitationLink, createInvitationLink);
    yield effects.takeEvery(actions.updateInvitationLink, updateInvitationLink);
    yield effects.takeEvery(actions.deleteInvitationLink, deleteInvitationLink);
    yield effects.takeEvery(actions.openAddUserDialog, openAddUserDialog);
    yield effects.takeEvery(actions.closeAddUserDialog, closeAddUserDialog);
    yield effects.takeEvery(actions.openDeleteUserDialog, openDeleteUserDialog);
    yield effects.takeEvery(actions.closeDeleteUserDialog, closeDeleteUserDialog);
}
/*********************************
 *  Preview Sagas
 *********************************/
function* loadUsersMock({ payload }) {
    var _a, _b, _c, _d;
    const { silentLoading, callback } = payload;
    const teamState = yield selectTeamState();
    const pageSize = (_a = payload.pageSize) !== null && _a !== void 0 ? _a : teamState.pageSize;
    const pageOffset = (_b = payload.pageOffset) !== null && _b !== void 0 ? _b : teamState.pageOffset;
    const filter = (_c = payload.filter) !== null && _c !== void 0 ? _c : teamState.filter;
    const sort = (_d = payload.sort) !== null && _d !== void 0 ? _d : teamState.sort;
    yield effects.put(actions.setTeamLoader({ key: exports.TeamStateKeys.USERS, value: !silentLoading }));
    yield effects.put(actions.setTeamState({
        pageSize,
        pageOffset,
        filter,
        sort,
    }));
    const totalPages = 2;
    const totalItems = 10;
    yield vendor_index.delay();
    yield effects.put(actions.setTeamState({ users: usersDemo, totalPages, totalItems, roles: rolesDemo, permissions: permissionsDemo }));
    yield effects.put(actions.setTeamLoader({ key: exports.TeamStateKeys.USERS, value: false }));
    callback === null || callback === void 0 ? void 0 : callback(usersDemo);
}
function* loadAllSubTenantsUsersMock({ payload, }) {
    var _a, _b, _c, _d, _e;
    const { silentLoading, callback } = payload;
    const teamState = yield selectTeamState();
    const _limit = (_a = payload._limit) !== null && _a !== void 0 ? _a : teamState.allUsersQueryParams._limit;
    const _offset = (_b = payload._offset) !== null && _b !== void 0 ? _b : teamState.allUsersQueryParams._offset;
    const _filter = (_c = payload._filter) !== null && _c !== void 0 ? _c : teamState.allUsersQueryParams._filter;
    const _sortBy = (_d = payload._sortBy) !== null && _d !== void 0 ? _d : teamState.allUsersQueryParams._sortBy;
    const _order = (_e = payload._order) !== null && _e !== void 0 ? _e : teamState.allUsersQueryParams._order;
    yield effects.put(actions.setTeamLoader({ key: exports.TeamStateKeys.USERS, value: !silentLoading }));
    yield effects.put(actions.setTeamState({
        allUsersQueryParams: {
            _limit,
            _offset,
            _filter,
            _sortBy,
            _order,
        },
    }));
    const totalPages = 2;
    const totalItems = 10;
    yield vendor_index.delay();
    yield effects.put(actions.setTeamState({
        allUsers: allUsersDemo,
        totalPages,
        totalItems,
        roles: rolesDemo,
        permissions: permissionsDemo,
    }));
    yield effects.put(actions.setTeamLoader({ key: exports.TeamStateKeys.USERS, value: false }));
    callback === null || callback === void 0 ? void 0 : callback(allUsersDemo);
}
function* loadRolesMock({ payload }) {
    var _a;
    yield effects.put(actions.setTeamLoader({ key: exports.TeamStateKeys.ROLES_AND_PERMISSIONS, value: true }));
    yield vendor_index.delay();
    yield effects.put(actions.setTeamState({ roles: rolesDemo, permissions: permissionsDemo }));
    yield effects.put(actions.setTeamLoader({ key: exports.TeamStateKeys.ROLES_AND_PERMISSIONS, value: true }));
    (_a = payload === null || payload === void 0 ? void 0 : payload.callback) === null || _a === void 0 ? void 0 : _a.call(payload, { roles: rolesDemo, permissions: permissionsDemo });
}
function* addUserMock({ payload }) {
    const { callback } = payload, body = tslib.__rest(payload, ["callback"]);
    const teamState = yield selectTeamState();
    yield effects.put(actions.setTeamState({ addUserDialogState: Object.assign(Object.assign({}, teamState.addUserDialogState), { loading: true }) }));
    yield vendor_index.delay();
    const newUser = Object.assign(Object.assign(Object.assign({}, userTeamDemo), body), { id: `${uuid.v4()}` });
    callback === null || callback === void 0 ? void 0 : callback(newUser);
    yield effects.put(actions.setTeamState({
        users: [newUser, ...teamState.users],
        addUserDialogState: { open: false, loading: false },
    }));
}
function* addUserToSubTenantsMock({ payload }) {
    const { callback } = payload, body = tslib.__rest(payload, ["callback"]);
    const teamState = yield selectTeamState();
    yield effects.put(actions.setTeamState({ addUserDialogState: Object.assign(Object.assign({}, teamState.addUserDialogState), { loading: true }) }));
    yield vendor_index.delay();
    const newUser = Object.assign(Object.assign(Object.assign({}, userTeamDemo), body), { id: `${uuid.v4()}` });
    yield effects.put(actions.setTeamState({
        users: [newUser, ...teamState.users],
        addUserDialogState: { open: false, loading: false },
    }));
    callback === null || callback === void 0 ? void 0 : callback(null);
}
function* updateUserMock({ payload }) {
    var _a;
    const { callback, profileImage } = payload, body = tslib.__rest(payload, ["callback", "profileImage"]);
    const { id: userId } = body;
    const teamState = yield selectTeamState();
    const oldUserData = teamState.users.find((user) => user.id === body.id);
    yield effects.put(actions.setTeamLoader({ key: exports.TeamStateKeys.UPDATE_USER, value: userId || '' }));
    yield effects.put(actions.setTeamState({ addUserDialogState: Object.assign(Object.assign({}, teamState.addUserDialogState), { loading: true }) }));
    yield effects.put(actions.setTeamState({
        addUserDialogState: Object.assign(Object.assign({}, teamState.addUserDialogState), { loading: true }),
        users: teamState.users.map((user) => {
            if (user.id === body.id) {
                return Object.assign(Object.assign({}, user), body);
            }
            return user;
        }),
    }));
    if (oldUserData.roleIds.length > 0 && ((_a = body.roleIds) === null || _a === void 0 ? void 0 : _a.length) === 0) {
        body.roleIds = [''];
    }
    yield vendor_index.delay();
    const newUser = Object.assign(Object.assign({}, oldUserData), body);
    callback === null || callback === void 0 ? void 0 : callback(newUser);
    yield effects.put(actions.setTeamState({
        users: teamState.users.map((user) => user.id === newUser.id
            ? Object.assign(Object.assign(Object.assign({}, user), newUser), { createdAt: user.createdAt, customData: user.customData, lastLogin: user.lastLogin }) : user),
    }));
    yield effects.put(actions.setTeamLoader({ key: exports.TeamStateKeys.UPDATE_USER, value: false }));
}
function* deleteUserMock({ payload }) {
    const { callback } = payload, body = tslib.__rest(payload, ["callback"]);
    const teamState = yield selectTeamState();
    yield effects.put(actions.setTeamState({ deleteUserDialogState: Object.assign(Object.assign({}, teamState.deleteUserDialogState), { loading: true }) }));
    yield vendor_index.delay();
    callback === null || callback === void 0 ? void 0 : callback(true);
    yield effects.put(actions.setTeamState({
        users: teamState.users.filter((user) => user.id !== body.userId),
        deleteUserDialogState: { open: false, loading: false },
    }));
}
function* deleteUserFromSubTenantsMock({ payload }) {
    const { callback } = payload, body = tslib.__rest(payload, ["callback"]);
    const teamState = yield selectTeamState();
    yield effects.put(actions.setTeamState({ deleteUserDialogState: Object.assign(Object.assign({}, teamState.deleteUserDialogState), { loading: true }) }));
    yield vendor_index.delay();
    callback === null || callback === void 0 ? void 0 : callback(true);
    yield effects.put(actions.setTeamState({
        allUsers: teamState.allUsers.filter((user) => user.id !== body.userId),
        deleteUserDialogState: { open: false, loading: false },
    }));
}
function* resendActivationLinkMock({ payload }) {
    const { callback } = payload, body = tslib.__rest(payload, ["callback"]);
    yield effects.put(actions.setTeamLoader({ key: exports.TeamStateKeys.RESEND_ACTIVATE_LINK, value: body.userId }));
    yield vendor_index.delay();
    callback === null || callback === void 0 ? void 0 : callback(true);
    yield effects.put(actions.setTeamLoader({ key: exports.TeamStateKeys.RESEND_ACTIVATE_LINK, value: false }));
}
function* resendInvitationLinkMock({ payload }) {
    const { callback } = payload, body = tslib.__rest(payload, ["callback"]);
    yield effects.put(actions.setTeamLoader({ key: exports.TeamStateKeys.RESEND_INVITATION_LINK, value: body.email }));
    yield vendor_index.delay();
    callback === null || callback === void 0 ? void 0 : callback(true);
    yield effects.put(actions.setTeamLoader({ key: exports.TeamStateKeys.RESEND_INVITATION_LINK, value: false }));
}
function* resendInvitationLinkToAllSubTenantsMock({ payload, }) {
    const { callback } = payload, body = tslib.__rest(payload, ["callback"]);
    yield effects.put(actions.setTeamLoader({ key: exports.TeamStateKeys.RESEND_INVITATION_LINK, value: body.email }));
    yield vendor_index.delay();
    callback === null || callback === void 0 ? void 0 : callback(true);
    yield effects.put(actions.setTeamLoader({ key: exports.TeamStateKeys.RESEND_INVITATION_LINK, value: false }));
}
function* teamSagasMock() {
    yield effects.takeLatest(actions.loadUsers, loadUsersMock);
    yield effects.takeLatest(actions.loadAllSubTenantsUsers, loadAllSubTenantsUsersMock);
    yield effects.takeLatest(actions.loadRoles, loadRolesMock);
    yield effects.takeEvery(actions.addUser, addUserMock);
    yield effects.takeEvery(actions.addUserToSubTenants, addUserToSubTenantsMock);
    yield effects.takeEvery(actions.updateUser, updateUserMock);
    yield effects.takeEvery(actions.deleteUser, deleteUserMock);
    yield effects.takeEvery(actions.deleteUserFromSubTenants, deleteUserFromSubTenantsMock);
    yield effects.takeEvery(actions.resendActivationLink, resendActivationLinkMock);
    yield effects.takeEvery(actions.resendInvitationLink, resendInvitationLinkMock);
    yield effects.takeEvery(actions.resendInvitationLinkToAllSubTenants, resendInvitationLinkToAllSubTenantsMock);
    yield effects.takeEvery(actions.openAddUserDialog, openAddUserDialog);
    yield effects.takeEvery(actions.closeAddUserDialog, closeAddUserDialog);
    yield effects.takeEvery(actions.openDeleteUserDialog, openDeleteUserDialog);
    yield effects.takeEvery(actions.closeDeleteUserDialog, closeDeleteUserDialog);
}

function* loadSocialLoginsConfigurations() {
    try {
        yield effects.put(actions.setSocialLoginsState({ loading: true }));
        const socialLoginsConfig = yield effects.call(restApi.api.auth.getSocialLoginProviders);
        yield effects.put(actions.setSocialLoginsState({ socialLoginsConfig, loading: false, firstLoad: false }));
    }
    catch (e) {
        yield effects.put(actions.setSocialLoginsState({ error: e.message, loading: false, firstLoad: false }));
    }
}
function* loadSocialLoginsConfigurationsV2() {
    try {
        const context = yield effects.select((state) => state.root.context);
        yield effects.put(actions.setSocialLoginsState({ loading: true }));
        const socialLoginsConfigV2 = yield effects.call(restApi.api.auth.getSocialLoginProvidersV2);
        const socialLoginsConfigWithFullUrl = socialLoginsConfigV2.map((_a) => {
            var { authorizationUrl } = _a, config = tslib.__rest(_a, ["authorizationUrl"]);
            const baseUrl = restApi.fetch.getBaseUrl(context, authorizationUrl !== null && authorizationUrl !== void 0 ? authorizationUrl : '');
            return (Object.assign(Object.assign({}, config), { authorizationUrl: authorizationUrl ? `${baseUrl}${authorizationUrl}` : null }));
        });
        yield effects.put(actions.setSocialLoginsState({ socialLoginsConfigV2: socialLoginsConfigWithFullUrl, loading: false, firstLoad: false }));
    }
    catch (e) {
        yield effects.put(actions.setSocialLoginsState({ error: e.message, loading: false, firstLoad: false }));
    }
}
function* loginViaSocialLogin(_a) {
    var _b, _c, _d;
    var _e = _a.payload, { events, url } = _e, payload = tslib.__rest(_e, ["events", "url"]);
    try {
        yield effects.put(actions.setSocialLoginsState({ loading: true }));
        const { email, isNewUser, userId, tenantId, name, } = yield effects.call(restApi.api.auth.loginViaSocialLogin, payload);
        if (isNewUser) {
            (_b = events === null || events === void 0 ? void 0 : events.signUpComplete) === null || _b === void 0 ? void 0 : _b.call(events, {
                email,
                url,
                authenticationType: exports.AuthenticationTypes.SOCIAL_LOGIN,
                createdAt: new Date(),
                id: userId,
                socialProvider: payload.provider,
                tenantId,
            });
            (_c = events === null || events === void 0 ? void 0 : events.userVerified) === null || _c === void 0 ? void 0 : _c.call(events, {
                email,
                origin: exports.UserVeirifedOriginTypes.SOCIAL_LOGIN,
                createdAt: new Date(),
                id: userId,
                url,
                tenantId,
                name,
            });
        }
        if (email) {
            localStorage.setItem('email', email);
            localStorage.setItem('name', name);
        }
        yield effects.put(actions.setLoginState({ email, isNewUser }));
        yield refreshToken();
        localStorage.removeItem('register-quick-login');
        yield effects.put(actions.setSocialLoginsState({ loading: false }));
    }
    catch (e) {
        yield effects.put(actions.setSocialLoginsState({ loading: false, error: (_d = e.message) !== null && _d !== void 0 ? _d : 'Failed to authenticate', firstLoad: false }));
    }
}
function* setSocialLoginError({ payload }) {
    yield effects.put(actions.setSocialLoginsState({ error: payload.error, loading: false, firstLoad: false }));
}
function* socialLoginsSaga() {
    yield effects.takeLeading(actions.loadSocialLoginsConfiguration, loadSocialLoginsConfigurations);
    yield effects.takeLeading(actions.loadSocialLoginsConfigurationV2, loadSocialLoginsConfigurationsV2);
    yield effects.takeLeading(actions.loginViaSocialLogin, loginViaSocialLogin);
    yield effects.takeLatest(actions.setSocialLoginError, setSocialLoginError);
}

exports.ApiStateKeys = void 0;
(function (ApiStateKeys) {
    ApiStateKeys["LOAD_API_TOKENS"] = "LOAD_API_TOKENS";
    ApiStateKeys["ADD_API_TOKEN"] = "ADD_API_TOKEN";
    ApiStateKeys["DELETE_API_TOKEN"] = "DELETE_API_TOKEN";
})(exports.ApiStateKeys || (exports.ApiStateKeys = {}));

function* loadApiTokensData({ payload: apiTokenType }) {
    yield effects.put(actions.setApiTokensState({ apiTokenType }));
    try {
        yield effects.put(actions.setApiTokensLoader({ key: exports.ApiStateKeys.LOAD_API_TOKENS, value: true }));
        if (apiTokenType === 'user') {
            const apiTokensData = yield effects.call(restApi.api.auth.getUserApiTokensData);
            yield effects.put(actions.setApiTokensState({ apiTokensDataUser: apiTokensData !== null && apiTokensData !== void 0 ? apiTokensData : [] }));
        }
        else {
            const apiTenantTokensData = yield effects.call(restApi.api.auth.getTenantApiTokensData);
            const { items: roles } = yield effects.call(restApi.api.teams.loadAvailableRoles);
            const { items: permissions } = yield effects.call(restApi.api.teams.loadAvailablePermissions);
            yield effects.put(actions.setApiTokensState({
                apiTokensDataTenant: apiTenantTokensData !== null && apiTenantTokensData !== void 0 ? apiTenantTokensData : [],
                roles: roles !== null && roles !== void 0 ? roles : [],
                permissions: permissions !== null && permissions !== void 0 ? permissions : [],
            }));
        }
        yield effects.put(actions.setApiTokensLoader({ key: exports.ApiStateKeys.LOAD_API_TOKENS, value: false }));
    }
    catch (e) {
        yield effects.put(actions.setApiTokensError({ key: exports.ApiStateKeys.LOAD_API_TOKENS, value: e.message }));
        yield effects.put(actions.setApiTokensLoader({ key: exports.ApiStateKeys.LOAD_API_TOKENS, value: false }));
    }
}
function* addUserApiToken({ payload }) {
    const { description, callback } = payload;
    const { apiTokensDataUser } = yield effects.select((state) => state.auth.apiTokensState);
    try {
        yield effects.put(actions.setApiTokensLoader({ key: exports.ApiStateKeys.ADD_API_TOKEN, value: true }));
        const data = yield effects.call(restApi.api.auth.updateUserApiTokensData, { description });
        yield effects.put(actions.setApiTokensState({ showAddTokenDialog: false }));
        yield effects.delay(200);
        yield effects.put(actions.setApiTokensState({
            apiTokensDataUser: [data, ...apiTokensDataUser],
            successDialog: { open: true, secret: data.secret, clientId: data.clientId },
        }));
        yield effects.put(actions.setApiTokensLoader({ key: exports.ApiStateKeys.ADD_API_TOKEN, value: false }));
        callback === null || callback === void 0 ? void 0 : callback(null);
    }
    catch (e) {
        yield effects.put(actions.setApiTokensError({ key: exports.ApiStateKeys.ADD_API_TOKEN, value: e.message }));
        yield effects.put(actions.setApiTokensLoader({ key: exports.ApiStateKeys.ADD_API_TOKEN, value: false }));
        callback === null || callback === void 0 ? void 0 : callback(null, e.message);
    }
}
function* addTenantApiToken({ payload }) {
    const { description, roleIds, callback } = payload;
    const { apiTokensDataTenant } = yield effects.select((state) => state.auth.apiTokensState);
    try {
        yield effects.put(actions.setApiTokensLoader({ key: exports.ApiStateKeys.ADD_API_TOKEN, value: true }));
        const data = yield effects.call(restApi.api.auth.updateTenantApiTokensData, { description, roleIds });
        yield effects.put(actions.setApiTokensState({ showAddTokenDialog: false }));
        yield effects.delay(200);
        yield effects.put(actions.setApiTokensState({
            apiTokensDataTenant: [data, ...apiTokensDataTenant],
            successDialog: { open: true, secret: data.secret, clientId: data.clientId },
        }));
        yield effects.put(actions.setApiTokensLoader({ key: exports.ApiStateKeys.ADD_API_TOKEN, value: false }));
        callback === null || callback === void 0 ? void 0 : callback(null);
    }
    catch (e) {
        yield effects.put(actions.setApiTokensError({ key: exports.ApiStateKeys.ADD_API_TOKEN, value: e.message }));
        yield effects.put(actions.setApiTokensLoader({ key: exports.ApiStateKeys.ADD_API_TOKEN, value: false }));
        callback === null || callback === void 0 ? void 0 : callback(null, e.message);
    }
}
function* deleteUserApiToken({ payload }) {
    const { apiTokensDataUser } = yield effects.select((state) => state.auth.apiTokensState);
    try {
        yield effects.put(actions.setApiTokensLoader({ key: exports.ApiStateKeys.DELETE_API_TOKEN, value: true }));
        yield effects.call(restApi.api.auth.deleteUserApiToken, { tokenId: payload });
        yield effects.put(actions.setApiTokensState({
            apiTokensDataUser: apiTokensDataUser.filter((i) => i.clientId !== payload),
            deleteTokenDialog: { open: false, clientId: payload },
        }));
        yield effects.put(actions.setApiTokensLoader({ key: exports.ApiStateKeys.DELETE_API_TOKEN, value: false }));
    }
    catch (e) {
        yield effects.put(actions.setApiTokensError({ key: exports.ApiStateKeys.DELETE_API_TOKEN, value: e.message }));
        yield effects.put(actions.setApiTokensLoader({ key: exports.ApiStateKeys.DELETE_API_TOKEN, value: false }));
    }
}
function* deleteTenantApiToken({ payload }) {
    const { apiTokensDataTenant } = yield effects.select((state) => state.auth.apiTokensState);
    try {
        yield effects.put(actions.setApiTokensLoader({ key: exports.ApiStateKeys.DELETE_API_TOKEN, value: true }));
        yield effects.call(restApi.api.auth.deleteTenantApiToken, { tokenId: payload });
        yield effects.put(actions.setApiTokensState({
            apiTokensDataTenant: apiTokensDataTenant.filter((i) => i.clientId !== payload),
            deleteTokenDialog: { open: false, clientId: payload },
        }));
        yield effects.put(actions.setApiTokensLoader({ key: exports.ApiStateKeys.DELETE_API_TOKEN, value: false }));
    }
    catch (e) {
        yield effects.put(actions.setApiTokensError({ key: exports.ApiStateKeys.DELETE_API_TOKEN, value: e.message }));
        yield effects.put(actions.setApiTokensLoader({ key: exports.ApiStateKeys.DELETE_API_TOKEN, value: false }));
    }
}
function* loadApiTokens({ payload }) {
    var _a, _b;
    if (!(payload === null || payload === void 0 ? void 0 : payload.silentLoading)) {
        yield effects.put(actions.setApiTokensLoader({ key: exports.ApiStateKeys.LOAD_API_TOKENS, value: true }));
    }
    try {
        const [apiTokensDataUser = [], apiTokensDataTenant = []] = yield effects.all([
            effects.call(restApi.api.auth.getUserApiTokensData),
            effects.call(restApi.api.auth.getTenantApiTokensData),
        ]);
        yield effects.put(actions.setApiTokensState({
            apiTokensDataUser,
            apiTokensDataTenant,
        }));
        yield effects.put(actions.setApiTokensLoader({ key: exports.ApiStateKeys.LOAD_API_TOKENS, value: false }));
        (_a = payload === null || payload === void 0 ? void 0 : payload.callback) === null || _a === void 0 ? void 0 : _a.call(payload, true);
    }
    catch (e) {
        yield effects.put(actions.setApiTokensError({ key: exports.ApiStateKeys.LOAD_API_TOKENS, value: e.message }));
        yield effects.put(actions.setApiTokensLoader({ key: exports.ApiStateKeys.LOAD_API_TOKENS, value: false }));
        (_b = payload === null || payload === void 0 ? void 0 : payload.callback) === null || _b === void 0 ? void 0 : _b.call(payload, null, e);
    }
}
function* apiTokensSaga() {
    yield effects.takeLeading(actions.loadApiTokens, loadApiTokens);
    yield effects.takeLeading(actions.initApiTokensData, loadApiTokensData);
    yield effects.takeEvery(actions.addUserApiToken, addUserApiToken);
    yield effects.takeEvery(actions.addTenantApiToken, addTenantApiToken);
    yield effects.takeLatest(actions.deleteTenantApiToken, deleteTenantApiToken);
    yield effects.takeLatest(actions.deleteUserApiToken, deleteUserApiToken);
}
/*********************************
 *  Preview Sagas
 *********************************/
function* loadApiTokensDataMock({ payload: apiTokenType }) {
    var _a;
    yield effects.put(actions.setApiTokensState({ apiTokenType }));
    yield effects.put(actions.setApiTokensLoader({ key: exports.ApiStateKeys.LOAD_API_TOKENS, value: true }));
    if (apiTokenType === 'user') {
        yield effects.delay(200);
        const apiTokensData = [apiTokensDataDemo];
        yield effects.put(actions.setApiTokensState({ apiTokensDataUser: apiTokensData !== null && apiTokensData !== void 0 ? apiTokensData : [] }));
    }
    else {
        yield effects.delay(200);
        yield effects.put(actions.setApiTokensState({
            apiTokensDataTenant: (_a = [apiTokensDataTenantDemo]) !== null && _a !== void 0 ? _a : [],
            roles: rolesDemo !== null && rolesDemo !== void 0 ? rolesDemo : [],
            permissions: permissionsDemo !== null && permissionsDemo !== void 0 ? permissionsDemo : [],
        }));
    }
    yield effects.put(actions.setApiTokensLoader({ key: exports.ApiStateKeys.LOAD_API_TOKENS, value: false }));
}
function* addTenantApiTokenMock({ payload }) {
    const { description, roleIds, callback } = payload;
    yield effects.put(actions.setApiTokensLoader({ key: exports.ApiStateKeys.ADD_API_TOKEN, value: true }));
    const { apiTokensDataTenant } = yield effects.select((state) => state.auth.apiTokensState);
    const newToken = Object.assign(Object.assign({}, apiTokensDataTenantDemo), { description,
        roleIds, clientId: `CLIENT_ID_${uuid.v4()}` });
    yield effects.put(actions.setApiTokensState({ showAddTokenDialog: false }));
    yield effects.delay(200);
    yield effects.put(actions.setApiTokensState({
        apiTokensDataTenant: [...apiTokensDataTenant, newToken],
        successDialog: { open: true, secret: newToken.secret, clientId: newToken.clientId },
    }));
    yield effects.delay(200);
    yield effects.put(actions.setApiTokensLoader({ key: exports.ApiStateKeys.ADD_API_TOKEN, value: false }));
    callback === null || callback === void 0 ? void 0 : callback(null);
}
function* deleteTenantApiTokenMock({ payload }) {
    yield effects.put(actions.setApiTokensLoader({ key: exports.ApiStateKeys.DELETE_API_TOKEN, value: true }));
    yield effects.delay(200);
    const apiTokensDataTenant = [apiTokensDataTenantDemo];
    yield effects.put(actions.setApiTokensState({
        apiTokensDataTenant: apiTokensDataTenant.filter((i) => i.clientId !== payload),
        deleteTokenDialog: { open: false, clientId: payload },
    }));
    yield effects.put(actions.setApiTokensLoader({ key: exports.ApiStateKeys.DELETE_API_TOKEN, value: false }));
}
function* loadApiTokensMock({ payload }) {
    var _a;
    if (!(payload === null || payload === void 0 ? void 0 : payload.silentLoading)) {
        yield effects.put(actions.setApiTokensLoader({ key: exports.ApiStateKeys.LOAD_API_TOKENS, value: true }));
    }
    const apiTokensDataUser = [apiTokensDataDemo];
    const apiTokensDataTenant = [apiTokensDataTenantDemo];
    yield effects.put(actions.setApiTokensState({
        apiTokensDataUser,
        apiTokensDataTenant,
    }));
    yield effects.delay(200);
    yield effects.put(actions.setApiTokensLoader({ key: exports.ApiStateKeys.LOAD_API_TOKENS, value: false }));
    (_a = payload === null || payload === void 0 ? void 0 : payload.callback) === null || _a === void 0 ? void 0 : _a.call(payload, true);
}
function* apiTokensSagaMock() {
    yield effects.takeLeading(actions.loadApiTokens, loadApiTokensMock);
    yield effects.takeLeading(actions.initApiTokensData, loadApiTokensDataMock);
    yield effects.takeEvery(actions.addTenantApiToken, addTenantApiTokenMock);
    yield effects.takeLatest(actions.deleteTenantApiToken, deleteTenantApiTokenMock);
}

function* saveAccountSettings({ payload }) {
    var _a, _b;
    try {
        yield effects.put(actions.setAccountSettingsState({ loading: true }));
        const { accountSettingsState } = yield effects.select((state) => state.auth);
        const { address, timezone, dateFormat, timeFormat, currency, logo } = accountSettingsState;
        const body = yield effects.call(restApi.api.accountSettings.updateSettings, Object.assign({ address,
            timezone,
            dateFormat,
            timeFormat,
            currency,
            logo }, payload));
        yield effects.put(actions.setAccountSettingsState(Object.assign(Object.assign({}, body), { loading: false })));
        (_a = payload.callback) === null || _a === void 0 ? void 0 : _a.call(payload, body);
    }
    catch (e) {
        yield effects.put(actions.setAccountSettingsState({ loading: false, error: e.message }));
        (_b = payload.callback) === null || _b === void 0 ? void 0 : _b.call(payload, null, e);
    }
}
function* loadAccountSettings({ payload }) {
    yield effects.put(actions.setAccountSettingsState({ loading: !(payload === null || payload === void 0 ? void 0 : payload.silentLoading), error: null }));
    try {
        const body = yield effects.call(restApi.api.accountSettings.getSettings);
        yield effects.put(actions.setAccountSettingsState(Object.assign(Object.assign({}, body), { loading: false })));
    }
    catch (e) {
        yield effects.put(actions.setAccountSettingsState({ loading: false, error: e.message }));
    }
}
function* accountSettingsSaga() {
    yield effects.takeLeading(actions.saveAccountSettings, saveAccountSettings);
    yield effects.takeLeading(actions.loadAccountSettings, loadAccountSettings);
}
/*********************************
 *  Preview Sagas
 *********************************/
function* saveAccountSettingsMock({ payload }) {
    var _a;
    yield effects.put(actions.setAccountSettingsState({ loading: true }));
    yield vendor_index.delay();
    const { accountSettingsState } = yield effects.select((state) => state.auth);
    const { address, timezone, dateFormat, timeFormat, currency, logo } = accountSettingsState;
    const body = Object.assign({ address,
        timezone,
        dateFormat,
        timeFormat,
        currency,
        logo }, payload);
    yield effects.put(actions.setAccountSettingsState(Object.assign(Object.assign({}, body), { loading: false })));
    (_a = payload.callback) === null || _a === void 0 ? void 0 : _a.call(payload, body);
}
function* loadAccountSettingsMock({ payload }) {
    yield effects.put(actions.setAccountSettingsState({ loading: !(payload === null || payload === void 0 ? void 0 : payload.silentLoading), error: null }));
    yield vendor_index.delay();
    yield effects.put(actions.setAccountSettingsState({
        address: 'Tel-aviv',
        timezone: 'Asia/Jerusalem',
        dateFormat: 'DD/MM/YYYY',
        timeFormat: 'HH:mm',
        currency: 'USD',
        loading: false,
    }));
}
function* accountSettingsSagaMock() {
    yield effects.takeLeading(actions.saveAccountSettings, saveAccountSettingsMock);
    yield effects.takeLeading(actions.loadAccountSettings, loadAccountSettingsMock);
}

function* switchTenant({ payload: { tenantId, callback } }) {
    yield effects.put(actions.setState({ isLoading: true }));
    try {
        yield effects.call(restApi.api.tenants.switchTenant, { tenantId });
        yield effects.call(refreshToken);
        const callbackConsumed = callback === null || callback === void 0 ? void 0 : callback(true);
        if (!callbackConsumed) {
            yield effects.put(actions.setState({ isLoading: false }));
        }
    }
    catch (e) {
        yield effects.put(actions.setState({ isLoading: false }));
        callback === null || callback === void 0 ? void 0 : callback(false, e);
    }
}
function* loadTenants({ payload }) {
    var _a, _b;
    yield effects.put(actions.setTenantsState({ loading: true }));
    try {
        const tenants = yield effects.call(restApi.api.tenants.getTenants);
        yield effects.put(actions.setTenantsState({ tenants, loading: false }));
        (_a = payload === null || payload === void 0 ? void 0 : payload.callback) === null || _a === void 0 ? void 0 : _a.call(payload, []);
    }
    catch (e) {
        (_b = payload === null || payload === void 0 ? void 0 : payload.callback) === null || _b === void 0 ? void 0 : _b.call(payload, [], e);
        yield effects.put(actions.setTenantsState({ loading: false }));
    }
}
function* loadSubTenants({ payload }) {
    var _a, _b;
    yield effects.put(actions.setTenantsState({ loading: true }));
    try {
        const subTenants = yield effects.call(restApi.api.tenants.getSubTenants);
        yield effects.put(actions.setTenantsState({ subTenants, loading: false }));
        (_a = payload === null || payload === void 0 ? void 0 : payload.callback) === null || _a === void 0 ? void 0 : _a.call(payload, true);
    }
    catch (e) {
        yield effects.put(actions.setTenantsState({ loading: false }));
        (_b = payload === null || payload === void 0 ? void 0 : payload.callback) === null || _b === void 0 ? void 0 : _b.call(payload, null, e);
    }
}
function* loadSubTenantsTree({ payload }) {
    var _a, _b;
    yield effects.put(actions.setTenantsState({ loading: true }));
    try {
        const tenantTree = yield effects.call(restApi.api.tenants.getSubTenantsAsTree);
        yield effects.put(actions.setTenantsState({ tenantTree, loading: false }));
        (_a = payload === null || payload === void 0 ? void 0 : payload.callback) === null || _a === void 0 ? void 0 : _a.call(payload, true);
    }
    catch (e) {
        yield effects.put(actions.setTenantsState({ loading: false }));
        (_b = payload === null || payload === void 0 ? void 0 : payload.callback) === null || _b === void 0 ? void 0 : _b.call(payload, null, e);
    }
}
function* tenantsSagas() {
    yield effects.takeEvery(actions.loadTenants, loadTenants);
    yield effects.takeEvery(actions.loadSubTenants, loadSubTenants);
    yield effects.takeEvery(actions.switchTenant, switchTenant);
    yield effects.takeEvery(actions.loadSubTenantsTree, loadSubTenantsTree);
}
/*********************************
 *  Preview Sagas
 *********************************/
function* loadTenantsMock({}) {
    yield effects.put(actions.setTenantsState({ loading: true }));
    yield vendor_index.delay();
    yield effects.put(actions.setTenantsState({ tenants: tenantsDemo, loading: false }));
}
function* tenantsSagasMock() {
    yield effects.takeEvery(actions.loadTenants, loadTenantsMock);
}

function* loadRolesAndPermissions({ payload }) {
    var _a;
    yield effects.put(actions.setRolesState({ loading: !((_a = payload === null || payload === void 0 ? void 0 : payload.silentLoading) !== null && _a !== void 0 ? _a : false), error: null }));
    try {
        const result = yield effects.all([
            effects.call(restApi.api.roles.getRoles),
            effects.call(restApi.api.roles.getPermissions),
            effects.call(restApi.api.roles.getPermissionCategories),
        ]);
        const [roles, permissions, permissionCategories] = result;
        yield effects.put(actions.setRolesState({ roles, permissions, permissionCategories, loading: false }));
    }
    catch (e) {
        yield effects.put(actions.setRolesState({ error: e.message, loading: false }));
    }
}
function* addRole(_a) {
    var _b = _a.payload, { callback } = _b, body = tslib.__rest(_b, ["callback"]);
    yield effects.put(actions.setRolesState({ saving: true }));
    try {
        const role = yield effects.call(restApi.api.roles.addRole, body);
        const roles = yield effects.call(restApi.api.roles.getRoles);
        yield effects.put(actions.loadRolesAndPermissions({ silentLoading: true }));
        yield effects.put(actions.setRolesState({ roles, saving: false }));
        callback === null || callback === void 0 ? void 0 : callback(role);
    }
    catch (e) {
        yield effects.put(actions.setRolesState({ error: e.message, saving: false }));
        callback === null || callback === void 0 ? void 0 : callback(null, e);
    }
}
function* deleteRole(_a) {
    var _b = _a.payload, { callback } = _b, body = tslib.__rest(_b, ["callback"]);
    yield effects.put(actions.setRolesState({ saving: true }));
    try {
        yield effects.call(restApi.api.roles.deleteRole, body);
        yield effects.put(actions.loadRolesAndPermissions({ silentLoading: true }));
        yield effects.put(actions.setRolesState({ saving: false }));
        callback === null || callback === void 0 ? void 0 : callback(true);
    }
    catch (e) {
        yield effects.put(actions.setRolesState({ error: e.message, saving: false }));
        callback === null || callback === void 0 ? void 0 : callback(false, e);
    }
}
function* updateRole(_a) {
    var _b = _a.payload, { callback } = _b, body = tslib.__rest(_b, ["callback"]);
    yield effects.put(actions.setRolesState({ saving: true }));
    try {
        const role = yield effects.call(restApi.api.roles.updateRole, body);
        yield effects.put(actions.loadRolesAndPermissions({ silentLoading: true }));
        yield effects.put(actions.setRolesState({ saving: false }));
        callback === null || callback === void 0 ? void 0 : callback(role);
    }
    catch (e) {
        yield effects.put(actions.setRolesState({ error: e.message, saving: false }));
        callback === null || callback === void 0 ? void 0 : callback(null, e);
    }
}
function* attachPermissionsToRole(_a) {
    var _b = _a.payload, { callback } = _b, body = tslib.__rest(_b, ["callback"]);
    yield effects.put(actions.setRolesState({ saving: true }));
    try {
        const role = yield effects.call(restApi.api.roles.attachPermissionsToRole, body);
        yield effects.put(actions.loadRolesAndPermissions({ silentLoading: true }));
        yield effects.put(actions.setRolesState({ saving: false }));
        callback === null || callback === void 0 ? void 0 : callback(role);
    }
    catch (e) {
        yield effects.put(actions.setRolesState({ error: e.message, saving: false }));
        callback === null || callback === void 0 ? void 0 : callback(null, e);
    }
}
function* attachPermissionToRoles(_a) {
    var _b = _a.payload, { callback } = _b, body = tslib.__rest(_b, ["callback"]);
    yield effects.put(actions.setRolesState({ saving: true }));
    try {
        const permission = yield effects.call(restApi.api.roles.attachPermissionToRoles, body);
        yield effects.put(actions.loadRolesAndPermissions({ silentLoading: true }));
        yield effects.put(actions.setRolesState({ saving: false }));
        callback === null || callback === void 0 ? void 0 : callback(permission);
    }
    catch (e) {
        yield effects.put(actions.setRolesState({ error: e.message, saving: false }));
        callback === null || callback === void 0 ? void 0 : callback(null, e);
    }
}
function* rolesSagas() {
    yield effects.takeLeading(actions.loadRolesAndPermissions, loadRolesAndPermissions);
    yield effects.takeEvery(actions.addRole, addRole);
    yield effects.takeEvery(actions.deleteRole, deleteRole);
    yield effects.takeEvery(actions.updateRole, updateRole);
    yield effects.takeEvery(actions.attachPermissionsToRole, attachPermissionsToRole);
    yield effects.takeEvery(actions.attachPermissionToRoles, attachPermissionToRoles);
}

function* resetPhoneNumber(_a) {
    var _b = _a.payload, { callback } = _b, body = tslib.__rest(_b, ["callback"]);
    yield effects.put(actions.setResetPhoneNumberState({ loading: true }));
    try {
        const res = yield effects.call(restApi.api.auth.resetPhoneNumber, body);
        yield effects.put(actions.setResetPhoneNumberState({ loading: false, error: undefined, resetPhoneNumberToken: res.resetPhoneNumberToken, step: exports.ResetPhoneNumberStep.VerifyResetPhoneNumber }));
        yield effects.put(actions.setLoginState({ email: body.email }));
    }
    catch (e) {
        yield effects.put(actions.setResetPhoneNumberState({ loading: false, error: e.message }));
        callback === null || callback === void 0 ? void 0 : callback(null, e);
    }
}
function* verifyResetPhoneNumber(_a) {
    var _b = _a.payload, { callback } = _b, body = tslib.__rest(_b, ["callback"]);
    yield effects.put(actions.setResetPhoneNumberState({ loading: true }));
    try {
        const res = yield effects.call(restApi.api.auth.verifyResetPhoneNumber, body);
        yield effects.put(actions.setResetPhoneNumberState({ loading: false, error: undefined, changePhoneNumberToken: res.changePhoneNumberToken, step: exports.ResetPhoneNumberStep.ChangePhoneNumber }));
        callback === null || callback === void 0 ? void 0 : callback(true);
    }
    catch (e) {
        yield effects.put(actions.setResetPhoneNumberState({ loading: false, error: e.message }));
        callback === null || callback === void 0 ? void 0 : callback(null, e);
    }
}
function* changePhoneNumber(_a) {
    var _b = _a.payload, { callback } = _b, body = tslib.__rest(_b, ["callback"]);
    yield effects.put(actions.setResetPhoneNumberState({ loading: true }));
    try {
        const { onRedirectTo, routes } = yield effects.select(({ auth: { onRedirectTo, routes } }) => ({ onRedirectTo, routes }));
        yield effects.call(restApi.api.auth.changePhoneNumber, { phoneNumber: body.phoneNumber, changePhoneNumberToken: body.changePhoneNumberToken });
        yield effects.put(actions.setLoginState({ step: exports.LoginStep.loginWithSmsOtc }));
        yield effects.put(actions.passwordlessPreLogin({
            type: restApi.AuthStrategyEnum.SmsCode,
            email: body.email,
            recaptchaToken: body.recaptchaToken,
        }));
        onRedirectTo(routes.loginUrl);
        yield effects.put(actions.setResetPhoneNumberState({ loading: false }));
        callback === null || callback === void 0 ? void 0 : callback(true);
    }
    catch (e) {
        yield effects.put(actions.setResetPhoneNumberState({ loading: false, error: e.message }));
        callback === null || callback === void 0 ? void 0 : callback(null, e);
    }
}
function* resetPhoneNumberSagas() {
    yield effects.takeLeading(actions.resetPhoneNumber, resetPhoneNumber);
    yield effects.takeLeading(actions.verifyResetPhoneNumber, verifyResetPhoneNumber);
    yield effects.takeLeading(actions.changePhoneNumber, changePhoneNumber);
}

function* loadCurrentUserSessions() {
    yield effects.put(actions.setSessionsState({ loading: true, error: null }));
    try {
        const sessions = yield effects.call(restApi.api.auth.getCurrentUserSessions);
        yield effects.put(actions.setSessionsState({ sessions, loading: false }));
    }
    catch (e) {
        yield effects.put(actions.setSessionsState({ error: e, loading: false }));
    }
}
function* loadCurrentUserSession() {
    yield effects.put(actions.setSessionsState({ loading: true, error: null }));
    try {
        const session = yield effects.call(restApi.api.auth.getCurrentUserSession);
        yield effects.put(actions.setSessionsState({ currentSession: session, loading: false }));
    }
    catch (e) {
        yield effects.put(actions.setSessionsState({ error: e, loading: false }));
    }
}
function* deleteUserSession({ payload: { id } }) {
    yield effects.put(actions.setSessionsState({ loading: true, error: null }));
    try {
        yield effects.call(restApi.api.auth.deleteSessionForUser, id);
        yield effects.put(actions.loadUserSessions());
    }
    catch (e) {
        yield effects.put(actions.setSessionsState({ error: e, loading: false }));
    }
}
function* revokeUserSessions({ payload: { callback, userId } }) {
    yield effects.put(actions.setSessionsState({ loading: true, error: null }));
    try {
        yield effects.call(restApi.api.auth.revokeSessionsForUser, userId);
        callback === null || callback === void 0 ? void 0 : callback(true);
    }
    catch (e) {
        yield effects.put(actions.setSessionsState({ error: e, loading: false }));
        callback === null || callback === void 0 ? void 0 : callback(false);
    }
}
function* deleteAllUserSessions() {
    yield effects.put(actions.setSessionsState({ loading: true, error: null }));
    try {
        yield effects.call(restApi.api.auth.deleteAllSessionsForUser);
        yield effects.put(actions.loadUserSessions());
    }
    catch (e) {
        yield effects.put(actions.setSessionsState({ error: e, loading: false }));
    }
}
function* sessionsSaga() {
    yield effects.takeLatest(actions.loadUserSessions, loadCurrentUserSessions);
    yield effects.takeLatest(actions.deleteUserSession, deleteUserSession);
    yield effects.takeLatest(actions.deleteAllUserSessions, deleteAllUserSessions);
    yield effects.takeLatest(actions.loadCurrentUserSession, loadCurrentUserSession);
    yield effects.takeEvery(actions.revokeUserSessions, revokeUserSessions);
}
/*********************************
 *  Preview Sagas
 *********************************/
function* loadCurrentUserSessionsMock() {
    yield effects.put(actions.setSessionsState({ loading: true, error: null }));
    yield effects.put(actions.setSessionsState({ sessions: sessionsMock, loading: false }));
}
function* deleteUserSessionMock({ payload: { id } }) {
    yield effects.put(actions.setSessionsState({ loading: true, error: null }));
    const currentSessions = yield effects.select((state) => { var _a; return (_a = state.auth.sessionsState.sessions) !== null && _a !== void 0 ? _a : []; });
    const newSessions = currentSessions.filter(s => s.id !== id);
    yield effects.put(actions.setSessionsState({ sessions: newSessions, loading: false }));
}
function* deleteAllUserSessionsMock() {
    yield effects.put(actions.setSessionsState({ loading: true, error: null }));
    const newSessions = sessionsMock.filter(s => s.current);
    yield effects.put(actions.setSessionsState({ sessions: newSessions, loading: false }));
}
function* sessionsSagaMock() {
    yield effects.takeLatest(actions.loadUserSessions, loadCurrentUserSessionsMock);
    yield effects.takeLatest(actions.deleteUserSession, deleteUserSessionMock);
    yield effects.takeLatest(actions.deleteAllUserSessions, deleteAllUserSessionsMock);
}

function* loadSessionPolicyState() {
    yield effects.put(actions.setSessionsPolicyState({ loading: true, error: null }));
    try {
        const sessionsPolicy = yield effects.call(restApi.api.auth.getSessionConfigurations);
        yield effects.put(actions.setSessionsPolicyState({ configurations: sessionsPolicy, loading: false }));
    }
    catch (e) {
        yield effects.put(actions.setSessionsState({ error: e, loading: false }));
    }
}
function* createOrUpdateSessionsPolicy({ payload }) {
    yield effects.put(actions.setSessionsPolicyState({ loading: true, error: null, }));
    try {
        const { callback } = payload, rest = tslib.__rest(payload, ["callback"]);
        yield effects.call(restApi.api.auth.createOrUpdateSessionConfigrations, rest);
        yield effects.put(actions.loadSessionsPolicy());
        callback === null || callback === void 0 ? void 0 : callback(true);
    }
    catch (e) {
        yield effects.put(actions.setSessionsPolicyState({ error: e, loading: false }));
    }
}
function* sessionsPolicySaga() {
    yield effects.takeLeading(actions.loadSessionsPolicy, loadSessionPolicyState);
    yield effects.takeLatest(actions.createOrUpdateSessionsPolicy, createOrUpdateSessionsPolicy);
}
function* loadSessionPolicyStateMock() {
    yield effects.put(actions.setSessionsPolicyState({ loading: true, error: null }));
    yield effects.put(actions.setSessionsPolicyState({ configurations: sessionsConfigDummies, loading: false }));
}
function* createOrUpdateSessionsPolicyMock({ payload }) {
    yield effects.put(actions.setSessionsPolicyState({ loading: true, error: null, }));
    const { callback } = payload, rest = tslib.__rest(payload, ["callback"]);
    callback === null || callback === void 0 ? void 0 : callback(true);
    yield effects.put(actions.setSessionsPolicyState({ configurations: rest, loading: false }));
}
function* sessionsPolicySagaMock() {
    yield effects.takeLeading(actions.loadSessionsPolicy, loadSessionPolicyStateMock);
    yield effects.takeLatest(actions.createOrUpdateSessionsPolicy, createOrUpdateSessionsPolicyMock);
}

function* sagas() {
    yield effects.all([
        effects.call(loginSagas),
        effects.call(activateSagas),
        effects.call(acceptInvitationSagas),
        effects.call(forgotPasswordSagas),
        effects.call(resetPhoneNumberSagas),
        effects.call(ssoSagas$1),
        effects.call(ssoSagas),
        effects.call(profileSagas),
        effects.call(mfaSagas),
        effects.call(teamSagas),
        effects.call(socialLoginsSaga),
        effects.call(signUpSaga),
        effects.call(apiTokensSaga),
        effects.call(securityPolicySagas),
        effects.call(accountSettingsSaga),
        effects.call(tenantsSagas),
        effects.call(rolesSagas),
        effects.call(sessionsSaga),
        effects.call(sessionsPolicySaga),
    ]);
}
function* mockSagas() {
    yield effects.all([
        effects.call(loginSagasMock),
        // call(activateSagas),
        // call(acceptInvitationSagas),
        // call(forgotPasswordSagas),
        // call(socialLoginsSaga),
        // call(signUpSaga),
        effects.call(ssoSagasMock),
        effects.call(profileSagasMock),
        effects.call(mfaSagasMock),
        effects.call(teamSagasMock),
        effects.call(apiTokensSagaMock),
        effects.call(securityPolicySagasMock),
        effects.call(sessionsSagaMock),
        effects.call(accountSettingsSagaMock),
        effects.call(tenantsSagasMock),
        effects.call(sessionsPolicySagaMock),
    ]);
}

// export store
var authStore = {
    sagas,
    mockSagas,
    storeName: constants.authStoreName,
    initialState: initialState$1,
    reducer,
    actions,
};

const initialState = {
    context: undefined,
};
const { reducer: rootReducer } = toolkit.createSlice({
    name: 'root',
    initialState,
    reducers: {
        setContext: {
            prepare: (context) => ({ payload: context }),
            reducer: (state, { payload }) => {
                restApi.ContextHolder.setContext(payload);
                return Object.assign(Object.assign({}, state), { context: payload });
            },
        },
    },
});
const createFronteggStore = (rootInitialState, storeHolder, previewMode = false, authInitialState, overrideInitialState, builderMode = false) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    const isSSR = typeof window === 'undefined';
    let holder = storeHolder;
    if (isSSR && storeHolder == null) {
        throw Error('createFronteggStore(initState, storeHolder) failed, storeHolder must not be null in Server-Side rendering');
    }
    if (!holder) {
        holder = window;
    }
    if (!holder.store) {
        if (!previewMode && !builderMode) {
            restApi.ContextHolder.setContext(rootInitialState.context);
        }
        const sagaMiddleware = createSagaMiddleware__default['default']();
        const middleware = [
            ...toolkit.getDefaultMiddleware({ thunk: false, immutableCheck: false, serializableCheck: false }),
            sagaMiddleware,
        ];
        holder.store = toolkit.configureStore({
            middleware,
            preloadedState: {
                root: Object.assign(Object.assign({}, rootInitialState), { previewMode }),
                [authStore.storeName]: Object.assign(Object.assign(Object.assign(Object.assign({}, authStore.initialState), authInitialState), ((_a = overrideInitialState === null || overrideInitialState === void 0 ? void 0 : overrideInitialState.auth) !== null && _a !== void 0 ? _a : {})), { routes: Object.assign(Object.assign(Object.assign({}, authStore.initialState.routes), ((_b = authInitialState === null || authInitialState === void 0 ? void 0 : authInitialState.routes) !== null && _b !== void 0 ? _b : {})), ((_d = (_c = overrideInitialState === null || overrideInitialState === void 0 ? void 0 : overrideInitialState.auth) === null || _c === void 0 ? void 0 : _c.routes) !== null && _d !== void 0 ? _d : {})) }),
                [audits_index['default'].storeName]: Object.assign(Object.assign(Object.assign({}, audits_index['default'].initialState), ((_e = overrideInitialState === null || overrideInitialState === void 0 ? void 0 : overrideInitialState.auditLogs) !== null && _e !== void 0 ? _e : {})), { auditLogsState: Object.assign(Object.assign({}, audits_index['default'].initialState.auditLogsState), ((_g = (_f = overrideInitialState === null || overrideInitialState === void 0 ? void 0 : overrideInitialState.auditLogs) === null || _f === void 0 ? void 0 : _f.auditLogsState) !== null && _g !== void 0 ? _g : {})), auditsMetadataState: Object.assign(Object.assign({}, audits_index['default'].initialState.auditsMetadataState), ((_j = (_h = overrideInitialState === null || overrideInitialState === void 0 ? void 0 : overrideInitialState.auditLogs) === null || _h === void 0 ? void 0 : _h.auditsMetadataState) !== null && _j !== void 0 ? _j : {})) }),
                [saga.storeName]: Object.assign(Object.assign({}, saga.initialState), ((_k = overrideInitialState === null || overrideInitialState === void 0 ? void 0 : overrideInitialState.audits) !== null && _k !== void 0 ? _k : {})),
                [connectivity_index['default'].storeName]: connectivity_index['default'].initialState,
                [subscriptions_index['default'].storeName]: subscriptions_index['default'].initialState,
                [vendor_index.vendorStore.storeName]: vendor_index.vendorStore.initialState,
            },
            reducer: toolkit.combineReducers({
                root: rootReducer,
                [authStore.storeName]: authStore.reducer,
                [audits_index['default'].storeName]: audits_index['default'].reducer,
                [saga.storeName]: saga.reducer,
                [connectivity_index['default'].storeName]: connectivity_index['default'].reducer,
                [subscriptions_index['default'].storeName]: subscriptions_index['default'].reducer,
                [vendor_index.vendorStore.storeName]: vendor_index.vendorStore.reducer,
            }),
        });
        const rootSaga = function* () {
            yield effects.all([
                effects.call(authStore.sagas),
                effects.call(audits_index['default'].sagas),
                effects.call(saga.sagas),
                effects.call(connectivity_index['default'].sagas),
                effects.call(subscriptions_index['default'].sagas),
                effects.call(vendor_index.vendorStore.sagas),
            ]);
        };
        const rootMockSaga = function* () {
            yield effects.all([effects.call(authStore.mockSagas), effects.call(audits_index['default'].mockSagas), effects.call(subscriptions_index['default'].mockSagas)]);
        };
        if (previewMode) {
            holder.store.destroy = sagaMiddleware.run(rootMockSaga).cancel;
            holder.store.dispatch(actions.requestAuthorize(true));
        }
        else {
            holder.store.destroy = sagaMiddleware.run(rootSaga).cancel;
        }
    }
    return holder.store;
};

exports.AdminPortalPages = AdminPortalPages;
exports.acceptInvitationState = acceptInvitationState;
exports.accountSettingsState = accountSettingsState;
exports.actions = actions;
exports.actions$1 = actions$i;
exports.actions$10 = actions$9;
exports.actions$11 = actions$8;
exports.actions$12 = actions$7;
exports.actions$13 = actions$6;
exports.actions$14 = actions$5;
exports.actions$15 = actions$4;
exports.actions$16 = actions$3;
exports.actions$17 = actions$2;
exports.actions$18 = actions$1;
exports.actions$2 = actions$h;
exports.actions$3 = actions$g;
exports.actions$4 = actions$f;
exports.actions$5 = actions$e;
exports.actions$6 = actions$d;
exports.actions$7 = actions$b;
exports.actions$8 = actions$c;
exports.actions$9 = actions$a;
exports.activateState = activateState;
exports.apiTokensState = apiTokensState;
exports.authStore = authStore;
exports.createFronteggStore = createFronteggStore;
exports.forgotPasswordState = forgotPasswordState;
exports.initialState = initialState$1;
exports.loginState = loginState;
exports.mfaState = mfaState;
exports.mockSagas = mockSagas;
exports.profileState = profileState;
exports.reducer = reducer;
exports.reducers = reducers$h;
exports.reducers$1 = reducers$g;
exports.reducers$10 = reducers$7;
exports.reducers$11 = reducers$6;
exports.reducers$12 = reducers$5;
exports.reducers$13 = reducers$4;
exports.reducers$14 = reducers$3;
exports.reducers$15 = reducers$2;
exports.reducers$16 = reducers$1;
exports.reducers$17 = reducers;
exports.reducers$2 = reducers$f;
exports.reducers$3 = reducers$e;
exports.reducers$4 = reducers$d;
exports.reducers$5 = reducers$c;
exports.reducers$6 = reducers$a;
exports.reducers$7 = reducers$b;
exports.reducers$8 = reducers$9;
exports.reducers$9 = reducers$8;
exports.resetPhoneNumberState = resetPhoneNumberState;
exports.rolesState = rolesState;
exports.sagas = sagas;
exports.securityPolicyState = securityPolicyState;
exports.sessionsPolicyState = sessionsPolicyState;
exports.sessionsState = sessionsState;
exports.signUpState = signUpState;
exports.socialLoginState = socialLoginState;
exports.ssoState = ssoState;
exports.teamState = teamState;
exports.tenantsState = tenantsState;

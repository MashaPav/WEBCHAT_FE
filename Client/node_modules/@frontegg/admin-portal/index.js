import { F as FronteggApp, R as React, a as ReactDom } from './FronteggApp-3b25e3fb.js';
import { createElement } from './utils.js';
import { AppHolder } from './AppHolder.js';
export { AppHolder } from './AppHolder.js';
export { AdminPortal } from './AdminPortal.js';
export { CheckoutDialog } from './CheckoutDialog.js';
export { HostedLogin } from './HostedLogin.js';
export { LoginBoxRenderer, defaultTheme, getThemeByName } from './LoginBoxRenderer.js';
import { createFronteggStore } from '@frontegg/redux-store';
export * from '@frontegg/redux-store';
import { Metadata } from '@frontegg/types';
import { AdminPortalPage } from './index-e4d8b997.js';
import '@frontegg/rest-api';
import './index-f432917b.js';
import './formik.esm-3ec4824f.js';
import 'uuid';

class AdminPortalRenderer {
    constructor(name, themeOptions, store, appOptions) {
        this.setRoute = () => { };
        this.themeOptions = {};
        const contextOptions = { baseUrl: 'preview' };
        this.store = store !== null && store !== void 0 ? store : createFronteggStore({ context: contextOptions }, this, true, undefined, undefined, true);
        this.options = Object.assign({ themeOptions, iframeRendering: true, metadata: {}, previewMode: true, builderMode: true, store: this.store, contextOptions }, appOptions);
        this.app = new FronteggApp(this.options, name, true);
        Metadata.set({}, name);
    }
    render(adminPortalContainer) {
        let adminPortalEl = adminPortalContainer.querySelector('#root');
        if (!adminPortalEl) {
            adminPortalEl = adminPortalContainer.ownerDocument.createElement('div');
            adminPortalEl.setAttribute('id', 'root');
            adminPortalContainer.appendChild(adminPortalEl);
        }
        this.app.adminPortalContainer = adminPortalContainer;
        this.app.adminPortalEl = adminPortalEl;
        const setThemeSetter = (themeSetter) => {
            this.themeSetter = themeSetter;
        };
        const setStaticRouteSetter = (setStaticRoute) => {
            this.setRoute = setStaticRoute;
        };
        const adminPortal = React.createElement(AdminPortalPage, {
            options: this.options,
            injector: this.app,
            setThemeSetter,
            setStaticRouteSetter,
        });
        const wrapper = React.createElement(React.Suspense, { fallback: '' }, adminPortal);
        ReactDom.render(wrapper, adminPortalEl);
        this.app.loading = false;
    }
    setStaticRoute(staticRoute) {
        var _a;
        (_a = this.setRoute) === null || _a === void 0 ? void 0 : _a.call(this, staticRoute);
    }
    unmount() {
        try {
            if (this.app.adminPortalEl) {
                ReactDom.unmountComponentAtNode(this.app.adminPortalEl);
            }
        }
        catch (e) {
            console.error('Failed to unmount admin Portal renderer', e);
        }
    }
    setTheme(themeOptions) {
        var _a;
        this.themeOptions = themeOptions;
        (_a = this.themeSetter) === null || _a === void 0 ? void 0 : _a.call(this, this.themeOptions);
    }
}

const initialize = (options, name = 'default') => {
    var _a;
    const createdApp = new FronteggApp(options, name);
    if (typeof document !== 'undefined') {
        if (!customElements.get('frontegg-app')) {
            class FronteggAppContainer extends HTMLElement {
                constructor() {
                    super(...arguments);
                    this.app = null;
                }
                static get observedAttributes() {
                    return ['app-name'];
                }
                connectedCallback() {
                    this.updateContent();
                }
                attributeChangedCallback(name, oldValue, newValue) {
                    if (name === 'app-name') {
                        if (oldValue === null) {
                            return;
                        }
                        if (oldValue === newValue) {
                            return;
                        }
                        const app = AppHolder.getInstance(oldValue);
                        try {
                            ReactDom.unmountComponentAtNode(app.adminPortalEl);
                            ReactDom.unmountComponentAtNode(app.loginBoxEl);
                        }
                        catch (e) {
                            console.error('Failed to unmount frontegg app', e);
                        }
                        this.innerHTML = '';
                        if (newValue === null) {
                            this.remove();
                        }
                        else {
                            this.updateContent();
                        }
                    }
                    console.debug('attributeChangedCallback', name, oldValue, newValue);
                }
                updateContent() {
                    var _a;
                    const appName = (_a = this.getAttribute('app-name')) !== null && _a !== void 0 ? _a : 'default';
                    const app = AppHolder.getInstance(appName);
                    if (app === null) {
                        throw Error(`FronteggApp not found for appName: '${appName}'`);
                    }
                    this.setAttribute('id', `frontegg-app-${app.name}`);
                    const adminPortalContainer = createElement(this, 'div', { id: `frontegg-admin-portal-container-${app.name}` });
                    const loginBoxContainer = createElement(this, 'div', { id: `frontegg-login-box-container-${app.name}` });
                    const checkoutDialogContainer = createElement(this, 'div', { id: `frontegg-checkout-dialog-container-${app.name}` });
                    const adminBoxShadowEl = adminPortalContainer.attachShadow({ mode: 'open' });
                    const loginBoxShadowEl = loginBoxContainer.attachShadow({ mode: 'open' });
                    const checkoutDialogShadowEl = checkoutDialogContainer.attachShadow({ mode: 'open' });
                    const adminPortalEl = createElement(adminBoxShadowEl, 'div', {
                        id: `frontegg-admin-portal-${app.name}`,
                        class: 'frontegg-root-content',
                    });
                    const loginBoxEl = createElement(loginBoxShadowEl, 'div', {
                        id: `frontegg-login-box-${app.name}`,
                        class: 'frontegg-root-content',
                    });
                    const checkoutDialogEl = createElement(checkoutDialogShadowEl, 'div', {
                        id: `frontegg-checkout-dialog-${app.name}`,
                        class: 'frontegg-root-content',
                    });
                    app.initContainers({ adminPortalEl, loginBoxEl, adminPortalContainer, loginBoxContainer, checkoutDialogContainer, checkoutDialogEl });
                }
            }
            customElements.define('frontegg-app', FronteggAppContainer);
        }
        (_a = document.querySelector(`frontegg-app[app-name="${createdApp.name}"]`)) === null || _a === void 0 ? void 0 : _a.remove();
        const element = document.createElement('frontegg-app');
        element.setAttribute('app-name', createdApp.name);
        document.body.appendChild(element);
    }
    return createdApp;
};

export { AdminPortalRenderer, initialize };

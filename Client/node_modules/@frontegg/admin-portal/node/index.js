'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var FronteggApp = require('./FronteggApp-5e722d8d.js');
var utils = require('./utils.js');
var AppHolder = require('./AppHolder.js');
var AdminPortal = require('./AdminPortal.js');
var CheckoutDialog = require('./CheckoutDialog.js');
var HostedLogin = require('./HostedLogin.js');
var LoginBoxRenderer = require('./LoginBoxRenderer.js');
var reduxStore = require('@frontegg/redux-store');
var types = require('@frontegg/types');
var index = require('./index-8010343c.js');
require('@frontegg/rest-api');
require('./index-a24c5f7c.js');
require('./formik.esm-13bb4769.js');
require('uuid');

class AdminPortalRenderer {
    constructor(name, themeOptions, store, appOptions) {
        this.setRoute = () => { };
        this.themeOptions = {};
        const contextOptions = { baseUrl: 'preview' };
        this.store = store !== null && store !== void 0 ? store : reduxStore.createFronteggStore({ context: contextOptions }, this, true, undefined, undefined, true);
        this.options = Object.assign({ themeOptions, iframeRendering: true, metadata: {}, previewMode: true, builderMode: true, store: this.store, contextOptions }, appOptions);
        this.app = new FronteggApp.FronteggApp(this.options, name, true);
        types.Metadata.set({}, name);
    }
    render(adminPortalContainer) {
        let adminPortalEl = adminPortalContainer.querySelector('#root');
        if (!adminPortalEl) {
            adminPortalEl = adminPortalContainer.ownerDocument.createElement('div');
            adminPortalEl.setAttribute('id', 'root');
            adminPortalContainer.appendChild(adminPortalEl);
        }
        this.app.adminPortalContainer = adminPortalContainer;
        this.app.adminPortalEl = adminPortalEl;
        const setThemeSetter = (themeSetter) => {
            this.themeSetter = themeSetter;
        };
        const setStaticRouteSetter = (setStaticRoute) => {
            this.setRoute = setStaticRoute;
        };
        const adminPortal = FronteggApp.React.createElement(index.AdminPortalPage, {
            options: this.options,
            injector: this.app,
            setThemeSetter,
            setStaticRouteSetter,
        });
        const wrapper = FronteggApp.React.createElement(FronteggApp.React.Suspense, { fallback: '' }, adminPortal);
        FronteggApp.ReactDom.render(wrapper, adminPortalEl);
        this.app.loading = false;
    }
    setStaticRoute(staticRoute) {
        var _a;
        (_a = this.setRoute) === null || _a === void 0 ? void 0 : _a.call(this, staticRoute);
    }
    unmount() {
        try {
            if (this.app.adminPortalEl) {
                FronteggApp.ReactDom.unmountComponentAtNode(this.app.adminPortalEl);
            }
        }
        catch (e) {
            console.error('Failed to unmount admin Portal renderer', e);
        }
    }
    setTheme(themeOptions) {
        var _a;
        this.themeOptions = themeOptions;
        (_a = this.themeSetter) === null || _a === void 0 ? void 0 : _a.call(this, this.themeOptions);
    }
}

const initialize = (options, name = 'default') => {
    var _a;
    const createdApp = new FronteggApp.FronteggApp(options, name);
    if (typeof document !== 'undefined') {
        if (!customElements.get('frontegg-app')) {
            class FronteggAppContainer extends HTMLElement {
                constructor() {
                    super(...arguments);
                    this.app = null;
                }
                static get observedAttributes() {
                    return ['app-name'];
                }
                connectedCallback() {
                    this.updateContent();
                }
                attributeChangedCallback(name, oldValue, newValue) {
                    if (name === 'app-name') {
                        if (oldValue === null) {
                            return;
                        }
                        if (oldValue === newValue) {
                            return;
                        }
                        const app = AppHolder.AppHolder.getInstance(oldValue);
                        try {
                            FronteggApp.ReactDom.unmountComponentAtNode(app.adminPortalEl);
                            FronteggApp.ReactDom.unmountComponentAtNode(app.loginBoxEl);
                        }
                        catch (e) {
                            console.error('Failed to unmount frontegg app', e);
                        }
                        this.innerHTML = '';
                        if (newValue === null) {
                            this.remove();
                        }
                        else {
                            this.updateContent();
                        }
                    }
                    console.debug('attributeChangedCallback', name, oldValue, newValue);
                }
                updateContent() {
                    var _a;
                    const appName = (_a = this.getAttribute('app-name')) !== null && _a !== void 0 ? _a : 'default';
                    const app = AppHolder.AppHolder.getInstance(appName);
                    if (app === null) {
                        throw Error(`FronteggApp not found for appName: '${appName}'`);
                    }
                    this.setAttribute('id', `frontegg-app-${app.name}`);
                    const adminPortalContainer = utils.createElement(this, 'div', { id: `frontegg-admin-portal-container-${app.name}` });
                    const loginBoxContainer = utils.createElement(this, 'div', { id: `frontegg-login-box-container-${app.name}` });
                    const checkoutDialogContainer = utils.createElement(this, 'div', { id: `frontegg-checkout-dialog-container-${app.name}` });
                    const adminBoxShadowEl = adminPortalContainer.attachShadow({ mode: 'open' });
                    const loginBoxShadowEl = loginBoxContainer.attachShadow({ mode: 'open' });
                    const checkoutDialogShadowEl = checkoutDialogContainer.attachShadow({ mode: 'open' });
                    const adminPortalEl = utils.createElement(adminBoxShadowEl, 'div', {
                        id: `frontegg-admin-portal-${app.name}`,
                        class: 'frontegg-root-content',
                    });
                    const loginBoxEl = utils.createElement(loginBoxShadowEl, 'div', {
                        id: `frontegg-login-box-${app.name}`,
                        class: 'frontegg-root-content',
                    });
                    const checkoutDialogEl = utils.createElement(checkoutDialogShadowEl, 'div', {
                        id: `frontegg-checkout-dialog-${app.name}`,
                        class: 'frontegg-root-content',
                    });
                    app.initContainers({ adminPortalEl, loginBoxEl, adminPortalContainer, loginBoxContainer, checkoutDialogContainer, checkoutDialogEl });
                }
            }
            customElements.define('frontegg-app', FronteggAppContainer);
        }
        (_a = document.querySelector(`frontegg-app[app-name="${createdApp.name}"]`)) === null || _a === void 0 ? void 0 : _a.remove();
        const element = document.createElement('frontegg-app');
        element.setAttribute('app-name', createdApp.name);
        document.body.appendChild(element);
    }
    return createdApp;
};

exports.AppHolder = AppHolder.AppHolder;
exports.AdminPortal = AdminPortal.AdminPortal;
exports.CheckoutDialog = CheckoutDialog.CheckoutDialog;
exports.HostedLogin = HostedLogin.HostedLogin;
exports.LoginBoxRenderer = LoginBoxRenderer.LoginBoxRenderer;
exports.defaultTheme = LoginBoxRenderer.defaultTheme;
exports.getThemeByName = LoginBoxRenderer.getThemeByName;
exports.AdminPortalRenderer = AdminPortalRenderer;
exports.initialize = initialize;
Object.keys(reduxStore).forEach(function (k) {
  if (k !== 'default' && !exports.hasOwnProperty(k)) Object.defineProperty(exports, k, {
    enumerable: true,
    get: function () {
      return reduxStore[k];
    }
  });
});

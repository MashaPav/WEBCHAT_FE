'use strict';

var FronteggApp = require('./FronteggApp-5e722d8d.js');
var formik_esm = require('./formik.esm-13bb4769.js');
var reduxStore = require('@frontegg/redux-store');
var restApi = require('@frontegg/rest-api');
var uuid = require('uuid');
require('@frontegg/types');
require('./utils.js');
require('./AppHolder.js');

var styleFunctionSx = /*#__PURE__*/Object.freeze({
  __proto__: null,
  'default': formik_esm.styleFunctionSx,
  extendSxProp: formik_esm.extendSxProp
});

var createTheme = /*#__PURE__*/Object.freeze({
  __proto__: null,
  'default': formik_esm.createTheme
});

var ArrowBackIosNew = formik_esm.createSvgIcon( /*#__PURE__*/formik_esm.jsxRuntime.exports.jsx("path", {
  d: "M17.77 3.77 16 2 6 12l10 10 1.77-1.77L9.54 12z"
}), 'ArrowBackIosNew');

var dist=function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r});},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0});},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(e,t){e.exports=FronteggApp.react.exports;},function(e,t){e.exports=formik_esm.propTypes.exports;},function(e,t,n){n.r(t),n.d(t,"ReCaptcha",(function(){return v})),n.d(t,"loadReCaptcha",(function(){return h}));var r=n(0),o=n.n(r);n(1);function a(e){return (a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function c(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r);}}function u(e,t){return (u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function i(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return !1;if(Reflect.construct.sham)return !1;if("function"==typeof Proxy)return !0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return !1}}();return function(){var n,r=p(e);if(t){var o=p(this).constructor;n=Reflect.construct(r,arguments,o);}else n=r.apply(this,arguments);return f(this,n)}}function f(e,t){return !t||"object"!==a(t)&&"function"!=typeof t?l(e):t}function l(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function p(e){return (p=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var d,y=function(){return "undefined"!=typeof window&&void 0!==window.grecaptcha&&void 0!==window.grecaptcha.execute},b=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&u(e,t);}(f,e);var t,n,a=i(f);function f(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,f),s(l(t=a.call(this,e)),"execute",(function(){var e=t.props,n=e.sitekey,r=e.verifyCallback,o=e.action;t.state.ready&&window.grecaptcha.execute(n,{action:o}).then((function(e){void 0!==r&&r(e);}));})),s(l(t),"_updateReadyState",(function(){y()&&(t.setState((function(){return {ready:!0}})),clearInterval(d));})),t.state={ready:y()},t}return t=f,(n=[{key:"componentDidMount",value:function(){this.state.ready?this.execute():d=setInterval(this._updateReadyState,1e3);}},{key:"componentDidUpdate",value:function(e,t){this.state.ready&&!t.ready&&this.execute();}},{key:"componentWillUnmount",value:function(){clearInterval(d);}},{key:"render",value:function(){return this.state.ready?o.a.createElement("div",{id:this.props.elementID,"data-verifycallbackname":this.props.verifyCallbackName}):o.a.createElement("div",{id:this.props.elementID,className:"g-recaptcha"})}}])&&c(t.prototype,n),f}(r.Component);b.defaultProps={elementID:"g-recaptcha",verifyCallbackName:"verifyCallback"};var v=b,h=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(){},n=document.createElement("script");!window.onLoadCaptchaV3Callback&&t&&(window.onLoadCaptchaV3Callback=t),n.src="https://www.recaptcha.net/recaptcha/api.js?onload=onLoadCaptchaV3Callback&render=".concat(e),document.body.appendChild(n);};}]);

/**
 * TODO(v7): Remove this enum and replace with SeverityLevel
 */
var Severity;
(function (Severity) {
    /** JSDoc */
    Severity["Fatal"] = "fatal";
    /** JSDoc */
    Severity["Error"] = "error";
    /** JSDoc */
    Severity["Warning"] = "warning";
    /** JSDoc */
    Severity["Log"] = "log";
    /** JSDoc */
    Severity["Info"] = "info";
    /** JSDoc */
    Severity["Debug"] = "debug";
    /** JSDoc */
    Severity["Critical"] = "critical";
})(Severity || (Severity = {}));

/**
 * Consumes the promise and logs the error when it rejects.
 * @param promise A promise to forget.
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function forget(promise) {
    void promise.then(null, function (e) {
        // TODO: Use a better logging mechanism
        // eslint-disable-next-line no-console
        console.error(e);
    });
}

/**
 * This module mostly exists for optimizations in the build process
 * through rollup and terser.  We define some global constants which
 * are normally undefined.  However terser overrides these with global
 * definitions which can be evaluated by the static analyzer when
 * creating a bundle.
 *
 * In turn the `isDebugBuild` and `isBrowserBundle` functions are pure
 * and can help us remove unused code from the bundles.
 */
/**
 * Figures out if we're building with debug functionality.
 *
 * @returns true if this is a debug build
 */
function isDebugBuild() {
    return typeof __SENTRY_NO_DEBUG__ !== 'undefined' && !__SENTRY_BROWSER_BUNDLE__;
}
/**
 * Figures out if we're building a browser bundle.
 *
 * @returns true if this is a browser bundle build.
 */
function isBrowserBundle() {
    return typeof __SENTRY_BROWSER_BUNDLE__ !== 'undefined' && !!__SENTRY_BROWSER_BUNDLE__;
}

/**
 * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,
 * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.
 */
/**
 * Checks whether we're in the Node.js or Browser environment
 *
 * @returns Answer to given question
 */
function isNodeEnv() {
    // explicitly check for browser bundles as those can be optimized statically
    // by terser/rollup.
    return (!isBrowserBundle() &&
        Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]');
}
/**
 * Requires a module which is protected against bundler minification.
 *
 * @param request The module path to resolve
 */
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any
function dynamicRequire(mod, request) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    return mod.require(request);
}
/**
 * Helper for dynamically loading module that should work with linked dependencies.
 * The problem is that we _should_ be using `require(require.resolve(moduleName, { paths: [cwd()] }))`
 * However it's _not possible_ to do that with Webpack, as it has to know all the dependencies during
 * build time. `require.resolve` is also not available in any other way, so we cannot create,
 * a fake helper like we do with `dynamicRequire`.
 *
 * We always prefer to use local package, thus the value is not returned early from each `try/catch` block.
 * That is to mimic the behavior of `require.resolve` exactly.
 *
 * @param moduleName module name to require
 * @returns possibly required module
 */
function loadModule(moduleName) {
    var mod;
    try {
        mod = dynamicRequire(module, moduleName);
    }
    catch (e) {
        // no-empty
    }
    try {
        var cwd = dynamicRequire(module, 'process').cwd;
        mod = dynamicRequire(module, cwd() + "/node_modules/" + moduleName);
    }
    catch (e) {
        // no-empty
    }
    return mod;
}

/**
 * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,
 * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.
 */
var fallbackGlobalObject = {};
/**
 * Safely get global scope object
 *
 * @returns Global scope object
 */
function getGlobalObject() {
    return (isNodeEnv()
        ? global
        : typeof window !== 'undefined' // eslint-disable-line no-restricted-globals
            ? window // eslint-disable-line no-restricted-globals
            : typeof self !== 'undefined'
                ? self
                : fallbackGlobalObject);
}

/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/explicit-module-boundary-types */
// eslint-disable-next-line @typescript-eslint/unbound-method
var objectToString = Object.prototype.toString;
/**
 * Checks whether given value's type is one of a few Error or Error-like
 * {@link isError}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */
function isError(wat) {
    switch (objectToString.call(wat)) {
        case '[object Error]':
        case '[object Exception]':
        case '[object DOMException]':
            return true;
        default:
            return isInstanceOf(wat, Error);
    }
}
function isBuiltin(wat, ty) {
    return objectToString.call(wat) === "[object " + ty + "]";
}
/**
 * Checks whether given value's type is ErrorEvent
 * {@link isErrorEvent}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */
function isErrorEvent(wat) {
    return isBuiltin(wat, 'ErrorEvent');
}
/**
 * Checks whether given value's type is DOMError
 * {@link isDOMError}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */
function isDOMError(wat) {
    return isBuiltin(wat, 'DOMError');
}
/**
 * Checks whether given value's type is DOMException
 * {@link isDOMException}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */
function isDOMException(wat) {
    return isBuiltin(wat, 'DOMException');
}
/**
 * Checks whether given value's type is a string
 * {@link isString}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */
function isString(wat) {
    return isBuiltin(wat, 'String');
}
/**
 * Checks whether given value is a primitive (undefined, null, number, boolean, string, bigint, symbol)
 * {@link isPrimitive}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */
function isPrimitive(wat) {
    return wat === null || (typeof wat !== 'object' && typeof wat !== 'function');
}
/**
 * Checks whether given value's type is an object literal
 * {@link isPlainObject}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */
function isPlainObject(wat) {
    return isBuiltin(wat, 'Object');
}
/**
 * Checks whether given value's type is an Event instance
 * {@link isEvent}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */
function isEvent(wat) {
    return typeof Event !== 'undefined' && isInstanceOf(wat, Event);
}
/**
 * Checks whether given value's type is an Element instance
 * {@link isElement}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */
function isElement(wat) {
    return typeof Element !== 'undefined' && isInstanceOf(wat, Element);
}
/**
 * Checks whether given value's type is an regexp
 * {@link isRegExp}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */
function isRegExp(wat) {
    return isBuiltin(wat, 'RegExp');
}
/**
 * Checks whether given value has a then function.
 * @param wat A value to be checked.
 */
function isThenable(wat) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    return Boolean(wat && wat.then && typeof wat.then === 'function');
}
/**
 * Checks whether given value's type is a SyntheticEvent
 * {@link isSyntheticEvent}.
 *
 * @param wat A value to be checked.
 * @returns A boolean representing the result.
 */
function isSyntheticEvent(wat) {
    return isPlainObject(wat) && 'nativeEvent' in wat && 'preventDefault' in wat && 'stopPropagation' in wat;
}
/**
 * Checks whether given value's type is an instance of provided constructor.
 * {@link isInstanceOf}.
 *
 * @param wat A value to be checked.
 * @param base A constructor to be used in a check.
 * @returns A boolean representing the result.
 */
function isInstanceOf(wat, base) {
    try {
        return wat instanceof base;
    }
    catch (_e) {
        return false;
    }
}

/**
 * Given a child DOM element, returns a query-selector statement describing that
 * and its ancestors
 * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]
 * @returns generated DOM path
 */
function htmlTreeAsString(elem, keyAttrs) {
    // try/catch both:
    // - accessing event.target (see getsentry/raven-js#838, #768)
    // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly
    // - can throw an exception in some circumstances.
    try {
        var currentElem = elem;
        var MAX_TRAVERSE_HEIGHT = 5;
        var MAX_OUTPUT_LEN = 80;
        var out = [];
        var height = 0;
        var len = 0;
        var separator = ' > ';
        var sepLength = separator.length;
        var nextStr = void 0;
        // eslint-disable-next-line no-plusplus
        while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {
            nextStr = _htmlElementAsString(currentElem, keyAttrs);
            // bail out if
            // - nextStr is the 'html' element
            // - the length of the string that would be created exceeds MAX_OUTPUT_LEN
            //   (ignore this limit if we are on the first iteration)
            if (nextStr === 'html' || (height > 1 && len + out.length * sepLength + nextStr.length >= MAX_OUTPUT_LEN)) {
                break;
            }
            out.push(nextStr);
            len += nextStr.length;
            currentElem = currentElem.parentNode;
        }
        return out.reverse().join(separator);
    }
    catch (_oO) {
        return '<unknown>';
    }
}
/**
 * Returns a simple, query-selector representation of a DOM element
 * e.g. [HTMLElement] => input#foo.btn[name=baz]
 * @returns generated DOM path
 */
function _htmlElementAsString(el, keyAttrs) {
    var elem = el;
    var out = [];
    var className;
    var classes;
    var key;
    var attr;
    var i;
    if (!elem || !elem.tagName) {
        return '';
    }
    out.push(elem.tagName.toLowerCase());
    // Pairs of attribute keys defined in `serializeAttribute` and their values on element.
    var keyAttrPairs = keyAttrs && keyAttrs.length
        ? keyAttrs.filter(function (keyAttr) { return elem.getAttribute(keyAttr); }).map(function (keyAttr) { return [keyAttr, elem.getAttribute(keyAttr)]; })
        : null;
    if (keyAttrPairs && keyAttrPairs.length) {
        keyAttrPairs.forEach(function (keyAttrPair) {
            out.push("[" + keyAttrPair[0] + "=\"" + keyAttrPair[1] + "\"]");
        });
    }
    else {
        if (elem.id) {
            out.push("#" + elem.id);
        }
        // eslint-disable-next-line prefer-const
        className = elem.className;
        if (className && isString(className)) {
            classes = className.split(/\s+/);
            for (i = 0; i < classes.length; i++) {
                out.push("." + classes[i]);
            }
        }
    }
    var allowedAttrs = ['type', 'name', 'title', 'alt'];
    for (i = 0; i < allowedAttrs.length; i++) {
        key = allowedAttrs[i];
        attr = elem.getAttribute(key);
        if (attr) {
            out.push("[" + key + "=\"" + attr + "\"]");
        }
    }
    return out.join('');
}
/**
 * A safe form of location.href
 */
function getLocationHref() {
    var global = getGlobalObject();
    try {
        return global.document.location.href;
    }
    catch (oO) {
        return '';
    }
}

var setPrototypeOf = Object.setPrototypeOf || ({ __proto__: [] } instanceof Array ? setProtoOf : mixinProperties);
/**
 * setPrototypeOf polyfill using __proto__
 */
// eslint-disable-next-line @typescript-eslint/ban-types
function setProtoOf(obj, proto) {
    // @ts-ignore __proto__ does not exist on obj
    obj.__proto__ = proto;
    return obj;
}
/**
 * setPrototypeOf polyfill using mixin
 */
// eslint-disable-next-line @typescript-eslint/ban-types
function mixinProperties(obj, proto) {
    for (var prop in proto) {
        if (!Object.prototype.hasOwnProperty.call(obj, prop)) {
            // @ts-ignore typescript complains about indexing so we remove
            obj[prop] = proto[prop];
        }
    }
    return obj;
}

/** An error emitted by Sentry SDKs and related utilities. */
var SentryError = /** @class */ (function (_super) {
    FronteggApp.__extends(SentryError, _super);
    function SentryError(message) {
        var _newTarget = this.constructor;
        var _this = _super.call(this, message) || this;
        _this.message = message;
        _this.name = _newTarget.prototype.constructor.name;
        setPrototypeOf(_this, _newTarget.prototype);
        return _this;
    }
    return SentryError;
}(Error));

/** Regular expression used to parse a Dsn. */
var DSN_REGEX = /^(?:(\w+):)\/\/(?:(\w+)(?::(\w+))?@)([\w.-]+)(?::(\d+))?\/(.+)/;
function isValidProtocol(protocol) {
    return protocol === 'http' || protocol === 'https';
}
/**
 * Renders the string representation of this Dsn.
 *
 * By default, this will render the public representation without the password
 * component. To get the deprecated private representation, set `withPassword`
 * to true.
 *
 * @param withPassword When set to true, the password will be included.
 */
function dsnToString(dsn, withPassword) {
    if (withPassword === void 0) { withPassword = false; }
    var host = dsn.host, path = dsn.path, pass = dsn.pass, port = dsn.port, projectId = dsn.projectId, protocol = dsn.protocol, publicKey = dsn.publicKey;
    return (protocol + "://" + publicKey + (withPassword && pass ? ":" + pass : '') +
        ("@" + host + (port ? ":" + port : '') + "/" + (path ? path + "/" : path) + projectId));
}
function dsnFromString(str) {
    var match = DSN_REGEX.exec(str);
    if (!match) {
        throw new SentryError("Invalid Sentry Dsn: " + str);
    }
    var _a = FronteggApp.__read(match.slice(1), 6), protocol = _a[0], publicKey = _a[1], _b = _a[2], pass = _b === void 0 ? '' : _b, host = _a[3], _c = _a[4], port = _c === void 0 ? '' : _c, lastPath = _a[5];
    var path = '';
    var projectId = lastPath;
    var split = projectId.split('/');
    if (split.length > 1) {
        path = split.slice(0, -1).join('/');
        projectId = split.pop();
    }
    if (projectId) {
        var projectMatch = projectId.match(/^\d+/);
        if (projectMatch) {
            projectId = projectMatch[0];
        }
    }
    return dsnFromComponents({ host: host, pass: pass, path: path, projectId: projectId, port: port, protocol: protocol, publicKey: publicKey });
}
function dsnFromComponents(components) {
    // TODO this is for backwards compatibility, and can be removed in a future version
    if ('user' in components && !('publicKey' in components)) {
        components.publicKey = components.user;
    }
    return {
        user: components.publicKey || '',
        protocol: components.protocol,
        publicKey: components.publicKey || '',
        pass: components.pass || '',
        host: components.host,
        port: components.port || '',
        path: components.path || '',
        projectId: components.projectId,
    };
}
function validateDsn(dsn) {
    if (!isDebugBuild()) {
        return;
    }
    var port = dsn.port, projectId = dsn.projectId, protocol = dsn.protocol;
    var requiredComponents = ['protocol', 'publicKey', 'host', 'projectId'];
    requiredComponents.forEach(function (component) {
        if (!dsn[component]) {
            throw new SentryError("Invalid Sentry Dsn: " + component + " missing");
        }
    });
    if (!projectId.match(/^\d+$/)) {
        throw new SentryError("Invalid Sentry Dsn: Invalid projectId " + projectId);
    }
    if (!isValidProtocol(protocol)) {
        throw new SentryError("Invalid Sentry Dsn: Invalid protocol " + protocol);
    }
    if (port && isNaN(parseInt(port, 10))) {
        throw new SentryError("Invalid Sentry Dsn: Invalid port " + port);
    }
    return true;
}
/** The Sentry Dsn, identifying a Sentry instance and project. */
function makeDsn(from) {
    var components = typeof from === 'string' ? dsnFromString(from) : dsnFromComponents(from);
    validateDsn(components);
    return components;
}

var SeverityLevels = ['fatal', 'error', 'warning', 'log', 'info', 'debug', 'critical'];

// TODO: Implement different loggers for different environments
var global$a = getGlobalObject();
/** Prefix for logging strings */
var PREFIX = 'Sentry Logger ';
/**
 * Temporarily unwrap `console.log` and friends in order to perform the given callback using the original methods.
 * Restores wrapping after the callback completes.
 *
 * @param callback The function to run against the original `console` messages
 * @returns The results of the callback
 */
function consoleSandbox(callback) {
    var global = getGlobalObject();
    var levels = ['debug', 'info', 'warn', 'error', 'log', 'assert'];
    if (!('console' in global)) {
        return callback();
    }
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    var originalConsole = global.console;
    var wrappedLevels = {};
    // Restore all wrapped console methods
    levels.forEach(function (level) {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        if (level in global.console && originalConsole[level].__sentry_original__) {
            wrappedLevels[level] = originalConsole[level];
            originalConsole[level] = originalConsole[level].__sentry_original__;
        }
    });
    // Perform callback manipulations
    var result = callback();
    // Revert restoration to wrapped state
    Object.keys(wrappedLevels).forEach(function (level) {
        originalConsole[level] = wrappedLevels[level];
    });
    return result;
}
/** JSDoc */
var Logger = /** @class */ (function () {
    /** JSDoc */
    function Logger() {
        this._enabled = false;
    }
    /** JSDoc */
    Logger.prototype.disable = function () {
        this._enabled = false;
    };
    /** JSDoc */
    Logger.prototype.enable = function () {
        this._enabled = true;
    };
    /** JSDoc */
    Logger.prototype.log = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (!this._enabled) {
            return;
        }
        consoleSandbox(function () {
            global$a.console.log(PREFIX + "[Log]: " + args.join(' '));
        });
    };
    /** JSDoc */
    Logger.prototype.warn = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (!this._enabled) {
            return;
        }
        consoleSandbox(function () {
            global$a.console.warn(PREFIX + "[Warn]: " + args.join(' '));
        });
    };
    /** JSDoc */
    Logger.prototype.error = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (!this._enabled) {
            return;
        }
        consoleSandbox(function () {
            global$a.console.error(PREFIX + "[Error]: " + args.join(' '));
        });
    };
    return Logger;
}());
// Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used
global$a.__SENTRY__ = global$a.__SENTRY__ || {};
var logger = global$a.__SENTRY__.logger || (global$a.__SENTRY__.logger = new Logger());

/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * Helper to decycle json objects
 */
function memoBuilder() {
    var hasWeakSet = typeof WeakSet === 'function';
    var inner = hasWeakSet ? new WeakSet() : [];
    function memoize(obj) {
        if (hasWeakSet) {
            if (inner.has(obj)) {
                return true;
            }
            inner.add(obj);
            return false;
        }
        // eslint-disable-next-line @typescript-eslint/prefer-for-of
        for (var i = 0; i < inner.length; i++) {
            var value = inner[i];
            if (value === obj) {
                return true;
            }
        }
        inner.push(obj);
        return false;
    }
    function unmemoize(obj) {
        if (hasWeakSet) {
            inner.delete(obj);
        }
        else {
            for (var i = 0; i < inner.length; i++) {
                if (inner[i] === obj) {
                    inner.splice(i, 1);
                    break;
                }
            }
        }
    }
    return [memoize, unmemoize];
}

var STACKTRACE_LIMIT = 50;
/**
 * Creates a stack parser with the supplied line parsers
 *
 * StackFrames are returned in the correct order for Sentry Exception
 * frames and with Sentry SDK internal frames removed from the top and bottom
 *
 * */
function createStackParser() {
    var parsers = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        parsers[_i] = arguments[_i];
    }
    return function (stack, skipFirst) {
        var e_1, _a, e_2, _b;
        if (skipFirst === void 0) { skipFirst = 0; }
        var frames = [];
        try {
            for (var _c = FronteggApp.__values(stack.split('\n').slice(skipFirst)), _d = _c.next(); !_d.done; _d = _c.next()) {
                var line = _d.value;
                try {
                    for (var parsers_1 = (e_2 = void 0, FronteggApp.__values(parsers)), parsers_1_1 = parsers_1.next(); !parsers_1_1.done; parsers_1_1 = parsers_1.next()) {
                        var parser = parsers_1_1.value;
                        var frame = parser(line);
                        if (frame) {
                            frames.push(frame);
                            break;
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (parsers_1_1 && !parsers_1_1.done && (_b = parsers_1.return)) _b.call(parsers_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return stripSentryFramesAndReverse(frames);
    };
}
/**
 * @hidden
 */
function stripSentryFramesAndReverse(stack) {
    if (!stack.length) {
        return [];
    }
    var localStack = stack;
    var firstFrameFunction = localStack[0].function || '';
    var lastFrameFunction = localStack[localStack.length - 1].function || '';
    // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)
    if (firstFrameFunction.indexOf('captureMessage') !== -1 || firstFrameFunction.indexOf('captureException') !== -1) {
        localStack = localStack.slice(1);
    }
    // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)
    if (lastFrameFunction.indexOf('sentryWrapped') !== -1) {
        localStack = localStack.slice(0, -1);
    }
    // The frame where the crash happened, should be the last entry in the array
    return localStack
        .slice(0, STACKTRACE_LIMIT)
        .map(function (frame) { return (FronteggApp.__assign(FronteggApp.__assign({}, frame), { filename: frame.filename || localStack[0].filename, function: frame.function || '?' })); })
        .reverse();
}
var defaultFunctionName = '<anonymous>';
/**
 * Safely extract function name from itself
 */
function getFunctionName(fn) {
    try {
        if (!fn || typeof fn !== 'function') {
            return defaultFunctionName;
        }
        return fn.name || defaultFunctionName;
    }
    catch (e) {
        // Just accessing custom props in some Selenium environments
        // can cause a "Permission denied" exception (see raven-js#495).
        return defaultFunctionName;
    }
}

/**
 * Truncates given string to the maximum characters count
 *
 * @param str An object that contains serializable values
 * @param max Maximum number of characters in truncated string (0 = unlimited)
 * @returns string Encoded
 */
function truncate(str, max) {
    if (max === void 0) { max = 0; }
    if (typeof str !== 'string' || max === 0) {
        return str;
    }
    return str.length <= max ? str : str.substr(0, max) + "...";
}
/**
 * Join values in array
 * @param input array of values to be joined together
 * @param delimiter string to be placed in-between values
 * @returns Joined values
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function safeJoin(input, delimiter) {
    if (!Array.isArray(input)) {
        return '';
    }
    var output = [];
    // eslint-disable-next-line @typescript-eslint/prefer-for-of
    for (var i = 0; i < input.length; i++) {
        var value = input[i];
        try {
            output.push(String(value));
        }
        catch (e) {
            output.push('[value cannot be serialized]');
        }
    }
    return output.join(delimiter);
}
/**
 * Checks if the value matches a regex or includes the string
 * @param value The string value to be checked against
 * @param pattern Either a regex or a string that must be contained in value
 */
function isMatchingPattern(value, pattern) {
    if (!isString(value)) {
        return false;
    }
    if (isRegExp(pattern)) {
        return pattern.test(value);
    }
    if (typeof pattern === 'string') {
        return value.indexOf(pattern) !== -1;
    }
    return false;
}

/**
 * Replace a method in an object with a wrapped version of itself.
 *
 * @param source An object that contains a method to be wrapped.
 * @param name The name of the method to be wrapped.
 * @param replacementFactory A higher-order function that takes the original version of the given method and returns a
 * wrapped version. Note: The function returned by `replacementFactory` needs to be a non-arrow function, in order to
 * preserve the correct value of `this`, and the original method must be called using `origMethod.call(this, <other
 * args>)` or `origMethod.apply(this, [<other args>])` (rather than being called directly), again to preserve `this`.
 * @returns void
 */
function fill(source, name, replacementFactory) {
    if (!(name in source)) {
        return;
    }
    var original = source[name];
    var wrapped = replacementFactory(original);
    // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work
    // otherwise it'll throw "TypeError: Object.defineProperties called on non-object"
    if (typeof wrapped === 'function') {
        try {
            markFunctionWrapped(wrapped, original);
        }
        catch (_Oo) {
            // This can throw if multiple fill happens on a global object like XMLHttpRequest
            // Fixes https://github.com/getsentry/sentry-javascript/issues/2043
        }
    }
    source[name] = wrapped;
}
/**
 * Defines a non-enumerable property on the given object.
 *
 * @param obj The object on which to set the property
 * @param name The name of the property to be set
 * @param value The value to which to set the property
 */
function addNonEnumerableProperty(obj, name, value) {
    Object.defineProperty(obj, name, {
        // enumerable: false, // the default, so we can save on bundle size by not explicitly setting it
        value: value,
        writable: true,
        configurable: true,
    });
}
/**
 * Remembers the original function on the wrapped function and
 * patches up the prototype.
 *
 * @param wrapped the wrapper function
 * @param original the original function that gets wrapped
 */
function markFunctionWrapped(wrapped, original) {
    var proto = original.prototype || {};
    wrapped.prototype = original.prototype = proto;
    addNonEnumerableProperty(wrapped, '__sentry_original__', original);
}
/**
 * This extracts the original function if available.  See
 * `markFunctionWrapped` for more information.
 *
 * @param func the function to unwrap
 * @returns the unwrapped version of the function if available.
 */
function getOriginalFunction(func) {
    return func.__sentry_original__;
}
/**
 * Encodes given object into url-friendly format
 *
 * @param object An object that contains serializable values
 * @returns string Encoded
 */
function urlEncode(object) {
    return Object.keys(object)
        .map(function (key) { return encodeURIComponent(key) + "=" + encodeURIComponent(object[key]); })
        .join('&');
}
/**
 * Transforms any object into an object literal with all its attributes
 * attached to it.
 *
 * @param value Initial source that we have to transform in order for it to be usable by the serializer
 */
function getWalkSource(value) {
    if (isError(value)) {
        var error = value;
        var err = {
            message: error.message,
            name: error.name,
            stack: error.stack,
        };
        for (var i in error) {
            if (Object.prototype.hasOwnProperty.call(error, i)) {
                err[i] = error[i];
            }
        }
        return err;
    }
    if (isEvent(value)) {
        var event_1 = value;
        var source = {};
        // Accessing event attributes can throw (see https://github.com/getsentry/sentry-javascript/issues/768 and
        // https://github.com/getsentry/sentry-javascript/issues/838), but accessing `type` hasn't been wrapped in a
        // try-catch in at least two years and no one's complained, so that's likely not an issue anymore
        source.type = event_1.type;
        try {
            source.target = isElement(event_1.target)
                ? htmlTreeAsString(event_1.target)
                : Object.prototype.toString.call(event_1.target);
        }
        catch (_oO) {
            source.target = '<unknown>';
        }
        try {
            source.currentTarget = isElement(event_1.currentTarget)
                ? htmlTreeAsString(event_1.currentTarget)
                : Object.prototype.toString.call(event_1.currentTarget);
        }
        catch (_oO) {
            source.currentTarget = '<unknown>';
        }
        if (typeof CustomEvent !== 'undefined' && isInstanceOf(value, CustomEvent)) {
            source.detail = event_1.detail;
        }
        for (var attr in event_1) {
            if (Object.prototype.hasOwnProperty.call(event_1, attr)) {
                source[attr] = event_1[attr];
            }
        }
        return source;
    }
    return value;
}
/** Calculates bytes size of input string */
function utf8Length(value) {
    // eslint-disable-next-line no-bitwise
    return ~-encodeURI(value).split(/%..|./).length;
}
/** Calculates bytes size of input object */
function jsonSize(value) {
    return utf8Length(JSON.stringify(value));
}
/** JSDoc */
function normalizeToSize(object, 
// Default Node.js REPL depth
depth, 
// 100kB, as 200kB is max payload size, so half sounds reasonable
maxSize) {
    if (depth === void 0) { depth = 3; }
    if (maxSize === void 0) { maxSize = 100 * 1024; }
    var serialized = normalize(object, depth);
    if (jsonSize(serialized) > maxSize) {
        return normalizeToSize(object, depth - 1, maxSize);
    }
    return serialized;
}
/**
 * Transform any non-primitive, BigInt, or Symbol-type value into a string. Acts as a no-op on strings, numbers,
 * booleans, null, and undefined.
 *
 * @param value The value to stringify
 * @returns For non-primitive, BigInt, and Symbol-type values, a string denoting the value's type, type and value, or
 *  type and `description` property, respectively. For non-BigInt, non-Symbol primitives, returns the original value,
 *  unchanged.
 */
function serializeValue(value) {
    // Node.js REPL notation
    if (typeof value === 'string') {
        return value;
    }
    var type = Object.prototype.toString.call(value);
    if (type === '[object Object]') {
        return '[Object]';
    }
    if (type === '[object Array]') {
        return '[Array]';
    }
    var normalized = normalizeValue(value);
    return isPrimitive(normalized) ? normalized : type;
}
/**
 * normalizeValue()
 *
 * Takes unserializable input and make it serializable friendly
 *
 * - translates undefined/NaN values to "[undefined]"/"[NaN]" respectively,
 * - serializes Error objects
 * - filter global objects
 */
function normalizeValue(value, key) {
    if (key === 'domain' && value && typeof value === 'object' && value._events) {
        return '[Domain]';
    }
    if (key === 'domainEmitter') {
        return '[DomainEmitter]';
    }
    if (typeof global !== 'undefined' && value === global) {
        return '[Global]';
    }
    // It's safe to use `window` and `document` here in this manner, as we are asserting using `typeof` first
    // which won't throw if they are not present.
    // eslint-disable-next-line no-restricted-globals
    if (typeof window !== 'undefined' && value === window) {
        return '[Window]';
    }
    // eslint-disable-next-line no-restricted-globals
    if (typeof document !== 'undefined' && value === document) {
        return '[Document]';
    }
    // React's SyntheticEvent thingy
    if (isSyntheticEvent(value)) {
        return '[SyntheticEvent]';
    }
    if (typeof value === 'number' && value !== value) {
        return '[NaN]';
    }
    if (value === void 0) {
        return '[undefined]';
    }
    if (typeof value === 'function') {
        return "[Function: " + getFunctionName(value) + "]";
    }
    // symbols and bigints are considered primitives by TS, but aren't natively JSON-serilaizable
    if (typeof value === 'symbol') {
        return "[" + String(value) + "]";
    }
    if (typeof value === 'bigint') {
        return "[BigInt: " + String(value) + "]";
    }
    return value;
}
/**
 * Walks an object to perform a normalization on it
 *
 * @param key of object that's walked in current iteration
 * @param value object to be walked
 * @param depth Optional number indicating how deep should walking be performed
 * @param memo Optional Memo class handling decycling
 */
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
function walk(key, value, depth, memo) {
    if (depth === void 0) { depth = +Infinity; }
    if (memo === void 0) { memo = memoBuilder(); }
    // If we reach the maximum depth, serialize whatever is left
    if (depth === 0) {
        return serializeValue(value);
    }
    /* eslint-disable @typescript-eslint/no-unsafe-member-access */
    // If value implements `toJSON` method, call it and return early
    if (value !== null && value !== undefined && typeof value.toJSON === 'function') {
        return value.toJSON();
    }
    /* eslint-enable @typescript-eslint/no-unsafe-member-access */
    // If normalized value is a primitive, there are no branches left to walk, so bail out
    var normalized = normalizeValue(value, key);
    if (isPrimitive(normalized)) {
        return normalized;
    }
    // Create source that we will use for the next iteration. It will either be an objectified error object (`Error` type
    // with extracted key:value pairs) or the input itself.
    var source = getWalkSource(value);
    // Create an accumulator that will act as a parent for all future itterations of that branch
    var acc = Array.isArray(value) ? [] : {};
    // If we already walked that branch, bail out, as it's circular reference
    if (memo[0](value)) {
        return '[Circular ~]';
    }
    // Walk all keys of the source
    for (var innerKey in source) {
        // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.
        if (!Object.prototype.hasOwnProperty.call(source, innerKey)) {
            continue;
        }
        // Recursively walk through all the child nodes
        acc[innerKey] = walk(innerKey, source[innerKey], depth - 1, memo);
    }
    // Once walked through all the branches, remove the parent from memo storage
    memo[1](value);
    // Return accumulated values
    return acc;
}
/**
 * normalize()
 *
 * - Creates a copy to prevent original input mutation
 * - Skip non-enumerablers
 * - Calls `toJSON` if implemented
 * - Removes circular references
 * - Translates non-serializeable values (undefined/NaN/Functions) to serializable format
 * - Translates known global objects/Classes to a string representations
 * - Takes care of Error objects serialization
 * - Optionally limit depth of final output
 */
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
function normalize(input, depth) {
    try {
        return JSON.parse(JSON.stringify(input, function (key, value) { return walk(key, value, depth); }));
    }
    catch (_oO) {
        return '**non-serializable**';
    }
}
/**
 * Given any captured exception, extract its keys and create a sorted
 * and truncated list that will be used inside the event message.
 * eg. `Non-error exception captured with keys: foo, bar, baz`
 */
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
function extractExceptionKeysForMessage(exception, maxLength) {
    if (maxLength === void 0) { maxLength = 40; }
    var keys = Object.keys(getWalkSource(exception));
    keys.sort();
    if (!keys.length) {
        return '[object has no keys]';
    }
    if (keys[0].length >= maxLength) {
        return truncate(keys[0], maxLength);
    }
    for (var includedKeys = keys.length; includedKeys > 0; includedKeys--) {
        var serialized = keys.slice(0, includedKeys).join(', ');
        if (serialized.length > maxLength) {
            continue;
        }
        if (includedKeys === keys.length) {
            return serialized;
        }
        return truncate(serialized, maxLength);
    }
    return '';
}
/**
 * Given any object, return the new object with removed keys that value was `undefined`.
 * Works recursively on objects and arrays.
 */
function dropUndefinedKeys(val) {
    var e_1, _a;
    if (isPlainObject(val)) {
        var obj = val;
        var rv = {};
        try {
            for (var _b = FronteggApp.__values(Object.keys(obj)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var key = _c.value;
                if (typeof obj[key] !== 'undefined') {
                    rv[key] = dropUndefinedKeys(obj[key]);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return rv;
    }
    if (Array.isArray(val)) {
        return val.map(dropUndefinedKeys);
    }
    return val;
}

/**
 * Tells whether current environment supports Fetch API
 * {@link supportsFetch}.
 *
 * @returns Answer to the given question.
 */
function supportsFetch() {
    if (!('fetch' in getGlobalObject())) {
        return false;
    }
    try {
        new Headers();
        new Request('');
        new Response();
        return true;
    }
    catch (e) {
        return false;
    }
}
/**
 * isNativeFetch checks if the given function is a native implementation of fetch()
 */
// eslint-disable-next-line @typescript-eslint/ban-types
function isNativeFetch(func) {
    return func && /^function fetch\(\)\s+\{\s+\[native code\]\s+\}$/.test(func.toString());
}
/**
 * Tells whether current environment supports Fetch API natively
 * {@link supportsNativeFetch}.
 *
 * @returns true if `window.fetch` is natively implemented, false otherwise
 */
function supportsNativeFetch() {
    if (!supportsFetch()) {
        return false;
    }
    var global = getGlobalObject();
    // Fast path to avoid DOM I/O
    // eslint-disable-next-line @typescript-eslint/unbound-method
    if (isNativeFetch(global.fetch)) {
        return true;
    }
    // window.fetch is implemented, but is polyfilled or already wrapped (e.g: by a chrome extension)
    // so create a "pure" iframe to see if that has native fetch
    var result = false;
    var doc = global.document;
    // eslint-disable-next-line deprecation/deprecation
    if (doc && typeof doc.createElement === "function") {
        try {
            var sandbox = doc.createElement('iframe');
            sandbox.hidden = true;
            doc.head.appendChild(sandbox);
            if (sandbox.contentWindow && sandbox.contentWindow.fetch) {
                // eslint-disable-next-line @typescript-eslint/unbound-method
                result = isNativeFetch(sandbox.contentWindow.fetch);
            }
            doc.head.removeChild(sandbox);
        }
        catch (err) {
            if (isDebugBuild()) {
                logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', err);
            }
        }
    }
    return result;
}
/**
 * Tells whether current environment supports Referrer Policy API
 * {@link supportsReferrerPolicy}.
 *
 * @returns Answer to the given question.
 */
function supportsReferrerPolicy() {
    // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default'
    // (see https://caniuse.com/#feat=referrer-policy),
    // it doesn't. And it throws an exception instead of ignoring this parameter...
    // REF: https://github.com/getsentry/raven-js/issues/1233
    if (!supportsFetch()) {
        return false;
    }
    try {
        new Request('_', {
            referrerPolicy: 'origin',
        });
        return true;
    }
    catch (e) {
        return false;
    }
}
/**
 * Tells whether current environment supports History API
 * {@link supportsHistory}.
 *
 * @returns Answer to the given question.
 */
function supportsHistory() {
    // NOTE: in Chrome App environment, touching history.pushState, *even inside
    //       a try/catch block*, will cause Chrome to output an error to console.error
    // borrowed from: https://github.com/angular/angular.js/pull/13945/files
    var global = getGlobalObject();
    /* eslint-disable @typescript-eslint/no-unsafe-member-access */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    var chrome = global.chrome;
    var isChromePackagedApp = chrome && chrome.app && chrome.app.runtime;
    /* eslint-enable @typescript-eslint/no-unsafe-member-access */
    var hasHistoryApi = 'history' in global && !!global.history.pushState && !!global.history.replaceState;
    return !isChromePackagedApp && hasHistoryApi;
}

var global$9 = getGlobalObject();
/**
 * Instrument native APIs to call handlers that can be used to create breadcrumbs, APM spans etc.
 *  - Console API
 *  - Fetch API
 *  - XHR API
 *  - History API
 *  - DOM API (click/typing)
 *  - Error API
 *  - UnhandledRejection API
 */
var handlers = {};
var instrumented = {};
/** Instruments given API */
function instrument(type) {
    if (instrumented[type]) {
        return;
    }
    instrumented[type] = true;
    switch (type) {
        case 'console':
            instrumentConsole();
            break;
        case 'dom':
            instrumentDOM();
            break;
        case 'xhr':
            instrumentXHR();
            break;
        case 'fetch':
            instrumentFetch();
            break;
        case 'history':
            instrumentHistory();
            break;
        case 'error':
            instrumentError();
            break;
        case 'unhandledrejection':
            instrumentUnhandledRejection();
            break;
        default:
            logger.warn('unknown instrumentation type:', type);
    }
}
/**
 * Add handler that will be called when given type of instrumentation triggers.
 * Use at your own risk, this might break without changelog notice, only used internally.
 * @hidden
 */
function addInstrumentationHandler(type, callback) {
    handlers[type] = handlers[type] || [];
    handlers[type].push(callback);
    instrument(type);
}
/** JSDoc */
function triggerHandlers(type, data) {
    var e_1, _a;
    if (!type || !handlers[type]) {
        return;
    }
    try {
        for (var _b = FronteggApp.__values(handlers[type] || []), _c = _b.next(); !_c.done; _c = _b.next()) {
            var handler = _c.value;
            try {
                handler(data);
            }
            catch (e) {
                if (isDebugBuild()) {
                    logger.error("Error while triggering instrumentation handler.\nType: " + type + "\nName: " + getFunctionName(handler) + "\nError: " + e);
                }
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
}
/** JSDoc */
function instrumentConsole() {
    if (!('console' in global$9)) {
        return;
    }
    ['debug', 'info', 'warn', 'error', 'log', 'assert'].forEach(function (level) {
        if (!(level in global$9.console)) {
            return;
        }
        fill(global$9.console, level, function (originalConsoleMethod) {
            return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                triggerHandlers('console', { args: args, level: level });
                // this fails for some browsers. :(
                if (originalConsoleMethod) {
                    originalConsoleMethod.apply(global$9.console, args);
                }
            };
        });
    });
}
/** JSDoc */
function instrumentFetch() {
    if (!supportsNativeFetch()) {
        return;
    }
    fill(global$9, 'fetch', function (originalFetch) {
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var handlerData = {
                args: args,
                fetchData: {
                    method: getFetchMethod(args),
                    url: getFetchUrl(args),
                },
                startTimestamp: Date.now(),
            };
            triggerHandlers('fetch', FronteggApp.__assign({}, handlerData));
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
            return originalFetch.apply(global$9, args).then(function (response) {
                triggerHandlers('fetch', FronteggApp.__assign(FronteggApp.__assign({}, handlerData), { endTimestamp: Date.now(), response: response }));
                return response;
            }, function (error) {
                triggerHandlers('fetch', FronteggApp.__assign(FronteggApp.__assign({}, handlerData), { endTimestamp: Date.now(), error: error }));
                // NOTE: If you are a Sentry user, and you are seeing this stack frame,
                //       it means the sentry.javascript SDK caught an error invoking your application code.
                //       This is expected behavior and NOT indicative of a bug with sentry.javascript.
                throw error;
            });
        };
    });
}
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/** Extract `method` from fetch call arguments */
function getFetchMethod(fetchArgs) {
    if (fetchArgs === void 0) { fetchArgs = []; }
    if ('Request' in global$9 && isInstanceOf(fetchArgs[0], Request) && fetchArgs[0].method) {
        return String(fetchArgs[0].method).toUpperCase();
    }
    if (fetchArgs[1] && fetchArgs[1].method) {
        return String(fetchArgs[1].method).toUpperCase();
    }
    return 'GET';
}
/** Extract `url` from fetch call arguments */
function getFetchUrl(fetchArgs) {
    if (fetchArgs === void 0) { fetchArgs = []; }
    if (typeof fetchArgs[0] === 'string') {
        return fetchArgs[0];
    }
    if ('Request' in global$9 && isInstanceOf(fetchArgs[0], Request)) {
        return fetchArgs[0].url;
    }
    return String(fetchArgs[0]);
}
/* eslint-enable @typescript-eslint/no-unsafe-member-access */
/** JSDoc */
function instrumentXHR() {
    if (!('XMLHttpRequest' in global$9)) {
        return;
    }
    var xhrproto = XMLHttpRequest.prototype;
    fill(xhrproto, 'open', function (originalOpen) {
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            // eslint-disable-next-line @typescript-eslint/no-this-alias
            var xhr = this;
            var url = args[1];
            var xhrInfo = (xhr.__sentry_xhr__ = {
                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                method: isString(args[0]) ? args[0].toUpperCase() : args[0],
                url: args[1],
            });
            // if Sentry key appears in URL, don't capture it as a request
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
            if (isString(url) && xhrInfo.method === 'POST' && url.match(/sentry_key/)) {
                xhr.__sentry_own_request__ = true;
            }
            var onreadystatechangeHandler = function () {
                if (xhr.readyState === 4) {
                    try {
                        // touching statusCode in some platforms throws
                        // an exception
                        xhrInfo.status_code = xhr.status;
                    }
                    catch (e) {
                        /* do nothing */
                    }
                    triggerHandlers('xhr', {
                        args: args,
                        endTimestamp: Date.now(),
                        startTimestamp: Date.now(),
                        xhr: xhr,
                    });
                }
            };
            if ('onreadystatechange' in xhr && typeof xhr.onreadystatechange === 'function') {
                fill(xhr, 'onreadystatechange', function (original) {
                    return function () {
                        var readyStateArgs = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            readyStateArgs[_i] = arguments[_i];
                        }
                        onreadystatechangeHandler();
                        return original.apply(xhr, readyStateArgs);
                    };
                });
            }
            else {
                xhr.addEventListener('readystatechange', onreadystatechangeHandler);
            }
            return originalOpen.apply(xhr, args);
        };
    });
    fill(xhrproto, 'send', function (originalSend) {
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (this.__sentry_xhr__ && args[0] !== undefined) {
                this.__sentry_xhr__.body = args[0];
            }
            triggerHandlers('xhr', {
                args: args,
                startTimestamp: Date.now(),
                xhr: this,
            });
            return originalSend.apply(this, args);
        };
    });
}
var lastHref;
/** JSDoc */
function instrumentHistory() {
    if (!supportsHistory()) {
        return;
    }
    var oldOnPopState = global$9.onpopstate;
    global$9.onpopstate = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var to = global$9.location.href;
        // keep track of the current URL state, as we always receive only the updated state
        var from = lastHref;
        lastHref = to;
        triggerHandlers('history', {
            from: from,
            to: to,
        });
        if (oldOnPopState) {
            // Apparently this can throw in Firefox when incorrectly implemented plugin is installed.
            // https://github.com/getsentry/sentry-javascript/issues/3344
            // https://github.com/bugsnag/bugsnag-js/issues/469
            try {
                return oldOnPopState.apply(this, args);
            }
            catch (_oO) {
                // no-empty
            }
        }
    };
    /** @hidden */
    function historyReplacementFunction(originalHistoryFunction) {
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var url = args.length > 2 ? args[2] : undefined;
            if (url) {
                // coerce to string (this is what pushState does)
                var from = lastHref;
                var to = String(url);
                // keep track of the current URL state, as we always receive only the updated state
                lastHref = to;
                triggerHandlers('history', {
                    from: from,
                    to: to,
                });
            }
            return originalHistoryFunction.apply(this, args);
        };
    }
    fill(global$9.history, 'pushState', historyReplacementFunction);
    fill(global$9.history, 'replaceState', historyReplacementFunction);
}
var debounceDuration = 1000;
var debounceTimerID;
var lastCapturedEvent;
/**
 * Decide whether the current event should finish the debounce of previously captured one.
 * @param previous previously captured event
 * @param current event to be captured
 */
function shouldShortcircuitPreviousDebounce(previous, current) {
    // If there was no previous event, it should always be swapped for the new one.
    if (!previous) {
        return true;
    }
    // If both events have different type, then user definitely performed two separate actions. e.g. click + keypress.
    if (previous.type !== current.type) {
        return true;
    }
    try {
        // If both events have the same type, it's still possible that actions were performed on different targets.
        // e.g. 2 clicks on different buttons.
        if (previous.target !== current.target) {
            return true;
        }
    }
    catch (e) {
        // just accessing `target` property can throw an exception in some rare circumstances
        // see: https://github.com/getsentry/sentry-javascript/issues/838
    }
    // If both events have the same type _and_ same `target` (an element which triggered an event, _not necessarily_
    // to which an event listener was attached), we treat them as the same action, as we want to capture
    // only one breadcrumb. e.g. multiple clicks on the same button, or typing inside a user input box.
    return false;
}
/**
 * Decide whether an event should be captured.
 * @param event event to be captured
 */
function shouldSkipDOMEvent(event) {
    // We are only interested in filtering `keypress` events for now.
    if (event.type !== 'keypress') {
        return false;
    }
    try {
        var target = event.target;
        if (!target || !target.tagName) {
            return true;
        }
        // Only consider keypress events on actual input elements. This will disregard keypresses targeting body
        // e.g.tabbing through elements, hotkeys, etc.
        if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.isContentEditable) {
            return false;
        }
    }
    catch (e) {
        // just accessing `target` property can throw an exception in some rare circumstances
        // see: https://github.com/getsentry/sentry-javascript/issues/838
    }
    return true;
}
/**
 * Wraps addEventListener to capture UI breadcrumbs
 * @param handler function that will be triggered
 * @param globalListener indicates whether event was captured by the global event listener
 * @returns wrapped breadcrumb events handler
 * @hidden
 */
function makeDOMEventHandler(handler, globalListener) {
    if (globalListener === void 0) { globalListener = false; }
    return function (event) {
        // It's possible this handler might trigger multiple times for the same
        // event (e.g. event propagation through node ancestors).
        // Ignore if we've already captured that event.
        if (!event || lastCapturedEvent === event) {
            return;
        }
        // We always want to skip _some_ events.
        if (shouldSkipDOMEvent(event)) {
            return;
        }
        var name = event.type === 'keypress' ? 'input' : event.type;
        // If there is no debounce timer, it means that we can safely capture the new event and store it for future comparisons.
        if (debounceTimerID === undefined) {
            handler({
                event: event,
                name: name,
                global: globalListener,
            });
            lastCapturedEvent = event;
        }
        // If there is a debounce awaiting, see if the new event is different enough to treat it as a unique one.
        // If that's the case, emit the previous event and store locally the newly-captured DOM event.
        else if (shouldShortcircuitPreviousDebounce(lastCapturedEvent, event)) {
            handler({
                event: event,
                name: name,
                global: globalListener,
            });
            lastCapturedEvent = event;
        }
        // Start a new debounce timer that will prevent us from capturing multiple events that should be grouped together.
        clearTimeout(debounceTimerID);
        debounceTimerID = global$9.setTimeout(function () {
            debounceTimerID = undefined;
        }, debounceDuration);
    };
}
/** JSDoc */
function instrumentDOM() {
    if (!('document' in global$9)) {
        return;
    }
    // Make it so that any click or keypress that is unhandled / bubbled up all the way to the document triggers our dom
    // handlers. (Normally we have only one, which captures a breadcrumb for each click or keypress.) Do this before
    // we instrument `addEventListener` so that we don't end up attaching this handler twice.
    var triggerDOMHandler = triggerHandlers.bind(null, 'dom');
    var globalDOMEventHandler = makeDOMEventHandler(triggerDOMHandler, true);
    global$9.document.addEventListener('click', globalDOMEventHandler, false);
    global$9.document.addEventListener('keypress', globalDOMEventHandler, false);
    // After hooking into click and keypress events bubbled up to `document`, we also hook into user-handled
    // clicks & keypresses, by adding an event listener of our own to any element to which they add a listener. That
    // way, whenever one of their handlers is triggered, ours will be, too. (This is needed because their handler
    // could potentially prevent the event from bubbling up to our global listeners. This way, our handler are still
    // guaranteed to fire at least once.)
    ['EventTarget', 'Node'].forEach(function (target) {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        var proto = global$9[target] && global$9[target].prototype;
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-prototype-builtins
        if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {
            return;
        }
        fill(proto, 'addEventListener', function (originalAddEventListener) {
            return function (type, listener, options) {
                if (type === 'click' || type == 'keypress') {
                    try {
                        var el = this;
                        var handlers_1 = (el.__sentry_instrumentation_handlers__ = el.__sentry_instrumentation_handlers__ || {});
                        var handlerForType = (handlers_1[type] = handlers_1[type] || { refCount: 0 });
                        if (!handlerForType.handler) {
                            var handler = makeDOMEventHandler(triggerDOMHandler);
                            handlerForType.handler = handler;
                            originalAddEventListener.call(this, type, handler, options);
                        }
                        handlerForType.refCount += 1;
                    }
                    catch (e) {
                        // Accessing dom properties is always fragile.
                        // Also allows us to skip `addEventListenrs` calls with no proper `this` context.
                    }
                }
                return originalAddEventListener.call(this, type, listener, options);
            };
        });
        fill(proto, 'removeEventListener', function (originalRemoveEventListener) {
            return function (type, listener, options) {
                if (type === 'click' || type == 'keypress') {
                    try {
                        var el = this;
                        var handlers_2 = el.__sentry_instrumentation_handlers__ || {};
                        var handlerForType = handlers_2[type];
                        if (handlerForType) {
                            handlerForType.refCount -= 1;
                            // If there are no longer any custom handlers of the current type on this element, we can remove ours, too.
                            if (handlerForType.refCount <= 0) {
                                originalRemoveEventListener.call(this, type, handlerForType.handler, options);
                                handlerForType.handler = undefined;
                                delete handlers_2[type]; // eslint-disable-line @typescript-eslint/no-dynamic-delete
                            }
                            // If there are no longer any custom handlers of any type on this element, cleanup everything.
                            if (Object.keys(handlers_2).length === 0) {
                                delete el.__sentry_instrumentation_handlers__;
                            }
                        }
                    }
                    catch (e) {
                        // Accessing dom properties is always fragile.
                        // Also allows us to skip `addEventListenrs` calls with no proper `this` context.
                    }
                }
                return originalRemoveEventListener.call(this, type, listener, options);
            };
        });
    });
}
var _oldOnErrorHandler = null;
/** JSDoc */
function instrumentError() {
    _oldOnErrorHandler = global$9.onerror;
    global$9.onerror = function (msg, url, line, column, error) {
        triggerHandlers('error', {
            column: column,
            error: error,
            line: line,
            msg: msg,
            url: url,
        });
        if (_oldOnErrorHandler) {
            // eslint-disable-next-line prefer-rest-params
            return _oldOnErrorHandler.apply(this, arguments);
        }
        return false;
    };
}
var _oldOnUnhandledRejectionHandler = null;
/** JSDoc */
function instrumentUnhandledRejection() {
    _oldOnUnhandledRejectionHandler = global$9.onunhandledrejection;
    global$9.onunhandledrejection = function (e) {
        triggerHandlers('unhandledrejection', e);
        if (_oldOnUnhandledRejectionHandler) {
            // eslint-disable-next-line prefer-rest-params
            return _oldOnUnhandledRejectionHandler.apply(this, arguments);
        }
        return true;
    };
}

/**
 * UUID4 generator
 *
 * @returns string Generated UUID4.
 */
function uuid4() {
    var global = getGlobalObject();
    var crypto = global.crypto || global.msCrypto;
    if (!(crypto === void 0) && crypto.getRandomValues) {
        // Use window.crypto API if available
        var arr = new Uint16Array(8);
        crypto.getRandomValues(arr);
        // set 4 in byte 7
        // eslint-disable-next-line no-bitwise
        arr[3] = (arr[3] & 0xfff) | 0x4000;
        // set 2 most significant bits of byte 9 to '10'
        // eslint-disable-next-line no-bitwise
        arr[4] = (arr[4] & 0x3fff) | 0x8000;
        var pad = function (num) {
            var v = num.toString(16);
            while (v.length < 4) {
                v = "0" + v;
            }
            return v;
        };
        return (pad(arr[0]) + pad(arr[1]) + pad(arr[2]) + pad(arr[3]) + pad(arr[4]) + pad(arr[5]) + pad(arr[6]) + pad(arr[7]));
    }
    // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523
    return 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        // eslint-disable-next-line no-bitwise
        var r = (Math.random() * 16) | 0;
        // eslint-disable-next-line no-bitwise
        var v = c === 'x' ? r : (r & 0x3) | 0x8;
        return v.toString(16);
    });
}
/**
 * Parses string form of URL into an object
 * // borrowed from https://tools.ietf.org/html/rfc3986#appendix-B
 * // intentionally using regex and not <a/> href parsing trick because React Native and other
 * // environments where DOM might not be available
 * @returns parsed URL object
 */
function parseUrl(url) {
    if (!url) {
        return {};
    }
    var match = url.match(/^(([^:/?#]+):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$/);
    if (!match) {
        return {};
    }
    // coerce to undefined values to empty string so we don't get 'undefined'
    var query = match[6] || '';
    var fragment = match[8] || '';
    return {
        host: match[4],
        path: match[5],
        protocol: match[2],
        relative: match[5] + query + fragment,
    };
}
function getFirstException(event) {
    return event.exception && event.exception.values ? event.exception.values[0] : undefined;
}
/**
 * Extracts either message or type+value from an event that can be used for user-facing logs
 * @returns event's description
 */
function getEventDescription(event) {
    var message = event.message, eventId = event.event_id;
    if (message) {
        return message;
    }
    var firstException = getFirstException(event);
    if (firstException) {
        if (firstException.type && firstException.value) {
            return firstException.type + ": " + firstException.value;
        }
        return firstException.type || firstException.value || eventId || '<unknown>';
    }
    return eventId || '<unknown>';
}
/**
 * Adds exception values, type and value to an synthetic Exception.
 * @param event The event to modify.
 * @param value Value of the exception.
 * @param type Type of the exception.
 * @hidden
 */
function addExceptionTypeValue(event, value, type) {
    var exception = (event.exception = event.exception || {});
    var values = (exception.values = exception.values || []);
    var firstException = (values[0] = values[0] || {});
    if (!firstException.value) {
        firstException.value = value || '';
    }
    if (!firstException.type) {
        firstException.type = type || 'Error';
    }
}
/**
 * Adds exception mechanism data to a given event. Uses defaults if the second parameter is not passed.
 *
 * @param event The event to modify.
 * @param newMechanism Mechanism data to add to the event.
 * @hidden
 */
function addExceptionMechanism(event, newMechanism) {
    var firstException = getFirstException(event);
    if (!firstException) {
        return;
    }
    var defaultMechanism = { type: 'generic', handled: true };
    var currentMechanism = firstException.mechanism;
    firstException.mechanism = FronteggApp.__assign(FronteggApp.__assign(FronteggApp.__assign({}, defaultMechanism), currentMechanism), newMechanism);
    if (newMechanism && 'data' in newMechanism) {
        var mergedData = FronteggApp.__assign(FronteggApp.__assign({}, (currentMechanism && currentMechanism.data)), newMechanism.data);
        firstException.mechanism.data = mergedData;
    }
}
var defaultRetryAfter = 60 * 1000; // 60 seconds
/**
 * Extracts Retry-After value from the request header or returns default value
 * @param now current unix timestamp
 * @param header string representation of 'Retry-After' header
 */
function parseRetryAfterHeader(now, header) {
    if (!header) {
        return defaultRetryAfter;
    }
    var headerDelay = parseInt("" + header, 10);
    if (!isNaN(headerDelay)) {
        return headerDelay * 1000;
    }
    var headerDate = Date.parse("" + header);
    if (!isNaN(headerDate)) {
        return headerDate - now;
    }
    return defaultRetryAfter;
}
/**
 * Checks whether or not we've already captured the given exception (note: not an identical exception - the very object
 * in question), and marks it captured if not.
 *
 * This is useful because it's possible for an error to get captured by more than one mechanism. After we intercept and
 * record an error, we rethrow it (assuming we've intercepted it before it's reached the top-level global handlers), so
 * that we don't interfere with whatever effects the error might have had were the SDK not there. At that point, because
 * the error has been rethrown, it's possible for it to bubble up to some other code we've instrumented. If it's not
 * caught after that, it will bubble all the way up to the global handlers (which of course we also instrument). This
 * function helps us ensure that even if we encounter the same error more than once, we only record it the first time we
 * see it.
 *
 * Note: It will ignore primitives (always return `false` and not mark them as seen), as properties can't be set on
 * them. {@link: Object.objectify} can be used on exceptions to convert any that are primitives into their equivalent
 * object wrapper forms so that this check will always work. However, because we need to flag the exact object which
 * will get rethrown, and because that rethrowing happens outside of the event processing pipeline, the objectification
 * must be done before the exception captured.
 *
 * @param A thrown exception to check or flag as having been seen
 * @returns `true` if the exception has already been captured, `false` if not (with the side effect of marking it seen)
 */
function checkOrSetAlreadyCaught(exception) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    if (exception && exception.__sentry_captured__) {
        return true;
    }
    try {
        // set it this way rather than by assignment so that it's not ennumerable and therefore isn't recorded by the
        // `ExtraErrorData` integration
        addNonEnumerableProperty(exception, '__sentry_captured__', true);
    }
    catch (err) {
        // `exception` is a primitive, so we can't mark it seen
    }
    return false;
}

/* eslint-disable @typescript-eslint/explicit-function-return-type */
/**
 * Creates a resolved sync promise.
 *
 * @param value the value to resolve the promise with
 * @returns the resolved sync promise
 */
function resolvedSyncPromise(value) {
    return new SyncPromise(function (resolve) {
        resolve(value);
    });
}
/**
 * Creates a rejected sync promise.
 *
 * @param value the value to reject the promise with
 * @returns the rejected sync promise
 */
function rejectedSyncPromise(reason) {
    return new SyncPromise(function (_, reject) {
        reject(reason);
    });
}
/**
 * Thenable class that behaves like a Promise and follows it's interface
 * but is not async internally
 */
var SyncPromise = /** @class */ (function () {
    function SyncPromise(executor) {
        var _this = this;
        this._state = 0 /* PENDING */;
        this._handlers = [];
        /** JSDoc */
        this._resolve = function (value) {
            _this._setResult(1 /* RESOLVED */, value);
        };
        /** JSDoc */
        this._reject = function (reason) {
            _this._setResult(2 /* REJECTED */, reason);
        };
        /** JSDoc */
        this._setResult = function (state, value) {
            if (_this._state !== 0 /* PENDING */) {
                return;
            }
            if (isThenable(value)) {
                void value.then(_this._resolve, _this._reject);
                return;
            }
            _this._state = state;
            _this._value = value;
            _this._executeHandlers();
        };
        /** JSDoc */
        this._executeHandlers = function () {
            if (_this._state === 0 /* PENDING */) {
                return;
            }
            var cachedHandlers = _this._handlers.slice();
            _this._handlers = [];
            cachedHandlers.forEach(function (handler) {
                if (handler[0]) {
                    return;
                }
                if (_this._state === 1 /* RESOLVED */) {
                    // eslint-disable-next-line @typescript-eslint/no-floating-promises
                    handler[1](_this._value);
                }
                if (_this._state === 2 /* REJECTED */) {
                    handler[2](_this._value);
                }
                handler[0] = true;
            });
        };
        try {
            executor(this._resolve, this._reject);
        }
        catch (e) {
            this._reject(e);
        }
    }
    /** JSDoc */
    SyncPromise.prototype.then = function (onfulfilled, onrejected) {
        var _this = this;
        return new SyncPromise(function (resolve, reject) {
            _this._handlers.push([
                false,
                function (result) {
                    if (!onfulfilled) {
                        // TODO: ¯\_(ツ)_/¯
                        // TODO: FIXME
                        resolve(result);
                    }
                    else {
                        try {
                            resolve(onfulfilled(result));
                        }
                        catch (e) {
                            reject(e);
                        }
                    }
                },
                function (reason) {
                    if (!onrejected) {
                        reject(reason);
                    }
                    else {
                        try {
                            resolve(onrejected(reason));
                        }
                        catch (e) {
                            reject(e);
                        }
                    }
                },
            ]);
            _this._executeHandlers();
        });
    };
    /** JSDoc */
    SyncPromise.prototype.catch = function (onrejected) {
        return this.then(function (val) { return val; }, onrejected);
    };
    /** JSDoc */
    SyncPromise.prototype.finally = function (onfinally) {
        var _this = this;
        return new SyncPromise(function (resolve, reject) {
            var val;
            var isRejected;
            return _this.then(function (value) {
                isRejected = false;
                val = value;
                if (onfinally) {
                    onfinally();
                }
            }, function (reason) {
                isRejected = true;
                val = reason;
                if (onfinally) {
                    onfinally();
                }
            }).then(function () {
                if (isRejected) {
                    reject(val);
                    return;
                }
                resolve(val);
            });
        });
    };
    return SyncPromise;
}());

/**
 * Creates an new PromiseBuffer object with the specified limit
 * @param limit max number of promises that can be stored in the buffer
 */
function makePromiseBuffer(limit) {
    var buffer = [];
    function isReady() {
        return limit === undefined || buffer.length < limit;
    }
    /**
     * Remove a promise from the queue.
     *
     * @param task Can be any PromiseLike<T>
     * @returns Removed promise.
     */
    function remove(task) {
        return buffer.splice(buffer.indexOf(task), 1)[0];
    }
    /**
     * Add a promise (representing an in-flight action) to the queue, and set it to remove itself on fulfillment.
     *
     * @param taskProducer A function producing any PromiseLike<T>; In previous versions this used to be `task:
     *        PromiseLike<T>`, but under that model, Promises were instantly created on the call-site and their executor
     *        functions therefore ran immediately. Thus, even if the buffer was full, the action still happened. By
     *        requiring the promise to be wrapped in a function, we can defer promise creation until after the buffer
     *        limit check.
     * @returns The original promise.
     */
    function add(taskProducer) {
        if (!isReady()) {
            return rejectedSyncPromise(new SentryError('Not adding Promise due to buffer limit reached.'));
        }
        // start the task and add its promise to the queue
        var task = taskProducer();
        if (buffer.indexOf(task) === -1) {
            buffer.push(task);
        }
        void task
            .then(function () { return remove(task); })
            // Use `then(null, rejectionHandler)` rather than `catch(rejectionHandler)` so that we can use `PromiseLike`
            // rather than `Promise`. `PromiseLike` doesn't have a `.catch` method, making its polyfill smaller. (ES5 didn't
            // have promises, so TS has to polyfill when down-compiling.)
            .then(null, function () {
            return remove(task).then(null, function () {
                // We have to add another catch here because `remove()` starts a new promise chain.
            });
        });
        return task;
    }
    /**
     * Wait for all promises in the queue to resolve or for timeout to expire, whichever comes first.
     *
     * @param timeout The time, in ms, after which to resolve to `false` if the queue is still non-empty. Passing `0` (or
     * not passing anything) will make the promise wait as long as it takes for the queue to drain before resolving to
     * `true`.
     * @returns A promise which will resolve to `true` if the queue is already empty or drains before the timeout, and
     * `false` otherwise
     */
    function drain(timeout) {
        return new SyncPromise(function (resolve, reject) {
            var counter = buffer.length;
            if (!counter) {
                return resolve(true);
            }
            // wait for `timeout` ms and then resolve to `false` (if not cancelled first)
            var capturedSetTimeout = setTimeout(function () {
                if (timeout && timeout > 0) {
                    resolve(false);
                }
            }, timeout);
            // if all promises resolve in time, cancel the timer and resolve to `true`
            buffer.forEach(function (item) {
                void resolvedSyncPromise(item).then(function () {
                    // eslint-disable-next-line no-plusplus
                    if (!--counter) {
                        clearTimeout(capturedSetTimeout);
                        resolve(true);
                    }
                }, reject);
            });
        });
    }
    return {
        $: buffer,
        add: add,
        drain: drain,
    };
}

function isSupportedSeverity(level) {
    return SeverityLevels.indexOf(level) !== -1;
}
/**
 * Converts a string-based level into a {@link Severity}.
 *
 * @param level string representation of Severity
 * @returns Severity
 */
function severityFromString(level) {
    if (level === 'warn')
        return Severity.Warning;
    if (isSupportedSeverity(level)) {
        return level;
    }
    return Severity.Log;
}

/**
 * Converts an HTTP status code to sentry status {@link EventStatus}.
 *
 * @param code number HTTP status code
 * @returns EventStatus
 */
function eventStatusFromHttpCode(code) {
    if (code >= 200 && code < 300) {
        return 'success';
    }
    if (code === 429) {
        return 'rate_limit';
    }
    if (code >= 400 && code < 500) {
        return 'invalid';
    }
    if (code >= 500) {
        return 'failed';
    }
    return 'unknown';
}

/**
 * A TimestampSource implementation for environments that do not support the Performance Web API natively.
 *
 * Note that this TimestampSource does not use a monotonic clock. A call to `nowSeconds` may return a timestamp earlier
 * than a previously returned value. We do not try to emulate a monotonic behavior in order to facilitate debugging. It
 * is more obvious to explain "why does my span have negative duration" than "why my spans have zero duration".
 */
var dateTimestampSource = {
    nowSeconds: function () { return Date.now() / 1000; },
};
/**
 * Returns a wrapper around the native Performance API browser implementation, or undefined for browsers that do not
 * support the API.
 *
 * Wrapping the native API works around differences in behavior from different browsers.
 */
function getBrowserPerformance() {
    var performance = getGlobalObject().performance;
    if (!performance || !performance.now) {
        return undefined;
    }
    // Replace performance.timeOrigin with our own timeOrigin based on Date.now().
    //
    // This is a partial workaround for browsers reporting performance.timeOrigin such that performance.timeOrigin +
    // performance.now() gives a date arbitrarily in the past.
    //
    // Additionally, computing timeOrigin in this way fills the gap for browsers where performance.timeOrigin is
    // undefined.
    //
    // The assumption that performance.timeOrigin + performance.now() ~= Date.now() is flawed, but we depend on it to
    // interact with data coming out of performance entries.
    //
    // Note that despite recommendations against it in the spec, browsers implement the Performance API with a clock that
    // might stop when the computer is asleep (and perhaps under other circumstances). Such behavior causes
    // performance.timeOrigin + performance.now() to have an arbitrary skew over Date.now(). In laptop computers, we have
    // observed skews that can be as long as days, weeks or months.
    //
    // See https://github.com/getsentry/sentry-javascript/issues/2590.
    //
    // BUG: despite our best intentions, this workaround has its limitations. It mostly addresses timings of pageload
    // transactions, but ignores the skew built up over time that can aversely affect timestamps of navigation
    // transactions of long-lived web pages.
    var timeOrigin = Date.now() - performance.now();
    return {
        now: function () { return performance.now(); },
        timeOrigin: timeOrigin,
    };
}
/**
 * Returns the native Performance API implementation from Node.js. Returns undefined in old Node.js versions that don't
 * implement the API.
 */
function getNodePerformance() {
    try {
        var perfHooks = dynamicRequire(module, 'perf_hooks');
        return perfHooks.performance;
    }
    catch (_) {
        return undefined;
    }
}
/**
 * The Performance API implementation for the current platform, if available.
 */
var platformPerformance = isNodeEnv() ? getNodePerformance() : getBrowserPerformance();
var timestampSource = platformPerformance === undefined
    ? dateTimestampSource
    : {
        nowSeconds: function () { return (platformPerformance.timeOrigin + platformPerformance.now()) / 1000; },
    };
/**
 * Returns a timestamp in seconds since the UNIX epoch using the Date API.
 */
var dateTimestampInSeconds = dateTimestampSource.nowSeconds.bind(dateTimestampSource);
/**
 * Returns a timestamp in seconds since the UNIX epoch using either the Performance or Date APIs, depending on the
 * availability of the Performance API.
 *
 * See `usingPerformanceAPI` to test whether the Performance API is used.
 *
 * BUG: Note that because of how browsers implement the Performance API, the clock might stop when the computer is
 * asleep. This creates a skew between `dateTimestampInSeconds` and `timestampInSeconds`. The
 * skew can grow to arbitrary amounts like days, weeks or months.
 * See https://github.com/getsentry/sentry-javascript/issues/2590.
 */
var timestampInSeconds = timestampSource.nowSeconds.bind(timestampSource);
// Re-exported with an old name for backwards-compatibility.
var timestampWithMs = timestampInSeconds;
/**
 * The number of milliseconds since the UNIX epoch. This value is only usable in a browser, and only when the
 * performance API is available.
 */
var browserPerformanceTimeOrigin = (function () {
    // Unfortunately browsers may report an inaccurate time origin data, through either performance.timeOrigin or
    // performance.timing.navigationStart, which results in poor results in performance data. We only treat time origin
    // data as reliable if they are within a reasonable threshold of the current time.
    var performance = getGlobalObject().performance;
    if (!performance || !performance.now) {
        return undefined;
    }
    var threshold = 3600 * 1000;
    var performanceNow = performance.now();
    var dateNow = Date.now();
    // if timeOrigin isn't available set delta to threshold so it isn't used
    var timeOriginDelta = performance.timeOrigin
        ? Math.abs(performance.timeOrigin + performanceNow - dateNow)
        : threshold;
    var timeOriginIsReliable = timeOriginDelta < threshold;
    // While performance.timing.navigationStart is deprecated in favor of performance.timeOrigin, performance.timeOrigin
    // is not as widely supported. Namely, performance.timeOrigin is undefined in Safari as of writing.
    // Also as of writing, performance.timing is not available in Web Workers in mainstream browsers, so it is not always
    // a valid fallback. In the absence of an initial time provided by the browser, fallback to the current time from the
    // Date API.
    // eslint-disable-next-line deprecation/deprecation
    var navigationStart = performance.timing && performance.timing.navigationStart;
    var hasNavigationStart = typeof navigationStart === 'number';
    // if navigationStart isn't available set delta to threshold so it isn't used
    var navigationStartDelta = hasNavigationStart ? Math.abs(navigationStart + performanceNow - dateNow) : threshold;
    var navigationStartIsReliable = navigationStartDelta < threshold;
    if (timeOriginIsReliable || navigationStartIsReliable) {
        // Use the more reliable time origin
        if (timeOriginDelta <= navigationStartDelta) {
            return performance.timeOrigin;
        }
        else {
            return navigationStart;
        }
    }
    return dateNow;
})();

/**
 * Absolute maximum number of breadcrumbs added to an event.
 * The `maxBreadcrumbs` option cannot be higher than this value.
 */
var MAX_BREADCRUMBS = 100;
/**
 * Holds additional event information. {@link Scope.applyToEvent} will be
 * called by the client before an event will be sent.
 */
var Scope = /** @class */ (function () {
    function Scope() {
        /** Flag if notifying is happening. */
        this._notifyingListeners = false;
        /** Callback for client to receive scope changes. */
        this._scopeListeners = [];
        /** Callback list that will be called after {@link applyToEvent}. */
        this._eventProcessors = [];
        /** Array of breadcrumbs. */
        this._breadcrumbs = [];
        /** User */
        this._user = {};
        /** Tags */
        this._tags = {};
        /** Extra */
        this._extra = {};
        /** Contexts */
        this._contexts = {};
        /**
         * A place to stash data which is needed at some point in the SDK's event processing pipeline but which shouldn't get
         * sent to Sentry
         */
        this._sdkProcessingMetadata = {};
    }
    /**
     * Inherit values from the parent scope.
     * @param scope to clone.
     */
    Scope.clone = function (scope) {
        var newScope = new Scope();
        if (scope) {
            newScope._breadcrumbs = FronteggApp.__spread(scope._breadcrumbs);
            newScope._tags = FronteggApp.__assign({}, scope._tags);
            newScope._extra = FronteggApp.__assign({}, scope._extra);
            newScope._contexts = FronteggApp.__assign({}, scope._contexts);
            newScope._user = scope._user;
            newScope._level = scope._level;
            newScope._span = scope._span;
            newScope._session = scope._session;
            newScope._transactionName = scope._transactionName;
            newScope._fingerprint = scope._fingerprint;
            newScope._eventProcessors = FronteggApp.__spread(scope._eventProcessors);
            newScope._requestSession = scope._requestSession;
        }
        return newScope;
    };
    /**
     * Add internal on change listener. Used for sub SDKs that need to store the scope.
     * @hidden
     */
    Scope.prototype.addScopeListener = function (callback) {
        this._scopeListeners.push(callback);
    };
    /**
     * @inheritDoc
     */
    Scope.prototype.addEventProcessor = function (callback) {
        this._eventProcessors.push(callback);
        return this;
    };
    /**
     * @inheritDoc
     */
    Scope.prototype.setUser = function (user) {
        this._user = user || {};
        if (this._session) {
            this._session.update({ user: user });
        }
        this._notifyScopeListeners();
        return this;
    };
    /**
     * @inheritDoc
     */
    Scope.prototype.getUser = function () {
        return this._user;
    };
    /**
     * @inheritDoc
     */
    Scope.prototype.getRequestSession = function () {
        return this._requestSession;
    };
    /**
     * @inheritDoc
     */
    Scope.prototype.setRequestSession = function (requestSession) {
        this._requestSession = requestSession;
        return this;
    };
    /**
     * @inheritDoc
     */
    Scope.prototype.setTags = function (tags) {
        this._tags = FronteggApp.__assign(FronteggApp.__assign({}, this._tags), tags);
        this._notifyScopeListeners();
        return this;
    };
    /**
     * @inheritDoc
     */
    Scope.prototype.setTag = function (key, value) {
        var _a;
        this._tags = FronteggApp.__assign(FronteggApp.__assign({}, this._tags), (_a = {}, _a[key] = value, _a));
        this._notifyScopeListeners();
        return this;
    };
    /**
     * @inheritDoc
     */
    Scope.prototype.setExtras = function (extras) {
        this._extra = FronteggApp.__assign(FronteggApp.__assign({}, this._extra), extras);
        this._notifyScopeListeners();
        return this;
    };
    /**
     * @inheritDoc
     */
    Scope.prototype.setExtra = function (key, extra) {
        var _a;
        this._extra = FronteggApp.__assign(FronteggApp.__assign({}, this._extra), (_a = {}, _a[key] = extra, _a));
        this._notifyScopeListeners();
        return this;
    };
    /**
     * @inheritDoc
     */
    Scope.prototype.setFingerprint = function (fingerprint) {
        this._fingerprint = fingerprint;
        this._notifyScopeListeners();
        return this;
    };
    /**
     * @inheritDoc
     */
    Scope.prototype.setLevel = function (level) {
        this._level = level;
        this._notifyScopeListeners();
        return this;
    };
    /**
     * @inheritDoc
     */
    Scope.prototype.setTransactionName = function (name) {
        this._transactionName = name;
        this._notifyScopeListeners();
        return this;
    };
    /**
     * Can be removed in major version.
     * @deprecated in favor of {@link this.setTransactionName}
     */
    Scope.prototype.setTransaction = function (name) {
        return this.setTransactionName(name);
    };
    /**
     * @inheritDoc
     */
    Scope.prototype.setContext = function (key, context) {
        var _a;
        if (context === null) {
            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
            delete this._contexts[key];
        }
        else {
            this._contexts = FronteggApp.__assign(FronteggApp.__assign({}, this._contexts), (_a = {}, _a[key] = context, _a));
        }
        this._notifyScopeListeners();
        return this;
    };
    /**
     * @inheritDoc
     */
    Scope.prototype.setSpan = function (span) {
        this._span = span;
        this._notifyScopeListeners();
        return this;
    };
    /**
     * @inheritDoc
     */
    Scope.prototype.getSpan = function () {
        return this._span;
    };
    /**
     * @inheritDoc
     */
    Scope.prototype.getTransaction = function () {
        // Often, this span (if it exists at all) will be a transaction, but it's not guaranteed to be. Regardless, it will
        // have a pointer to the currently-active transaction.
        var span = this.getSpan();
        return span && span.transaction;
    };
    /**
     * @inheritDoc
     */
    Scope.prototype.setSession = function (session) {
        if (!session) {
            delete this._session;
        }
        else {
            this._session = session;
        }
        this._notifyScopeListeners();
        return this;
    };
    /**
     * @inheritDoc
     */
    Scope.prototype.getSession = function () {
        return this._session;
    };
    /**
     * @inheritDoc
     */
    Scope.prototype.update = function (captureContext) {
        if (!captureContext) {
            return this;
        }
        if (typeof captureContext === 'function') {
            var updatedScope = captureContext(this);
            return updatedScope instanceof Scope ? updatedScope : this;
        }
        if (captureContext instanceof Scope) {
            this._tags = FronteggApp.__assign(FronteggApp.__assign({}, this._tags), captureContext._tags);
            this._extra = FronteggApp.__assign(FronteggApp.__assign({}, this._extra), captureContext._extra);
            this._contexts = FronteggApp.__assign(FronteggApp.__assign({}, this._contexts), captureContext._contexts);
            if (captureContext._user && Object.keys(captureContext._user).length) {
                this._user = captureContext._user;
            }
            if (captureContext._level) {
                this._level = captureContext._level;
            }
            if (captureContext._fingerprint) {
                this._fingerprint = captureContext._fingerprint;
            }
            if (captureContext._requestSession) {
                this._requestSession = captureContext._requestSession;
            }
        }
        else if (isPlainObject(captureContext)) {
            // eslint-disable-next-line no-param-reassign
            captureContext = captureContext;
            this._tags = FronteggApp.__assign(FronteggApp.__assign({}, this._tags), captureContext.tags);
            this._extra = FronteggApp.__assign(FronteggApp.__assign({}, this._extra), captureContext.extra);
            this._contexts = FronteggApp.__assign(FronteggApp.__assign({}, this._contexts), captureContext.contexts);
            if (captureContext.user) {
                this._user = captureContext.user;
            }
            if (captureContext.level) {
                this._level = captureContext.level;
            }
            if (captureContext.fingerprint) {
                this._fingerprint = captureContext.fingerprint;
            }
            if (captureContext.requestSession) {
                this._requestSession = captureContext.requestSession;
            }
        }
        return this;
    };
    /**
     * @inheritDoc
     */
    Scope.prototype.clear = function () {
        this._breadcrumbs = [];
        this._tags = {};
        this._extra = {};
        this._user = {};
        this._contexts = {};
        this._level = undefined;
        this._transactionName = undefined;
        this._fingerprint = undefined;
        this._requestSession = undefined;
        this._span = undefined;
        this._session = undefined;
        this._notifyScopeListeners();
        return this;
    };
    /**
     * @inheritDoc
     */
    Scope.prototype.addBreadcrumb = function (breadcrumb, maxBreadcrumbs) {
        var maxCrumbs = typeof maxBreadcrumbs === 'number' ? Math.min(maxBreadcrumbs, MAX_BREADCRUMBS) : MAX_BREADCRUMBS;
        // No data has been changed, so don't notify scope listeners
        if (maxCrumbs <= 0) {
            return this;
        }
        var mergedBreadcrumb = FronteggApp.__assign({ timestamp: dateTimestampInSeconds() }, breadcrumb);
        this._breadcrumbs = FronteggApp.__spread(this._breadcrumbs, [mergedBreadcrumb]).slice(-maxCrumbs);
        this._notifyScopeListeners();
        return this;
    };
    /**
     * @inheritDoc
     */
    Scope.prototype.clearBreadcrumbs = function () {
        this._breadcrumbs = [];
        this._notifyScopeListeners();
        return this;
    };
    /**
     * Applies the current context and fingerprint to the event.
     * Note that breadcrumbs will be added by the client.
     * Also if the event has already breadcrumbs on it, we do not merge them.
     * @param event Event
     * @param hint May contain additional information about the original exception.
     * @hidden
     */
    Scope.prototype.applyToEvent = function (event, hint) {
        if (this._extra && Object.keys(this._extra).length) {
            event.extra = FronteggApp.__assign(FronteggApp.__assign({}, this._extra), event.extra);
        }
        if (this._tags && Object.keys(this._tags).length) {
            event.tags = FronteggApp.__assign(FronteggApp.__assign({}, this._tags), event.tags);
        }
        if (this._user && Object.keys(this._user).length) {
            event.user = FronteggApp.__assign(FronteggApp.__assign({}, this._user), event.user);
        }
        if (this._contexts && Object.keys(this._contexts).length) {
            event.contexts = FronteggApp.__assign(FronteggApp.__assign({}, this._contexts), event.contexts);
        }
        if (this._level) {
            event.level = this._level;
        }
        if (this._transactionName) {
            event.transaction = this._transactionName;
        }
        // We want to set the trace context for normal events only if there isn't already
        // a trace context on the event. There is a product feature in place where we link
        // errors with transaction and it relies on that.
        if (this._span) {
            event.contexts = FronteggApp.__assign({ trace: this._span.getTraceContext() }, event.contexts);
            var transactionName = this._span.transaction && this._span.transaction.name;
            if (transactionName) {
                event.tags = FronteggApp.__assign({ transaction: transactionName }, event.tags);
            }
        }
        this._applyFingerprint(event);
        event.breadcrumbs = FronteggApp.__spread((event.breadcrumbs || []), this._breadcrumbs);
        event.breadcrumbs = event.breadcrumbs.length > 0 ? event.breadcrumbs : undefined;
        event.sdkProcessingMetadata = this._sdkProcessingMetadata;
        return this._notifyEventProcessors(FronteggApp.__spread(getGlobalEventProcessors(), this._eventProcessors), event, hint);
    };
    /**
     * Add data which will be accessible during event processing but won't get sent to Sentry
     */
    Scope.prototype.setSDKProcessingMetadata = function (newData) {
        this._sdkProcessingMetadata = FronteggApp.__assign(FronteggApp.__assign({}, this._sdkProcessingMetadata), newData);
        return this;
    };
    /**
     * This will be called after {@link applyToEvent} is finished.
     */
    Scope.prototype._notifyEventProcessors = function (processors, event, hint, index) {
        var _this = this;
        if (index === void 0) { index = 0; }
        return new SyncPromise(function (resolve, reject) {
            var processor = processors[index];
            if (event === null || typeof processor !== 'function') {
                resolve(event);
            }
            else {
                var result = processor(FronteggApp.__assign({}, event), hint);
                if (isThenable(result)) {
                    void result
                        .then(function (final) { return _this._notifyEventProcessors(processors, final, hint, index + 1).then(resolve); })
                        .then(null, reject);
                }
                else {
                    void _this._notifyEventProcessors(processors, result, hint, index + 1)
                        .then(resolve)
                        .then(null, reject);
                }
            }
        });
    };
    /**
     * This will be called on every set call.
     */
    Scope.prototype._notifyScopeListeners = function () {
        var _this = this;
        // We need this check for this._notifyingListeners to be able to work on scope during updates
        // If this check is not here we'll produce endless recursion when something is done with the scope
        // during the callback.
        if (!this._notifyingListeners) {
            this._notifyingListeners = true;
            this._scopeListeners.forEach(function (callback) {
                callback(_this);
            });
            this._notifyingListeners = false;
        }
    };
    /**
     * Applies fingerprint from the scope to the event if there's one,
     * uses message if there's one instead or get rid of empty fingerprint
     */
    Scope.prototype._applyFingerprint = function (event) {
        // Make sure it's an array first and we actually have something in place
        event.fingerprint = event.fingerprint
            ? Array.isArray(event.fingerprint)
                ? event.fingerprint
                : [event.fingerprint]
            : [];
        // If we have something on the scope, then merge it with event
        if (this._fingerprint) {
            event.fingerprint = event.fingerprint.concat(this._fingerprint);
        }
        // If we have no data at all, remove empty array default
        if (event.fingerprint && !event.fingerprint.length) {
            delete event.fingerprint;
        }
    };
    return Scope;
}());
/**
 * Returns the global event processors.
 */
function getGlobalEventProcessors() {
    /* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access  */
    var global = getGlobalObject();
    global.__SENTRY__ = global.__SENTRY__ || {};
    global.__SENTRY__.globalEventProcessors = global.__SENTRY__.globalEventProcessors || [];
    return global.__SENTRY__.globalEventProcessors;
    /* eslint-enable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access */
}
/**
 * Add a EventProcessor to be kept globally.
 * @param callback EventProcessor to add
 */
function addGlobalEventProcessor(callback) {
    getGlobalEventProcessors().push(callback);
}

/**
 * @inheritdoc
 */
var Session = /** @class */ (function () {
    function Session(context) {
        this.errors = 0;
        this.sid = uuid4();
        this.duration = 0;
        this.status = 'ok';
        this.init = true;
        this.ignoreDuration = false;
        // Both timestamp and started are in seconds since the UNIX epoch.
        var startingTime = timestampInSeconds();
        this.timestamp = startingTime;
        this.started = startingTime;
        if (context) {
            this.update(context);
        }
    }
    /** JSDoc */
    // eslint-disable-next-line complexity
    Session.prototype.update = function (context) {
        if (context === void 0) { context = {}; }
        if (context.user) {
            if (!this.ipAddress && context.user.ip_address) {
                this.ipAddress = context.user.ip_address;
            }
            if (!this.did && !context.did) {
                this.did = context.user.id || context.user.email || context.user.username;
            }
        }
        this.timestamp = context.timestamp || timestampInSeconds();
        if (context.ignoreDuration) {
            this.ignoreDuration = context.ignoreDuration;
        }
        if (context.sid) {
            // Good enough uuid validation. — Kamil
            this.sid = context.sid.length === 32 ? context.sid : uuid4();
        }
        if (context.init !== undefined) {
            this.init = context.init;
        }
        if (!this.did && context.did) {
            this.did = "" + context.did;
        }
        if (typeof context.started === 'number') {
            this.started = context.started;
        }
        if (this.ignoreDuration) {
            this.duration = undefined;
        }
        else if (typeof context.duration === 'number') {
            this.duration = context.duration;
        }
        else {
            var duration = this.timestamp - this.started;
            this.duration = duration >= 0 ? duration : 0;
        }
        if (context.release) {
            this.release = context.release;
        }
        if (context.environment) {
            this.environment = context.environment;
        }
        if (!this.ipAddress && context.ipAddress) {
            this.ipAddress = context.ipAddress;
        }
        if (!this.userAgent && context.userAgent) {
            this.userAgent = context.userAgent;
        }
        if (typeof context.errors === 'number') {
            this.errors = context.errors;
        }
        if (context.status) {
            this.status = context.status;
        }
    };
    /** JSDoc */
    Session.prototype.close = function (status) {
        if (status) {
            this.update({ status: status });
        }
        else if (this.status === 'ok') {
            this.update({ status: 'exited' });
        }
        else {
            this.update();
        }
    };
    /** JSDoc */
    Session.prototype.toJSON = function () {
        return dropUndefinedKeys({
            sid: "" + this.sid,
            init: this.init,
            // Make sure that sec is converted to ms for date constructor
            started: new Date(this.started * 1000).toISOString(),
            timestamp: new Date(this.timestamp * 1000).toISOString(),
            status: this.status,
            errors: this.errors,
            did: typeof this.did === 'number' || typeof this.did === 'string' ? "" + this.did : undefined,
            duration: this.duration,
            attrs: {
                release: this.release,
                environment: this.environment,
                ip_address: this.ipAddress,
                user_agent: this.userAgent,
            },
        });
    };
    return Session;
}());

/**
 * API compatibility version of this hub.
 *
 * WARNING: This number should only be increased when the global interface
 * changes and new methods are introduced.
 *
 * @hidden
 */
var API_VERSION = 4;
/**
 * Default maximum number of breadcrumbs added to an event. Can be overwritten
 * with {@link Options.maxBreadcrumbs}.
 */
var DEFAULT_BREADCRUMBS = 100;
/**
 * @inheritDoc
 */
var Hub = /** @class */ (function () {
    /**
     * Creates a new instance of the hub, will push one {@link Layer} into the
     * internal stack on creation.
     *
     * @param client bound to the hub.
     * @param scope bound to the hub.
     * @param version number, higher number means higher priority.
     */
    function Hub(client, scope, _version) {
        if (scope === void 0) { scope = new Scope(); }
        if (_version === void 0) { _version = API_VERSION; }
        this._version = _version;
        /** Is a {@link Layer}[] containing the client and scope */
        this._stack = [{}];
        this.getStackTop().scope = scope;
        if (client) {
            this.bindClient(client);
        }
    }
    /**
     * @inheritDoc
     */
    Hub.prototype.isOlderThan = function (version) {
        return this._version < version;
    };
    /**
     * @inheritDoc
     */
    Hub.prototype.bindClient = function (client) {
        var top = this.getStackTop();
        top.client = client;
        if (client && client.setupIntegrations) {
            client.setupIntegrations();
        }
    };
    /**
     * @inheritDoc
     */
    Hub.prototype.pushScope = function () {
        // We want to clone the content of prev scope
        var scope = Scope.clone(this.getScope());
        this.getStack().push({
            client: this.getClient(),
            scope: scope,
        });
        return scope;
    };
    /**
     * @inheritDoc
     */
    Hub.prototype.popScope = function () {
        if (this.getStack().length <= 1)
            return false;
        return !!this.getStack().pop();
    };
    /**
     * @inheritDoc
     */
    Hub.prototype.withScope = function (callback) {
        var scope = this.pushScope();
        try {
            callback(scope);
        }
        finally {
            this.popScope();
        }
    };
    /**
     * @inheritDoc
     */
    Hub.prototype.getClient = function () {
        return this.getStackTop().client;
    };
    /** Returns the scope of the top stack. */
    Hub.prototype.getScope = function () {
        return this.getStackTop().scope;
    };
    /** Returns the scope stack for domains or the process. */
    Hub.prototype.getStack = function () {
        return this._stack;
    };
    /** Returns the topmost scope layer in the order domain > local > process. */
    Hub.prototype.getStackTop = function () {
        return this._stack[this._stack.length - 1];
    };
    /**
     * @inheritDoc
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
    Hub.prototype.captureException = function (exception, hint) {
        var eventId = (this._lastEventId = hint && hint.event_id ? hint.event_id : uuid4());
        var finalHint = hint;
        // If there's no explicit hint provided, mimic the same thing that would happen
        // in the minimal itself to create a consistent behavior.
        // We don't do this in the client, as it's the lowest level API, and doing this,
        // would prevent user from having full control over direct calls.
        if (!hint) {
            var syntheticException = void 0;
            try {
                throw new Error('Sentry syntheticException');
            }
            catch (exception) {
                syntheticException = exception;
            }
            finalHint = {
                originalException: exception,
                syntheticException: syntheticException,
            };
        }
        this._invokeClient('captureException', exception, FronteggApp.__assign(FronteggApp.__assign({}, finalHint), { event_id: eventId }));
        return eventId;
    };
    /**
     * @inheritDoc
     */
    Hub.prototype.captureMessage = function (message, level, hint) {
        var eventId = (this._lastEventId = hint && hint.event_id ? hint.event_id : uuid4());
        var finalHint = hint;
        // If there's no explicit hint provided, mimic the same thing that would happen
        // in the minimal itself to create a consistent behavior.
        // We don't do this in the client, as it's the lowest level API, and doing this,
        // would prevent user from having full control over direct calls.
        if (!hint) {
            var syntheticException = void 0;
            try {
                throw new Error(message);
            }
            catch (exception) {
                syntheticException = exception;
            }
            finalHint = {
                originalException: message,
                syntheticException: syntheticException,
            };
        }
        this._invokeClient('captureMessage', message, level, FronteggApp.__assign(FronteggApp.__assign({}, finalHint), { event_id: eventId }));
        return eventId;
    };
    /**
     * @inheritDoc
     */
    Hub.prototype.captureEvent = function (event, hint) {
        var eventId = hint && hint.event_id ? hint.event_id : uuid4();
        if (event.type !== 'transaction') {
            this._lastEventId = eventId;
        }
        this._invokeClient('captureEvent', event, FronteggApp.__assign(FronteggApp.__assign({}, hint), { event_id: eventId }));
        return eventId;
    };
    /**
     * @inheritDoc
     */
    Hub.prototype.lastEventId = function () {
        return this._lastEventId;
    };
    /**
     * @inheritDoc
     */
    Hub.prototype.addBreadcrumb = function (breadcrumb, hint) {
        var _a = this.getStackTop(), scope = _a.scope, client = _a.client;
        if (!scope || !client)
            return;
        // eslint-disable-next-line @typescript-eslint/unbound-method
        var _b = (client.getOptions && client.getOptions()) || {}, _c = _b.beforeBreadcrumb, beforeBreadcrumb = _c === void 0 ? null : _c, _d = _b.maxBreadcrumbs, maxBreadcrumbs = _d === void 0 ? DEFAULT_BREADCRUMBS : _d;
        if (maxBreadcrumbs <= 0)
            return;
        var timestamp = dateTimestampInSeconds();
        var mergedBreadcrumb = FronteggApp.__assign({ timestamp: timestamp }, breadcrumb);
        var finalBreadcrumb = beforeBreadcrumb
            ? consoleSandbox(function () { return beforeBreadcrumb(mergedBreadcrumb, hint); })
            : mergedBreadcrumb;
        if (finalBreadcrumb === null)
            return;
        scope.addBreadcrumb(finalBreadcrumb, maxBreadcrumbs);
    };
    /**
     * @inheritDoc
     */
    Hub.prototype.setUser = function (user) {
        var scope = this.getScope();
        if (scope)
            scope.setUser(user);
    };
    /**
     * @inheritDoc
     */
    Hub.prototype.setTags = function (tags) {
        var scope = this.getScope();
        if (scope)
            scope.setTags(tags);
    };
    /**
     * @inheritDoc
     */
    Hub.prototype.setExtras = function (extras) {
        var scope = this.getScope();
        if (scope)
            scope.setExtras(extras);
    };
    /**
     * @inheritDoc
     */
    Hub.prototype.setTag = function (key, value) {
        var scope = this.getScope();
        if (scope)
            scope.setTag(key, value);
    };
    /**
     * @inheritDoc
     */
    Hub.prototype.setExtra = function (key, extra) {
        var scope = this.getScope();
        if (scope)
            scope.setExtra(key, extra);
    };
    /**
     * @inheritDoc
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Hub.prototype.setContext = function (name, context) {
        var scope = this.getScope();
        if (scope)
            scope.setContext(name, context);
    };
    /**
     * @inheritDoc
     */
    Hub.prototype.configureScope = function (callback) {
        var _a = this.getStackTop(), scope = _a.scope, client = _a.client;
        if (scope && client) {
            callback(scope);
        }
    };
    /**
     * @inheritDoc
     */
    Hub.prototype.run = function (callback) {
        var oldHub = makeMain(this);
        try {
            callback(this);
        }
        finally {
            makeMain(oldHub);
        }
    };
    /**
     * @inheritDoc
     */
    Hub.prototype.getIntegration = function (integration) {
        var client = this.getClient();
        if (!client)
            return null;
        try {
            return client.getIntegration(integration);
        }
        catch (_oO) {
            logger.warn("Cannot retrieve integration " + integration.id + " from the current Hub");
            return null;
        }
    };
    /**
     * @inheritDoc
     */
    Hub.prototype.startSpan = function (context) {
        return this._callExtensionMethod('startSpan', context);
    };
    /**
     * @inheritDoc
     */
    Hub.prototype.startTransaction = function (context, customSamplingContext) {
        return this._callExtensionMethod('startTransaction', context, customSamplingContext);
    };
    /**
     * @inheritDoc
     */
    Hub.prototype.traceHeaders = function () {
        return this._callExtensionMethod('traceHeaders');
    };
    /**
     * @inheritDoc
     */
    Hub.prototype.captureSession = function (endSession) {
        if (endSession === void 0) { endSession = false; }
        // both send the update and pull the session from the scope
        if (endSession) {
            return this.endSession();
        }
        // only send the update
        this._sendSessionUpdate();
    };
    /**
     * @inheritDoc
     */
    Hub.prototype.endSession = function () {
        var layer = this.getStackTop();
        var scope = layer && layer.scope;
        var session = scope && scope.getSession();
        if (session) {
            session.close();
        }
        this._sendSessionUpdate();
        // the session is over; take it off of the scope
        if (scope) {
            scope.setSession();
        }
    };
    /**
     * @inheritDoc
     */
    Hub.prototype.startSession = function (context) {
        var _a = this.getStackTop(), scope = _a.scope, client = _a.client;
        var _b = (client && client.getOptions()) || {}, release = _b.release, environment = _b.environment;
        // Will fetch userAgent if called from browser sdk
        var global = getGlobalObject();
        var userAgent = (global.navigator || {}).userAgent;
        var session = new Session(FronteggApp.__assign(FronteggApp.__assign(FronteggApp.__assign({ release: release,
            environment: environment }, (scope && { user: scope.getUser() })), (userAgent && { userAgent: userAgent })), context));
        if (scope) {
            // End existing session if there's one
            var currentSession = scope.getSession && scope.getSession();
            if (currentSession && currentSession.status === 'ok') {
                currentSession.update({ status: 'exited' });
            }
            this.endSession();
            // Afterwards we set the new session on the scope
            scope.setSession(session);
        }
        return session;
    };
    /**
     * Sends the current Session on the scope
     */
    Hub.prototype._sendSessionUpdate = function () {
        var _a = this.getStackTop(), scope = _a.scope, client = _a.client;
        if (!scope)
            return;
        var session = scope.getSession && scope.getSession();
        if (session) {
            if (client && client.captureSession) {
                client.captureSession(session);
            }
        }
    };
    /**
     * Internal helper function to call a method on the top client if it exists.
     *
     * @param method The method to call on the client.
     * @param args Arguments to pass to the client function.
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Hub.prototype._invokeClient = function (method) {
        var _a;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var _b = this.getStackTop(), scope = _b.scope, client = _b.client;
        if (client && client[method]) {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any
            (_a = client)[method].apply(_a, FronteggApp.__spread(args, [scope]));
        }
    };
    /**
     * Calls global extension method and binding current instance to the function call
     */
    // @ts-ignore Function lacks ending return statement and return type does not include 'undefined'. ts(2366)
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Hub.prototype._callExtensionMethod = function (method) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var carrier = getMainCarrier();
        var sentry = carrier.__SENTRY__;
        if (sentry && sentry.extensions && typeof sentry.extensions[method] === 'function') {
            return sentry.extensions[method].apply(this, args);
        }
        logger.warn("Extension method " + method + " couldn't be found, doing nothing.");
    };
    return Hub;
}());
/**
 * Returns the global shim registry.
 *
 * FIXME: This function is problematic, because despite always returning a valid Carrier,
 * it has an optional `__SENTRY__` property, which then in turn requires us to always perform an unnecessary check
 * at the call-site. We always access the carrier through this function, so we can guarantee that `__SENTRY__` is there.
 **/
function getMainCarrier() {
    var carrier = getGlobalObject();
    carrier.__SENTRY__ = carrier.__SENTRY__ || {
        extensions: {},
        hub: undefined,
    };
    return carrier;
}
/**
 * Replaces the current main hub with the passed one on the global object
 *
 * @returns The old replaced hub
 */
function makeMain(hub) {
    var registry = getMainCarrier();
    var oldHub = getHubFromCarrier(registry);
    setHubOnCarrier(registry, hub);
    return oldHub;
}
/**
 * Returns the default hub instance.
 *
 * If a hub is already registered in the global carrier but this module
 * contains a more recent version, it replaces the registered version.
 * Otherwise, the currently registered hub will be returned.
 */
function getCurrentHub() {
    // Get main carrier (global for every environment)
    var registry = getMainCarrier();
    // If there's no hub, or its an old API, assign a new one
    if (!hasHubOnCarrier(registry) || getHubFromCarrier(registry).isOlderThan(API_VERSION)) {
        setHubOnCarrier(registry, new Hub());
    }
    // Prefer domains over global if they are there (applicable only to Node environment)
    if (isNodeEnv()) {
        return getHubFromActiveDomain(registry);
    }
    // Return hub that lives on a global object
    return getHubFromCarrier(registry);
}
/**
 * Try to read the hub from an active domain, and fallback to the registry if one doesn't exist
 * @returns discovered hub
 */
function getHubFromActiveDomain(registry) {
    try {
        var sentry = getMainCarrier().__SENTRY__;
        var activeDomain = sentry && sentry.extensions && sentry.extensions.domain && sentry.extensions.domain.active;
        // If there's no active domain, just return global hub
        if (!activeDomain) {
            return getHubFromCarrier(registry);
        }
        // If there's no hub on current domain, or it's an old API, assign a new one
        if (!hasHubOnCarrier(activeDomain) || getHubFromCarrier(activeDomain).isOlderThan(API_VERSION)) {
            var registryHubTopStack = getHubFromCarrier(registry).getStackTop();
            setHubOnCarrier(activeDomain, new Hub(registryHubTopStack.client, Scope.clone(registryHubTopStack.scope)));
        }
        // Return hub that lives on a domain
        return getHubFromCarrier(activeDomain);
    }
    catch (_Oo) {
        // Return hub that lives on a global object
        return getHubFromCarrier(registry);
    }
}
/**
 * This will tell whether a carrier has a hub on it or not
 * @param carrier object
 */
function hasHubOnCarrier(carrier) {
    return !!(carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub);
}
/**
 * This will create a new {@link Hub} and add to the passed object on
 * __SENTRY__.hub.
 * @param carrier object
 * @hidden
 */
function getHubFromCarrier(carrier) {
    if (carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub)
        return carrier.__SENTRY__.hub;
    carrier.__SENTRY__ = carrier.__SENTRY__ || {};
    carrier.__SENTRY__.hub = new Hub();
    return carrier.__SENTRY__.hub;
}
/**
 * This will set passed {@link Hub} on the passed object's __SENTRY__.hub attribute
 * @param carrier object
 * @param hub Hub
 * @returns A boolean indicating success or failure
 */
function setHubOnCarrier(carrier, hub) {
    if (!carrier)
        return false;
    carrier.__SENTRY__ = carrier.__SENTRY__ || {};
    carrier.__SENTRY__.hub = hub;
    return true;
}

/**
 * This calls a function on the current hub.
 * @param method function to call on hub.
 * @param args to pass to function.
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function callOnHub(method) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    var hub = getCurrentHub();
    if (hub && hub[method]) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        return hub[method].apply(hub, FronteggApp.__spread(args));
    }
    throw new Error("No hub defined or " + method + " was not found on the hub, please open a bug report.");
}
/**
 * Captures an exception event and sends it to Sentry.
 *
 * @param exception An exception-like object.
 * @returns The generated eventId.
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
function captureException(exception, captureContext) {
    var syntheticException;
    try {
        throw new Error('Sentry syntheticException');
    }
    catch (exception) {
        syntheticException = exception;
    }
    return callOnHub('captureException', exception, {
        captureContext: captureContext,
        originalException: exception,
        syntheticException: syntheticException,
    });
}
/**
 * Creates a new scope with and executes the given operation within.
 * The scope is automatically removed once the operation
 * finishes or throws.
 *
 * This is essentially a convenience function for:
 *
 *     pushScope();
 *     callback();
 *     popScope();
 *
 * @param callback that will be enclosed into push/popScope.
 */
function withScope(callback) {
    callOnHub('withScope', callback);
}

var SENTRY_API_VERSION = '7';
/** Initializes API Details */
function initAPIDetails(dsn, metadata, tunnel) {
    return {
        initDsn: dsn,
        metadata: metadata || {},
        dsn: makeDsn(dsn),
        tunnel: tunnel,
    };
}
/** Returns the prefix to construct Sentry ingestion API endpoints. */
function getBaseApiEndpoint(dsn) {
    var protocol = dsn.protocol ? dsn.protocol + ":" : '';
    var port = dsn.port ? ":" + dsn.port : '';
    return protocol + "//" + dsn.host + port + (dsn.path ? "/" + dsn.path : '') + "/api/";
}
/** Returns the ingest API endpoint for target. */
function _getIngestEndpoint(dsn, target) {
    return "" + getBaseApiEndpoint(dsn) + dsn.projectId + "/" + target + "/";
}
/** Returns a URL-encoded string with auth config suitable for a query string. */
function _encodedAuth(dsn) {
    return urlEncode({
        // We send only the minimum set of required information. See
        // https://github.com/getsentry/sentry-javascript/issues/2572.
        sentry_key: dsn.publicKey,
        sentry_version: SENTRY_API_VERSION,
    });
}
/** Returns the store endpoint URL. */
function getStoreEndpoint(dsn) {
    return _getIngestEndpoint(dsn, 'store');
}
/**
 * Returns the store endpoint URL with auth in the query string.
 *
 * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.
 */
function getStoreEndpointWithUrlEncodedAuth(dsn) {
    return getStoreEndpoint(dsn) + "?" + _encodedAuth(dsn);
}
/** Returns the envelope endpoint URL. */
function _getEnvelopeEndpoint(dsn) {
    return _getIngestEndpoint(dsn, 'envelope');
}
/**
 * Returns the envelope endpoint URL with auth in the query string.
 *
 * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.
 */
function getEnvelopeEndpointWithUrlEncodedAuth(dsn, tunnel) {
    return tunnel ? tunnel : _getEnvelopeEndpoint(dsn) + "?" + _encodedAuth(dsn);
}
/** Returns the url to the report dialog endpoint. */
function getReportDialogEndpoint(dsnLike, dialogOptions) {
    var dsn = makeDsn(dsnLike);
    var endpoint = getBaseApiEndpoint(dsn) + "embed/error-page/";
    var encodedOptions = "dsn=" + dsnToString(dsn);
    for (var key in dialogOptions) {
        if (key === 'dsn') {
            continue;
        }
        if (key === 'user') {
            if (!dialogOptions.user) {
                continue;
            }
            if (dialogOptions.user.name) {
                encodedOptions += "&name=" + encodeURIComponent(dialogOptions.user.name);
            }
            if (dialogOptions.user.email) {
                encodedOptions += "&email=" + encodeURIComponent(dialogOptions.user.email);
            }
        }
        else {
            encodedOptions += "&" + encodeURIComponent(key) + "=" + encodeURIComponent(dialogOptions[key]);
        }
    }
    return endpoint + "?" + encodedOptions;
}

var installedIntegrations = [];
/**
 * @private
 */
function filterDuplicates(integrations) {
    return integrations.reduce(function (acc, integrations) {
        if (acc.every(function (accIntegration) { return integrations.name !== accIntegration.name; })) {
            acc.push(integrations);
        }
        return acc;
    }, []);
}
/** Gets integration to install */
function getIntegrationsToSetup(options) {
    var defaultIntegrations = (options.defaultIntegrations && FronteggApp.__spread(options.defaultIntegrations)) || [];
    var userIntegrations = options.integrations;
    var integrations = FronteggApp.__spread(filterDuplicates(defaultIntegrations));
    if (Array.isArray(userIntegrations)) {
        // Filter out integrations that are also included in user options
        integrations = FronteggApp.__spread(integrations.filter(function (integrations) {
            return userIntegrations.every(function (userIntegration) { return userIntegration.name !== integrations.name; });
        }), filterDuplicates(userIntegrations));
    }
    else if (typeof userIntegrations === 'function') {
        integrations = userIntegrations(integrations);
        integrations = Array.isArray(integrations) ? integrations : [integrations];
    }
    // Make sure that if present, `Debug` integration will always run last
    var integrationsNames = integrations.map(function (i) { return i.name; });
    var alwaysLastToRun = 'Debug';
    if (integrationsNames.indexOf(alwaysLastToRun) !== -1) {
        integrations.push.apply(integrations, FronteggApp.__spread(integrations.splice(integrationsNames.indexOf(alwaysLastToRun), 1)));
    }
    return integrations;
}
/** Setup given integration */
function setupIntegration(integration) {
    if (installedIntegrations.indexOf(integration.name) !== -1) {
        return;
    }
    integration.setupOnce(addGlobalEventProcessor, getCurrentHub);
    installedIntegrations.push(integration.name);
    logger.log("Integration installed: " + integration.name);
}
/**
 * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default
 * integrations are added unless they were already provided before.
 * @param integrations array of integration instances
 * @param withDefault should enable default integrations
 */
function setupIntegrations(options) {
    var integrations = {};
    getIntegrationsToSetup(options).forEach(function (integration) {
        integrations[integration.name] = integration;
        setupIntegration(integration);
    });
    // set the `initialized` flag so we don't run through the process again unecessarily; use `Object.defineProperty`
    // because by default it creates a property which is nonenumerable, which we want since `initialized` shouldn't be
    // considered a member of the index the way the actual integrations are
    addNonEnumerableProperty(integrations, 'initialized', true);
    return integrations;
}

var ALREADY_SEEN_ERROR = "Not capturing exception because it's already been captured.";
/**
 * Base implementation for all JavaScript SDK clients.
 *
 * Call the constructor with the corresponding backend constructor and options
 * specific to the client subclass. To access these options later, use
 * {@link Client.getOptions}. Also, the Backend instance is available via
 * {@link Client.getBackend}.
 *
 * If a Dsn is specified in the options, it will be parsed and stored. Use
 * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is
 * invalid, the constructor will throw a {@link SentryException}. Note that
 * without a valid Dsn, the SDK will not send any events to Sentry.
 *
 * Before sending an event via the backend, it is passed through
 * {@link BaseClient._prepareEvent} to add SDK information and scope data
 * (breadcrumbs and context). To add more custom information, override this
 * method and extend the resulting prepared event.
 *
 * To issue automatically created events (e.g. via instrumentation), use
 * {@link Client.captureEvent}. It will prepare the event and pass it through
 * the callback lifecycle. To issue auto-breadcrumbs, use
 * {@link Client.addBreadcrumb}.
 *
 * @example
 * class NodeClient extends BaseClient<NodeBackend, NodeOptions> {
 *   public constructor(options: NodeOptions) {
 *     super(NodeBackend, options);
 *   }
 *
 *   // ...
 * }
 */
var BaseClient = /** @class */ (function () {
    /**
     * Initializes this client instance.
     *
     * @param backendClass A constructor function to create the backend.
     * @param options Options for the client.
     */
    function BaseClient(backendClass, options) {
        /** Array of used integrations. */
        this._integrations = {};
        /** Number of calls being processed */
        this._numProcessing = 0;
        this._backend = new backendClass(options);
        this._options = options;
        if (options.dsn) {
            this._dsn = makeDsn(options.dsn);
        }
    }
    /**
     * @inheritDoc
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
    BaseClient.prototype.captureException = function (exception, hint, scope) {
        var _this = this;
        // ensure we haven't captured this very object before
        if (checkOrSetAlreadyCaught(exception)) {
            logger.log(ALREADY_SEEN_ERROR);
            return;
        }
        var eventId = hint && hint.event_id;
        this._process(this._getBackend()
            .eventFromException(exception, hint)
            .then(function (event) { return _this._captureEvent(event, hint, scope); })
            .then(function (result) {
            eventId = result;
        }));
        return eventId;
    };
    /**
     * @inheritDoc
     */
    BaseClient.prototype.captureMessage = function (message, level, hint, scope) {
        var _this = this;
        var eventId = hint && hint.event_id;
        var promisedEvent = isPrimitive(message)
            ? this._getBackend().eventFromMessage(String(message), level, hint)
            : this._getBackend().eventFromException(message, hint);
        this._process(promisedEvent
            .then(function (event) { return _this._captureEvent(event, hint, scope); })
            .then(function (result) {
            eventId = result;
        }));
        return eventId;
    };
    /**
     * @inheritDoc
     */
    BaseClient.prototype.captureEvent = function (event, hint, scope) {
        // ensure we haven't captured this very object before
        if (hint && hint.originalException && checkOrSetAlreadyCaught(hint.originalException)) {
            logger.log(ALREADY_SEEN_ERROR);
            return;
        }
        var eventId = hint && hint.event_id;
        this._process(this._captureEvent(event, hint, scope).then(function (result) {
            eventId = result;
        }));
        return eventId;
    };
    /**
     * @inheritDoc
     */
    BaseClient.prototype.captureSession = function (session) {
        if (!this._isEnabled()) {
            if (isDebugBuild()) {
                logger.warn('SDK not enabled, will not capture session.');
            }
            return;
        }
        if (!(typeof session.release === 'string')) {
            if (isDebugBuild()) {
                logger.warn('Discarded session because of missing or non-string release');
            }
        }
        else {
            this._sendSession(session);
            // After sending, we set init false to indicate it's not the first occurrence
            session.update({ init: false });
        }
    };
    /**
     * @inheritDoc
     */
    BaseClient.prototype.getDsn = function () {
        return this._dsn;
    };
    /**
     * @inheritDoc
     */
    BaseClient.prototype.getOptions = function () {
        return this._options;
    };
    /**
     * @inheritDoc
     */
    BaseClient.prototype.getTransport = function () {
        return this._getBackend().getTransport();
    };
    /**
     * @inheritDoc
     */
    BaseClient.prototype.flush = function (timeout) {
        var _this = this;
        return this._isClientDoneProcessing(timeout).then(function (clientFinished) {
            return _this.getTransport()
                .close(timeout)
                .then(function (transportFlushed) { return clientFinished && transportFlushed; });
        });
    };
    /**
     * @inheritDoc
     */
    BaseClient.prototype.close = function (timeout) {
        var _this = this;
        return this.flush(timeout).then(function (result) {
            _this.getOptions().enabled = false;
            return result;
        });
    };
    /**
     * Sets up the integrations
     */
    BaseClient.prototype.setupIntegrations = function () {
        if (this._isEnabled() && !this._integrations.initialized) {
            this._integrations = setupIntegrations(this._options);
        }
    };
    /**
     * @inheritDoc
     */
    BaseClient.prototype.getIntegration = function (integration) {
        try {
            return this._integrations[integration.id] || null;
        }
        catch (_oO) {
            logger.warn("Cannot retrieve integration " + integration.id + " from the current Client");
            return null;
        }
    };
    /** Updates existing session based on the provided event */
    BaseClient.prototype._updateSessionFromEvent = function (session, event) {
        var e_1, _a;
        var crashed = false;
        var errored = false;
        var exceptions = event.exception && event.exception.values;
        if (exceptions) {
            errored = true;
            try {
                for (var exceptions_1 = FronteggApp.__values(exceptions), exceptions_1_1 = exceptions_1.next(); !exceptions_1_1.done; exceptions_1_1 = exceptions_1.next()) {
                    var ex = exceptions_1_1.value;
                    var mechanism = ex.mechanism;
                    if (mechanism && mechanism.handled === false) {
                        crashed = true;
                        break;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (exceptions_1_1 && !exceptions_1_1.done && (_a = exceptions_1.return)) _a.call(exceptions_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        // A session is updated and that session update is sent in only one of the two following scenarios:
        // 1. Session with non terminal status and 0 errors + an error occurred -> Will set error count to 1 and send update
        // 2. Session with non terminal status and 1 error + a crash occurred -> Will set status crashed and send update
        var sessionNonTerminal = session.status === 'ok';
        var shouldUpdateAndSend = (sessionNonTerminal && session.errors === 0) || (sessionNonTerminal && crashed);
        if (shouldUpdateAndSend) {
            session.update(FronteggApp.__assign(FronteggApp.__assign({}, (crashed && { status: 'crashed' })), { errors: session.errors || Number(errored || crashed) }));
            this.captureSession(session);
        }
    };
    /** Deliver captured session to Sentry */
    BaseClient.prototype._sendSession = function (session) {
        this._getBackend().sendSession(session);
    };
    /**
     * Determine if the client is finished processing. Returns a promise because it will wait `timeout` ms before saying
     * "no" (resolving to `false`) in order to give the client a chance to potentially finish first.
     *
     * @param timeout The time, in ms, after which to resolve to `false` if the client is still busy. Passing `0` (or not
     * passing anything) will make the promise wait as long as it takes for processing to finish before resolving to
     * `true`.
     * @returns A promise which will resolve to `true` if processing is already done or finishes before the timeout, and
     * `false` otherwise
     */
    BaseClient.prototype._isClientDoneProcessing = function (timeout) {
        var _this = this;
        return new SyncPromise(function (resolve) {
            var ticked = 0;
            var tick = 1;
            var interval = setInterval(function () {
                if (_this._numProcessing == 0) {
                    clearInterval(interval);
                    resolve(true);
                }
                else {
                    ticked += tick;
                    if (timeout && ticked >= timeout) {
                        clearInterval(interval);
                        resolve(false);
                    }
                }
            }, tick);
        });
    };
    /** Returns the current backend. */
    BaseClient.prototype._getBackend = function () {
        return this._backend;
    };
    /** Determines whether this SDK is enabled and a valid Dsn is present. */
    BaseClient.prototype._isEnabled = function () {
        return this.getOptions().enabled !== false && this._dsn !== undefined;
    };
    /**
     * Adds common information to events.
     *
     * The information includes release and environment from `options`,
     * breadcrumbs and context (extra, tags and user) from the scope.
     *
     * Information that is already present in the event is never overwritten. For
     * nested objects, such as the context, keys are merged.
     *
     * @param event The original event.
     * @param hint May contain additional information about the original exception.
     * @param scope A scope containing event metadata.
     * @returns A new event with more information.
     */
    BaseClient.prototype._prepareEvent = function (event, scope, hint) {
        var _this = this;
        var _a = this.getOptions().normalizeDepth, normalizeDepth = _a === void 0 ? 3 : _a;
        var prepared = FronteggApp.__assign(FronteggApp.__assign({}, event), { event_id: event.event_id || (hint && hint.event_id ? hint.event_id : uuid4()), timestamp: event.timestamp || dateTimestampInSeconds() });
        this._applyClientOptions(prepared);
        this._applyIntegrationsMetadata(prepared);
        // If we have scope given to us, use it as the base for further modifications.
        // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.
        var finalScope = scope;
        if (hint && hint.captureContext) {
            finalScope = Scope.clone(finalScope).update(hint.captureContext);
        }
        // We prepare the result here with a resolved Event.
        var result = resolvedSyncPromise(prepared);
        // This should be the last thing called, since we want that
        // {@link Hub.addEventProcessor} gets the finished prepared event.
        if (finalScope) {
            // In case we have a hub we reassign it.
            result = finalScope.applyToEvent(prepared, hint);
        }
        return result.then(function (evt) {
            if (evt) {
                // TODO this is more of the hack trying to solve https://github.com/getsentry/sentry-javascript/issues/2809
                // it is only attached as extra data to the event if the event somehow skips being normalized
                evt.sdkProcessingMetadata = FronteggApp.__assign(FronteggApp.__assign({}, evt.sdkProcessingMetadata), { normalizeDepth: normalize(normalizeDepth) });
            }
            if (typeof normalizeDepth === 'number' && normalizeDepth > 0) {
                return _this._normalizeEvent(evt, normalizeDepth);
            }
            return evt;
        });
    };
    /**
     * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.
     * Normalized keys:
     * - `breadcrumbs.data`
     * - `user`
     * - `contexts`
     * - `extra`
     * @param event Event
     * @returns Normalized event
     */
    BaseClient.prototype._normalizeEvent = function (event, depth) {
        if (!event) {
            return null;
        }
        var normalized = FronteggApp.__assign(FronteggApp.__assign(FronteggApp.__assign(FronteggApp.__assign(FronteggApp.__assign({}, event), (event.breadcrumbs && {
            breadcrumbs: event.breadcrumbs.map(function (b) { return (FronteggApp.__assign(FronteggApp.__assign({}, b), (b.data && {
                data: normalize(b.data, depth),
            }))); }),
        })), (event.user && {
            user: normalize(event.user, depth),
        })), (event.contexts && {
            contexts: normalize(event.contexts, depth),
        })), (event.extra && {
            extra: normalize(event.extra, depth),
        }));
        // event.contexts.trace stores information about a Transaction. Similarly,
        // event.spans[] stores information about child Spans. Given that a
        // Transaction is conceptually a Span, normalization should apply to both
        // Transactions and Spans consistently.
        // For now the decision is to skip normalization of Transactions and Spans,
        // so this block overwrites the normalized event to add back the original
        // Transaction information prior to normalization.
        if (event.contexts && event.contexts.trace) {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
            normalized.contexts.trace = event.contexts.trace;
        }
        event.sdkProcessingMetadata = FronteggApp.__assign(FronteggApp.__assign({}, event.sdkProcessingMetadata), { baseClientNormalized: true });
        return normalized;
    };
    /**
     *  Enhances event using the client configuration.
     *  It takes care of all "static" values like environment, release and `dist`,
     *  as well as truncating overly long values.
     * @param event event instance to be enhanced
     */
    BaseClient.prototype._applyClientOptions = function (event) {
        var options = this.getOptions();
        var environment = options.environment, release = options.release, dist = options.dist, _a = options.maxValueLength, maxValueLength = _a === void 0 ? 250 : _a;
        if (!('environment' in event)) {
            event.environment = 'environment' in options ? environment : 'production';
        }
        if (event.release === undefined && release !== undefined) {
            event.release = release;
        }
        if (event.dist === undefined && dist !== undefined) {
            event.dist = dist;
        }
        if (event.message) {
            event.message = truncate(event.message, maxValueLength);
        }
        var exception = event.exception && event.exception.values && event.exception.values[0];
        if (exception && exception.value) {
            exception.value = truncate(exception.value, maxValueLength);
        }
        var request = event.request;
        if (request && request.url) {
            request.url = truncate(request.url, maxValueLength);
        }
    };
    /**
     * This function adds all used integrations to the SDK info in the event.
     * @param event The event that will be filled with all integrations.
     */
    BaseClient.prototype._applyIntegrationsMetadata = function (event) {
        var integrationsArray = Object.keys(this._integrations);
        if (integrationsArray.length > 0) {
            event.sdk = event.sdk || {};
            event.sdk.integrations = FronteggApp.__spread((event.sdk.integrations || []), integrationsArray);
        }
    };
    /**
     * Tells the backend to send this event
     * @param event The Sentry event to send
     */
    BaseClient.prototype._sendEvent = function (event) {
        this._getBackend().sendEvent(event);
    };
    /**
     * Processes the event and logs an error in case of rejection
     * @param event
     * @param hint
     * @param scope
     */
    BaseClient.prototype._captureEvent = function (event, hint, scope) {
        return this._processEvent(event, hint, scope).then(function (finalEvent) {
            return finalEvent.event_id;
        }, function (reason) {
            logger.error(reason);
            return undefined;
        });
    };
    /**
     * Processes an event (either error or message) and sends it to Sentry.
     *
     * This also adds breadcrumbs and context information to the event. However,
     * platform specific meta data (such as the User's IP address) must be added
     * by the SDK implementor.
     *
     *
     * @param event The event to send to Sentry.
     * @param hint May contain additional information about the original exception.
     * @param scope A scope containing event metadata.
     * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.
     */
    BaseClient.prototype._processEvent = function (event, hint, scope) {
        var _this = this;
        // eslint-disable-next-line @typescript-eslint/unbound-method
        var _a = this.getOptions(), beforeSend = _a.beforeSend, sampleRate = _a.sampleRate;
        var transport = this.getTransport();
        function recordLostEvent(outcome, category) {
            if (transport.recordLostEvent) {
                transport.recordLostEvent(outcome, category);
            }
        }
        if (!this._isEnabled()) {
            return rejectedSyncPromise(new SentryError('SDK not enabled, will not capture event.'));
        }
        var isTransaction = event.type === 'transaction';
        // 1.0 === 100% events are sent
        // 0.0 === 0% events are sent
        // Sampling for transaction happens somewhere else
        if (!isTransaction && typeof sampleRate === 'number' && Math.random() > sampleRate) {
            recordLostEvent('sample_rate', 'event');
            return rejectedSyncPromise(new SentryError("Discarding event because it's not included in the random sample (sampling rate = " + sampleRate + ")"));
        }
        return this._prepareEvent(event, scope, hint)
            .then(function (prepared) {
            if (prepared === null) {
                recordLostEvent('event_processor', event.type || 'event');
                throw new SentryError('An event processor returned null, will not send event.');
            }
            var isInternalException = hint && hint.data && hint.data.__sentry__ === true;
            if (isInternalException || isTransaction || !beforeSend) {
                return prepared;
            }
            var beforeSendResult = beforeSend(prepared, hint);
            return _ensureBeforeSendRv(beforeSendResult);
        })
            .then(function (processedEvent) {
            if (processedEvent === null) {
                recordLostEvent('before_send', event.type || 'event');
                throw new SentryError('`beforeSend` returned `null`, will not send event.');
            }
            var session = scope && scope.getSession && scope.getSession();
            if (!isTransaction && session) {
                _this._updateSessionFromEvent(session, processedEvent);
            }
            _this._sendEvent(processedEvent);
            return processedEvent;
        })
            .then(null, function (reason) {
            if (reason instanceof SentryError) {
                throw reason;
            }
            _this.captureException(reason, {
                data: {
                    __sentry__: true,
                },
                originalException: reason,
            });
            throw new SentryError("Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\nReason: " + reason);
        });
    };
    /**
     * Occupies the client with processing and event
     */
    BaseClient.prototype._process = function (promise) {
        var _this = this;
        this._numProcessing += 1;
        void promise.then(function (value) {
            _this._numProcessing -= 1;
            return value;
        }, function (reason) {
            _this._numProcessing -= 1;
            return reason;
        });
    };
    return BaseClient;
}());
/**
 * Verifies that return value of configured `beforeSend` is of expected type.
 */
function _ensureBeforeSendRv(rv) {
    var nullErr = '`beforeSend` method has to return `null` or a valid event.';
    if (isThenable(rv)) {
        return rv.then(function (event) {
            if (!(isPlainObject(event) || event === null)) {
                throw new SentryError(nullErr);
            }
            return event;
        }, function (e) {
            throw new SentryError("beforeSend rejected with " + e);
        });
    }
    else if (!(isPlainObject(rv) || rv === null)) {
        throw new SentryError(nullErr);
    }
    return rv;
}

/** Noop transport */
var NoopTransport = /** @class */ (function () {
    function NoopTransport() {
    }
    /**
     * @inheritDoc
     */
    NoopTransport.prototype.sendEvent = function (_) {
        return resolvedSyncPromise({
            reason: "NoopTransport: Event has been skipped because no Dsn is configured.",
            status: 'skipped',
        });
    };
    /**
     * @inheritDoc
     */
    NoopTransport.prototype.close = function (_) {
        return resolvedSyncPromise(true);
    };
    return NoopTransport;
}());

/**
 * This is the base implemention of a Backend.
 * @hidden
 */
var BaseBackend = /** @class */ (function () {
    /** Creates a new backend instance. */
    function BaseBackend(options) {
        this._options = options;
        if (!this._options.dsn) {
            logger.warn('No DSN provided, backend will not do anything.');
        }
        this._transport = this._setupTransport();
    }
    /**
     * @inheritDoc
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
    BaseBackend.prototype.eventFromException = function (_exception, _hint) {
        throw new SentryError('Backend has to implement `eventFromException` method');
    };
    /**
     * @inheritDoc
     */
    BaseBackend.prototype.eventFromMessage = function (_message, _level, _hint) {
        throw new SentryError('Backend has to implement `eventFromMessage` method');
    };
    /**
     * @inheritDoc
     */
    BaseBackend.prototype.sendEvent = function (event) {
        void this._transport.sendEvent(event).then(null, function (reason) {
            if (isDebugBuild()) {
                logger.error("Error while sending event: " + reason);
            }
        });
    };
    /**
     * @inheritDoc
     */
    BaseBackend.prototype.sendSession = function (session) {
        if (!this._transport.sendSession) {
            if (isDebugBuild()) {
                logger.warn("Dropping session because custom transport doesn't implement sendSession");
            }
            return;
        }
        void this._transport.sendSession(session).then(null, function (reason) {
            if (isDebugBuild()) {
                logger.error("Error while sending session: " + reason);
            }
        });
    };
    /**
     * @inheritDoc
     */
    BaseBackend.prototype.getTransport = function () {
        return this._transport;
    };
    /**
     * Sets up the transport so it can be used later to send requests.
     */
    BaseBackend.prototype._setupTransport = function () {
        return new NoopTransport();
    };
    return BaseBackend;
}());

/** Extract sdk info from from the API metadata */
function getSdkMetadataForEnvelopeHeader(api) {
    if (!api.metadata || !api.metadata.sdk) {
        return;
    }
    var _a = api.metadata.sdk, name = _a.name, version = _a.version;
    return { name: name, version: version };
}
/**
 * Apply SdkInfo (name, version, packages, integrations) to the corresponding event key.
 * Merge with existing data if any.
 **/
function enhanceEventWithSdkInfo(event, sdkInfo) {
    if (!sdkInfo) {
        return event;
    }
    event.sdk = event.sdk || {};
    event.sdk.name = event.sdk.name || sdkInfo.name;
    event.sdk.version = event.sdk.version || sdkInfo.version;
    event.sdk.integrations = FronteggApp.__spread((event.sdk.integrations || []), (sdkInfo.integrations || []));
    event.sdk.packages = FronteggApp.__spread((event.sdk.packages || []), (sdkInfo.packages || []));
    return event;
}
/** Creates a SentryRequest from a Session. */
function sessionToSentryRequest(session, api) {
    var sdkInfo = getSdkMetadataForEnvelopeHeader(api);
    var envelopeHeaders = JSON.stringify(FronteggApp.__assign(FronteggApp.__assign({ sent_at: new Date().toISOString() }, (sdkInfo && { sdk: sdkInfo })), (!!api.tunnel && { dsn: dsnToString(api.dsn) })));
    // I know this is hacky but we don't want to add `session` to request type since it's never rate limited
    var type = 'aggregates' in session ? 'sessions' : 'session';
    var itemHeaders = JSON.stringify({
        type: type,
    });
    return {
        body: envelopeHeaders + "\n" + itemHeaders + "\n" + JSON.stringify(session),
        type: type,
        url: getEnvelopeEndpointWithUrlEncodedAuth(api.dsn, api.tunnel),
    };
}
/** Creates a SentryRequest from an event. */
function eventToSentryRequest(event, api) {
    var sdkInfo = getSdkMetadataForEnvelopeHeader(api);
    var eventType = event.type || 'event';
    var useEnvelope = eventType === 'transaction' || !!api.tunnel;
    var transactionSampling = (event.sdkProcessingMetadata || {}).transactionSampling;
    var _a = transactionSampling || {}, samplingMethod = _a.method, sampleRate = _a.rate;
    // TODO: Below is a temporary hack in order to debug a serialization error - see
    // https://github.com/getsentry/sentry-javascript/issues/2809,
    // https://github.com/getsentry/sentry-javascript/pull/4425, and
    // https://github.com/getsentry/sentry-javascript/pull/4574.
    //
    // TL; DR: even though we normalize all events (which should prevent this), something is causing `JSON.stringify` to
    // throw a circular reference error.
    //
    // When it's time to remove it:
    // 1. Delete everything between here and where the request object `req` is created, EXCEPT the line deleting
    //    `sdkProcessingMetadata`
    // 2. Restore the original version of the request body, which is commented out
    // 3. Search for either of the PR URLs above and pull out the companion hacks in the browser playwright tests and the
    //    baseClient tests in this package
    enhanceEventWithSdkInfo(event, api.metadata.sdk);
    event.tags = event.tags || {};
    event.extra = event.extra || {};
    // In theory, all events should be marked as having gone through normalization and so
    // we should never set this tag/extra data
    if (!(event.sdkProcessingMetadata && event.sdkProcessingMetadata.baseClientNormalized)) {
        event.tags.skippedNormalization = true;
        event.extra.normalizeDepth = event.sdkProcessingMetadata ? event.sdkProcessingMetadata.normalizeDepth : 'unset';
    }
    // prevent this data from being sent to sentry
    // TODO: This is NOT part of the hack - DO NOT DELETE
    delete event.sdkProcessingMetadata;
    var body;
    try {
        // 99.9% of events should get through just fine - no change in behavior for them
        body = JSON.stringify(event);
    }
    catch (err) {
        // Record data about the error without replacing original event data, then force renormalization
        event.tags.JSONStringifyError = true;
        event.extra.JSONStringifyError = err;
        try {
            body = JSON.stringify(normalize(event));
        }
        catch (newErr) {
            // At this point even renormalization hasn't worked, meaning something about the event data has gone very wrong.
            // Time to cut our losses and record only the new error. With luck, even in the problematic cases we're trying to
            // debug with this hack, we won't ever land here.
            var innerErr = newErr;
            body = JSON.stringify({
                message: 'JSON.stringify error after renormalization',
                // setting `extra: { innerErr }` here for some reason results in an empty object, so unpack manually
                extra: { message: innerErr.message, stack: innerErr.stack },
            });
        }
    }
    var req = {
        // this is the relevant line of code before the hack was added, to make it easy to undo said hack once we've solved
        // the mystery
        // body: JSON.stringify(sdkInfo ? enhanceEventWithSdkInfo(event, api.metadata.sdk) : event),
        body: body,
        type: eventType,
        url: useEnvelope
            ? getEnvelopeEndpointWithUrlEncodedAuth(api.dsn, api.tunnel)
            : getStoreEndpointWithUrlEncodedAuth(api.dsn),
    };
    // https://develop.sentry.dev/sdk/envelopes/
    // Since we don't need to manipulate envelopes nor store them, there is no
    // exported concept of an Envelope with operations including serialization and
    // deserialization. Instead, we only implement a minimal subset of the spec to
    // serialize events inline here.
    if (useEnvelope) {
        var envelopeHeaders = JSON.stringify(FronteggApp.__assign(FronteggApp.__assign({ event_id: event.event_id, sent_at: new Date().toISOString() }, (sdkInfo && { sdk: sdkInfo })), (!!api.tunnel && { dsn: dsnToString(api.dsn) })));
        var itemHeaders = JSON.stringify({
            type: eventType,
            // TODO: Right now, sampleRate may or may not be defined (it won't be in the cases of inheritance and
            // explicitly-set sampling decisions). Are we good with that?
            sample_rates: [{ id: samplingMethod, rate: sampleRate }],
        });
        // The trailing newline is optional. We intentionally don't send it to avoid
        // sending unnecessary bytes.
        //
        // const envelope = `${envelopeHeaders}\n${itemHeaders}\n${req.body}\n`;
        var envelope = envelopeHeaders + "\n" + itemHeaders + "\n" + req.body;
        req.body = envelope;
    }
    return req;
}

/**
 * Internal function to create a new SDK client instance. The client is
 * installed and then bound to the current scope.
 *
 * @param clientClass The client class to instantiate.
 * @param options Options to pass to the client.
 */
function initAndBind(clientClass, options) {
    if (options.debug === true) {
        logger.enable();
    }
    var hub = getCurrentHub();
    var scope = hub.getScope();
    if (scope) {
        scope.update(options.initialScope);
    }
    var client = new clientClass(options);
    hub.bindClient(client);
}

var SDK_VERSION = '6.18.0';

var originalFunctionToString;
/** Patch toString calls to return proper name for wrapped functions */
var FunctionToString = /** @class */ (function () {
    function FunctionToString() {
        /**
         * @inheritDoc
         */
        this.name = FunctionToString.id;
    }
    /**
     * @inheritDoc
     */
    FunctionToString.prototype.setupOnce = function () {
        // eslint-disable-next-line @typescript-eslint/unbound-method
        originalFunctionToString = Function.prototype.toString;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        Function.prototype.toString = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var context = getOriginalFunction(this) || this;
            return originalFunctionToString.apply(context, args);
        };
    };
    /**
     * @inheritDoc
     */
    FunctionToString.id = 'FunctionToString';
    return FunctionToString;
}());

// "Script error." is hard coded into browsers for errors that it can't read.
// this is the result of a script being pulled in from an external domain and CORS.
var DEFAULT_IGNORE_ERRORS = [/^Script error\.?$/, /^Javascript error: Script error\.? on line 0$/];
/** Inbound filters configurable by the user */
var InboundFilters = /** @class */ (function () {
    function InboundFilters(_options) {
        if (_options === void 0) { _options = {}; }
        this._options = _options;
        /**
         * @inheritDoc
         */
        this.name = InboundFilters.id;
    }
    /**
     * @inheritDoc
     */
    InboundFilters.prototype.setupOnce = function () {
        addGlobalEventProcessor(function (event) {
            var hub = getCurrentHub();
            if (!hub) {
                return event;
            }
            var self = hub.getIntegration(InboundFilters);
            if (self) {
                var client = hub.getClient();
                var clientOptions = client ? client.getOptions() : {};
                // This checks prevents most of the occurrences of the bug linked below:
                // https://github.com/getsentry/sentry-javascript/issues/2622
                // The bug is caused by multiple SDK instances, where one is minified and one is using non-mangled code.
                // Unfortunatelly we cannot fix it reliably (thus reserved property in rollup's terser config),
                // as we cannot force people using multiple instances in their apps to sync SDK versions.
                var options = typeof self._mergeOptions === 'function' ? self._mergeOptions(clientOptions) : {};
                if (typeof self._shouldDropEvent !== 'function') {
                    return event;
                }
                return self._shouldDropEvent(event, options) ? null : event;
            }
            return event;
        });
    };
    /** JSDoc */
    InboundFilters.prototype._shouldDropEvent = function (event, options) {
        if (this._isSentryError(event, options)) {
            if (isDebugBuild()) {
                logger.warn("Event dropped due to being internal Sentry Error.\nEvent: " + getEventDescription(event));
            }
            return true;
        }
        if (this._isIgnoredError(event, options)) {
            if (isDebugBuild()) {
                logger.warn("Event dropped due to being matched by `ignoreErrors` option.\nEvent: " + getEventDescription(event));
            }
            return true;
        }
        if (this._isDeniedUrl(event, options)) {
            if (isDebugBuild()) {
                logger.warn("Event dropped due to being matched by `denyUrls` option.\nEvent: " + getEventDescription(event) + ".\nUrl: " + this._getEventFilterUrl(event));
            }
            return true;
        }
        if (!this._isAllowedUrl(event, options)) {
            if (isDebugBuild()) {
                logger.warn("Event dropped due to not being matched by `allowUrls` option.\nEvent: " + getEventDescription(event) + ".\nUrl: " + this._getEventFilterUrl(event));
            }
            return true;
        }
        return false;
    };
    /** JSDoc */
    InboundFilters.prototype._isSentryError = function (event, options) {
        if (!options.ignoreInternal) {
            return false;
        }
        try {
            // @ts-ignore can't be a sentry error if undefined
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
            return event.exception.values[0].type === 'SentryError';
        }
        catch (e) {
            // ignore
        }
        return false;
    };
    /** JSDoc */
    InboundFilters.prototype._isIgnoredError = function (event, options) {
        if (!options.ignoreErrors || !options.ignoreErrors.length) {
            return false;
        }
        return this._getPossibleEventMessages(event).some(function (message) {
            // Not sure why TypeScript complains here...
            return options.ignoreErrors.some(function (pattern) { return isMatchingPattern(message, pattern); });
        });
    };
    /** JSDoc */
    InboundFilters.prototype._isDeniedUrl = function (event, options) {
        // TODO: Use Glob instead?
        if (!options.denyUrls || !options.denyUrls.length) {
            return false;
        }
        var url = this._getEventFilterUrl(event);
        return !url ? false : options.denyUrls.some(function (pattern) { return isMatchingPattern(url, pattern); });
    };
    /** JSDoc */
    InboundFilters.prototype._isAllowedUrl = function (event, options) {
        // TODO: Use Glob instead?
        if (!options.allowUrls || !options.allowUrls.length) {
            return true;
        }
        var url = this._getEventFilterUrl(event);
        return !url ? true : options.allowUrls.some(function (pattern) { return isMatchingPattern(url, pattern); });
    };
    /** JSDoc */
    InboundFilters.prototype._mergeOptions = function (clientOptions) {
        if (clientOptions === void 0) { clientOptions = {}; }
        return {
            allowUrls: FronteggApp.__spread((this._options.whitelistUrls || []), (this._options.allowUrls || []), (clientOptions.whitelistUrls || []), (clientOptions.allowUrls || [])),
            denyUrls: FronteggApp.__spread((this._options.blacklistUrls || []), (this._options.denyUrls || []), (clientOptions.blacklistUrls || []), (clientOptions.denyUrls || [])),
            ignoreErrors: FronteggApp.__spread((this._options.ignoreErrors || []), (clientOptions.ignoreErrors || []), DEFAULT_IGNORE_ERRORS),
            ignoreInternal: typeof this._options.ignoreInternal !== 'undefined' ? this._options.ignoreInternal : true,
        };
    };
    /** JSDoc */
    InboundFilters.prototype._getPossibleEventMessages = function (event) {
        if (event.message) {
            return [event.message];
        }
        if (event.exception) {
            try {
                var _a = (event.exception.values && event.exception.values[0]) || {}, _b = _a.type, type = _b === void 0 ? '' : _b, _c = _a.value, value = _c === void 0 ? '' : _c;
                return ["" + value, type + ": " + value];
            }
            catch (oO) {
                if (isDebugBuild()) {
                    logger.error("Cannot extract message for event " + getEventDescription(event));
                }
                return [];
            }
        }
        return [];
    };
    /** JSDoc */
    InboundFilters.prototype._getLastValidUrl = function (frames) {
        if (frames === void 0) { frames = []; }
        for (var i = frames.length - 1; i >= 0; i--) {
            var frame = frames[i];
            if (frame && frame.filename !== '<anonymous>' && frame.filename !== '[native code]') {
                return frame.filename || null;
            }
        }
        return null;
    };
    /** JSDoc */
    InboundFilters.prototype._getEventFilterUrl = function (event) {
        try {
            if (event.stacktrace) {
                return this._getLastValidUrl(event.stacktrace.frames);
            }
            var frames_1;
            try {
                // @ts-ignore we only care about frames if the whole thing here is defined
                frames_1 = event.exception.values[0].stacktrace.frames;
            }
            catch (e) {
                // ignore
            }
            return frames_1 ? this._getLastValidUrl(frames_1) : null;
        }
        catch (oO) {
            if (isDebugBuild()) {
                logger.error("Cannot extract url for event " + getEventDescription(event));
            }
            return null;
        }
    };
    /**
     * @inheritDoc
     */
    InboundFilters.id = 'InboundFilters';
    return InboundFilters;
}());

// global reference to slice
var UNKNOWN_FUNCTION = '?';
function createFrame(filename, func, lineno, colno) {
    var frame = {
        filename: filename,
        function: func,
        // All browser frames are considered in_app
        in_app: true,
    };
    if (lineno !== undefined) {
        frame.lineno = lineno;
    }
    if (colno !== undefined) {
        frame.colno = colno;
    }
    return frame;
}
// Chromium based browsers: Chrome, Brave, new Opera, new Edge
var chromeRegex = /^\s*at (?:(.*?) ?\((?:address at )?)?((?:file|https?|blob|chrome-extension|address|native|eval|webpack|<anonymous>|[-a-z]+:|.*bundle|\/).*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i;
var chromeEvalRegex = /\((\S*)(?::(\d+))(?::(\d+))\)/;
var chrome = function (line) {
    var parts = chromeRegex.exec(line);
    if (parts) {
        var isEval = parts[2] && parts[2].indexOf('eval') === 0; // start of line
        if (isEval) {
            var subMatch = chromeEvalRegex.exec(parts[2]);
            if (subMatch) {
                // throw out eval line/column and use top-most line/column number
                parts[2] = subMatch[1]; // url
                parts[3] = subMatch[2]; // line
                parts[4] = subMatch[3]; // column
            }
        }
        // Kamil: One more hack won't hurt us right? Understanding and adding more rules on top of these regexps right now
        // would be way too time consuming. (TODO: Rewrite whole RegExp to be more readable)
        var _a = FronteggApp.__read(extractSafariExtensionDetails(parts[1] || UNKNOWN_FUNCTION, parts[2]), 2), func = _a[0], filename = _a[1];
        return createFrame(filename, func, parts[3] ? +parts[3] : undefined, parts[4] ? +parts[4] : undefined);
    }
    return;
};
// gecko regex: `(?:bundle|\d+\.js)`: `bundle` is for react native, `\d+\.js` also but specifically for ram bundles because it
// generates filenames without a prefix like `file://` the filenames in the stacktrace are just 42.js
// We need this specific case for now because we want no other regex to match.
var geckoREgex = /^\s*(.*?)(?:\((.*?)\))?(?:^|@)?((?:file|https?|blob|chrome|webpack|resource|moz-extension|capacitor).*?:\/.*?|\[native code\]|[^@]*(?:bundle|\d+\.js)|\/[\w\-. /=]+)(?::(\d+))?(?::(\d+))?\s*$/i;
var geckoEvalRegex = /(\S+) line (\d+)(?: > eval line \d+)* > eval/i;
var gecko = function (line) {
    var _a;
    var parts = geckoREgex.exec(line);
    if (parts) {
        var isEval = parts[3] && parts[3].indexOf(' > eval') > -1;
        if (isEval) {
            var subMatch = geckoEvalRegex.exec(parts[3]);
            if (subMatch) {
                // throw out eval line/column and use top-most line number
                parts[1] = parts[1] || "eval";
                parts[3] = subMatch[1];
                parts[4] = subMatch[2];
                parts[5] = ''; // no column when eval
            }
        }
        var filename = parts[3];
        var func = parts[1] || UNKNOWN_FUNCTION;
        _a = FronteggApp.__read(extractSafariExtensionDetails(func, filename), 2), func = _a[0], filename = _a[1];
        return createFrame(filename, func, parts[4] ? +parts[4] : undefined, parts[5] ? +parts[5] : undefined);
    }
    return;
};
var winjsRegex = /^\s*at (?:((?:\[object object\])?.+) )?\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\d+)(?::(\d+))?\)?\s*$/i;
var winjs = function (line) {
    var parts = winjsRegex.exec(line);
    return parts
        ? createFrame(parts[2], parts[1] || UNKNOWN_FUNCTION, +parts[3], parts[4] ? +parts[4] : undefined)
        : undefined;
};
var opera10Regex = / line (\d+).*script (?:in )?(\S+)(?:: in function (\S+))?$/i;
var opera10 = function (line) {
    var parts = opera10Regex.exec(line);
    return parts ? createFrame(parts[2], parts[3] || UNKNOWN_FUNCTION, +parts[1]) : undefined;
};
var opera11Regex = / line (\d+), column (\d+)\s*(?:in (?:<anonymous function: ([^>]+)>|([^)]+))\(.*\))? in (.*):\s*$/i;
var opera11 = function (line) {
    var parts = opera11Regex.exec(line);
    return parts ? createFrame(parts[5], parts[3] || parts[4] || UNKNOWN_FUNCTION, +parts[1], +parts[2]) : undefined;
};
/**
 * Safari web extensions, starting version unknown, can produce "frames-only" stacktraces.
 * What it means, is that instead of format like:
 *
 * Error: wat
 *   at function@url:row:col
 *   at function@url:row:col
 *   at function@url:row:col
 *
 * it produces something like:
 *
 *   function@url:row:col
 *   function@url:row:col
 *   function@url:row:col
 *
 * Because of that, it won't be captured by `chrome` RegExp and will fall into `Gecko` branch.
 * This function is extracted so that we can use it in both places without duplicating the logic.
 * Unfortunately "just" changing RegExp is too complicated now and making it pass all tests
 * and fix this case seems like an impossible, or at least way too time-consuming task.
 */
var extractSafariExtensionDetails = function (func, filename) {
    var isSafariExtension = func.indexOf('safari-extension') !== -1;
    var isSafariWebExtension = func.indexOf('safari-web-extension') !== -1;
    return isSafariExtension || isSafariWebExtension
        ? [
            func.indexOf('@') !== -1 ? func.split('@')[0] : UNKNOWN_FUNCTION,
            isSafariExtension ? "safari-extension:" + filename : "safari-web-extension:" + filename,
        ]
        : [func, filename];
};

/**
 * This function creates an exception from an TraceKitStackTrace
 * @param stacktrace TraceKitStackTrace that will be converted to an exception
 * @hidden
 */
function exceptionFromError(ex) {
    // Get the frames first since Opera can lose the stack if we touch anything else first
    var frames = parseStackFrames(ex);
    var exception = {
        type: ex && ex.name,
        value: extractMessage(ex),
    };
    if (frames && frames.length) {
        exception.stacktrace = { frames: frames };
    }
    if (exception.type === undefined && exception.value === '') {
        exception.value = 'Unrecoverable error caught';
    }
    return exception;
}
/**
 * @hidden
 */
function eventFromPlainObject(exception, syntheticException, rejection) {
    var event = {
        exception: {
            values: [
                {
                    type: isEvent(exception) ? exception.constructor.name : rejection ? 'UnhandledRejection' : 'Error',
                    value: "Non-Error " + (rejection ? 'promise rejection' : 'exception') + " captured with keys: " + extractExceptionKeysForMessage(exception),
                },
            ],
        },
        extra: {
            __serialized__: normalizeToSize(exception),
        },
    };
    if (syntheticException) {
        var frames_1 = parseStackFrames(syntheticException);
        if (frames_1.length) {
            event.stacktrace = { frames: frames_1 };
        }
    }
    return event;
}
/**
 * @hidden
 */
function eventFromError(ex) {
    return {
        exception: {
            values: [exceptionFromError(ex)],
        },
    };
}
/** Parses stack frames from an error */
function parseStackFrames(ex) {
    // Access and store the stacktrace property before doing ANYTHING
    // else to it because Opera is not very good at providing it
    // reliably in other circumstances.
    var stacktrace = ex.stacktrace || ex.stack || '';
    var popSize = getPopSize(ex);
    try {
        // The order of the parsers in important
        return createStackParser(opera10, opera11, chrome, winjs, gecko)(stacktrace, popSize);
    }
    catch (e) {
        // no-empty
    }
    return [];
}
// Based on our own mapping pattern - https://github.com/getsentry/sentry/blob/9f08305e09866c8bd6d0c24f5b0aabdd7dd6c59c/src/sentry/lang/javascript/errormapping.py#L83-L108
var reactMinifiedRegexp = /Minified React error #\d+;/i;
function getPopSize(ex) {
    if (ex) {
        if (typeof ex.framesToPop === 'number') {
            return ex.framesToPop;
        }
        if (reactMinifiedRegexp.test(ex.message)) {
            return 1;
        }
    }
    return 0;
}
/**
 * There are cases where stacktrace.message is an Event object
 * https://github.com/getsentry/sentry-javascript/issues/1949
 * In this specific case we try to extract stacktrace.message.error.message
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function extractMessage(ex) {
    var message = ex && ex.message;
    if (!message) {
        return 'No error message';
    }
    if (message.error && typeof message.error.message === 'string') {
        return message.error.message;
    }
    return message;
}

/**
 * Creates an {@link Event} from all inputs to `captureException` and non-primitive inputs to `captureMessage`.
 * @hidden
 */
function eventFromException(options, exception, hint) {
    var syntheticException = (hint && hint.syntheticException) || undefined;
    var event = eventFromUnknownInput(exception, syntheticException, {
        attachStacktrace: options.attachStacktrace,
    });
    addExceptionMechanism(event); // defaults to { type: 'generic', handled: true }
    event.level = Severity.Error;
    if (hint && hint.event_id) {
        event.event_id = hint.event_id;
    }
    return resolvedSyncPromise(event);
}
/**
 * Builds and Event from a Message
 * @hidden
 */
function eventFromMessage(options, message, level, hint) {
    if (level === void 0) { level = Severity.Info; }
    var syntheticException = (hint && hint.syntheticException) || undefined;
    var event = eventFromString(message, syntheticException, {
        attachStacktrace: options.attachStacktrace,
    });
    event.level = level;
    if (hint && hint.event_id) {
        event.event_id = hint.event_id;
    }
    return resolvedSyncPromise(event);
}
/**
 * @hidden
 */
function eventFromUnknownInput(exception, syntheticException, options) {
    if (options === void 0) { options = {}; }
    var event;
    if (isErrorEvent(exception) && exception.error) {
        // If it is an ErrorEvent with `error` property, extract it to get actual Error
        var errorEvent = exception;
        return eventFromError(errorEvent.error);
    }
    // If it is a `DOMError` (which is a legacy API, but still supported in some browsers) then we just extract the name
    // and message, as it doesn't provide anything else. According to the spec, all `DOMExceptions` should also be
    // `Error`s, but that's not the case in IE11, so in that case we treat it the same as we do a `DOMError`.
    //
    // https://developer.mozilla.org/en-US/docs/Web/API/DOMError
    // https://developer.mozilla.org/en-US/docs/Web/API/DOMException
    // https://webidl.spec.whatwg.org/#es-DOMException-specialness
    if (isDOMError(exception) || isDOMException(exception)) {
        var domException = exception;
        if ('stack' in exception) {
            event = eventFromError(exception);
        }
        else {
            var name_1 = domException.name || (isDOMError(domException) ? 'DOMError' : 'DOMException');
            var message = domException.message ? name_1 + ": " + domException.message : name_1;
            event = eventFromString(message, syntheticException, options);
            addExceptionTypeValue(event, message);
        }
        if ('code' in domException) {
            event.tags = FronteggApp.__assign(FronteggApp.__assign({}, event.tags), { 'DOMException.code': "" + domException.code });
        }
        return event;
    }
    if (isError(exception)) {
        // we have a real Error object, do nothing
        return eventFromError(exception);
    }
    if (isPlainObject(exception) || isEvent(exception)) {
        // If it's a plain object or an instance of `Event` (the built-in JS kind, not this SDK's `Event` type), serialize
        // it manually. This will allow us to group events based on top-level keys which is much better than creating a new
        // group on any key/value change.
        var objectException = exception;
        event = eventFromPlainObject(objectException, syntheticException, options.isRejection);
        addExceptionMechanism(event, {
            synthetic: true,
        });
        return event;
    }
    // If none of previous checks were valid, then it means that it's not:
    // - an instance of DOMError
    // - an instance of DOMException
    // - an instance of Event
    // - an instance of Error
    // - a valid ErrorEvent (one with an error property)
    // - a plain Object
    //
    // So bail out and capture it as a simple message:
    event = eventFromString(exception, syntheticException, options);
    addExceptionTypeValue(event, "" + exception, undefined);
    addExceptionMechanism(event, {
        synthetic: true,
    });
    return event;
}
/**
 * @hidden
 */
function eventFromString(input, syntheticException, options) {
    if (options === void 0) { options = {}; }
    var event = {
        message: input,
    };
    if (options.attachStacktrace && syntheticException) {
        var frames_1 = parseStackFrames(syntheticException);
        if (frames_1.length) {
            event.stacktrace = { frames: frames_1 };
        }
    }
    return event;
}

var global$8 = getGlobalObject();
var cachedFetchImpl;
/**
 * A special usecase for incorrectly wrapped Fetch APIs in conjunction with ad-blockers.
 * Whenever someone wraps the Fetch API and returns the wrong promise chain,
 * this chain becomes orphaned and there is no possible way to capture it's rejections
 * other than allowing it bubble up to this very handler. eg.
 *
 * const f = window.fetch;
 * window.fetch = function () {
 *   const p = f.apply(this, arguments);
 *
 *   p.then(function() {
 *     console.log('hi.');
 *   });
 *
 *   return p;
 * }
 *
 * `p.then(function () { ... })` is producing a completely separate promise chain,
 * however, what's returned is `p` - the result of original `fetch` call.
 *
 * This mean, that whenever we use the Fetch API to send our own requests, _and_
 * some ad-blocker blocks it, this orphaned chain will _always_ reject,
 * effectively causing another event to be captured.
 * This makes a whole process become an infinite loop, which we need to somehow
 * deal with, and break it in one way or another.
 *
 * To deal with this issue, we are making sure that we _always_ use the real
 * browser Fetch API, instead of relying on what `window.fetch` exposes.
 * The only downside to this would be missing our own requests as breadcrumbs,
 * but because we are already not doing this, it should be just fine.
 *
 * Possible failed fetch error messages per-browser:
 *
 * Chrome:  Failed to fetch
 * Edge:    Failed to Fetch
 * Firefox: NetworkError when attempting to fetch resource
 * Safari:  resource blocked by content blocker
 */
function getNativeFetchImplementation() {
    if (cachedFetchImpl) {
        return cachedFetchImpl;
    }
    /* eslint-disable @typescript-eslint/unbound-method */
    // Fast path to avoid DOM I/O
    if (isNativeFetch(global$8.fetch)) {
        return (cachedFetchImpl = global$8.fetch.bind(global$8));
    }
    var document = global$8.document;
    var fetchImpl = global$8.fetch;
    // eslint-disable-next-line deprecation/deprecation
    if (document && typeof document.createElement === "function") {
        try {
            var sandbox = document.createElement('iframe');
            sandbox.hidden = true;
            document.head.appendChild(sandbox);
            var contentWindow = sandbox.contentWindow;
            if (contentWindow && contentWindow.fetch) {
                fetchImpl = contentWindow.fetch;
            }
            document.head.removeChild(sandbox);
        }
        catch (e) {
            if (isDebugBuild()) {
                logger.warn('Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ', e);
            }
        }
    }
    return (cachedFetchImpl = fetchImpl.bind(global$8));
    /* eslint-enable @typescript-eslint/unbound-method */
}
/**
 * Sends sdk client report using sendBeacon or fetch as a fallback if available
 *
 * @param url report endpoint
 * @param body report payload
 */
function sendReport(url, body) {
    var isRealNavigator = Object.prototype.toString.call(global$8 && global$8.navigator) === '[object Navigator]';
    var hasSendBeacon = isRealNavigator && typeof global$8.navigator.sendBeacon === 'function';
    if (hasSendBeacon) {
        // Prevent illegal invocations - https://xgwang.me/posts/you-may-not-know-beacon/#it-may-throw-error%2C-be-sure-to-catch
        var sendBeacon = global$8.navigator.sendBeacon.bind(global$8.navigator);
        return sendBeacon(url, body);
    }
    if (supportsFetch()) {
        var fetch_1 = getNativeFetchImplementation();
        return forget(fetch_1(url, {
            body: body,
            method: 'POST',
            credentials: 'omit',
            keepalive: true,
        }));
    }
}

function requestTypeToCategory(ty) {
    var tyStr = ty;
    return tyStr === 'event' ? 'error' : tyStr;
}
var global$7 = getGlobalObject();
/** Base Transport class implementation */
var BaseTransport = /** @class */ (function () {
    function BaseTransport(options) {
        var _this = this;
        this.options = options;
        /** A simple buffer holding all requests. */
        this._buffer = makePromiseBuffer(30);
        /** Locks transport after receiving rate limits in a response */
        this._rateLimits = {};
        this._outcomes = {};
        this._api = initAPIDetails(options.dsn, options._metadata, options.tunnel);
        // eslint-disable-next-line deprecation/deprecation
        this.url = getStoreEndpointWithUrlEncodedAuth(this._api.dsn);
        if (this.options.sendClientReports && global$7.document) {
            global$7.document.addEventListener('visibilitychange', function () {
                if (global$7.document.visibilityState === 'hidden') {
                    _this._flushOutcomes();
                }
            });
        }
    }
    /**
     * @inheritDoc
     */
    BaseTransport.prototype.sendEvent = function (event) {
        return this._sendRequest(eventToSentryRequest(event, this._api), event);
    };
    /**
     * @inheritDoc
     */
    BaseTransport.prototype.sendSession = function (session) {
        return this._sendRequest(sessionToSentryRequest(session, this._api), session);
    };
    /**
     * @inheritDoc
     */
    BaseTransport.prototype.close = function (timeout) {
        return this._buffer.drain(timeout);
    };
    /**
     * @inheritDoc
     */
    BaseTransport.prototype.recordLostEvent = function (reason, category) {
        var _a;
        if (!this.options.sendClientReports) {
            return;
        }
        // We want to track each category (event, transaction, session) separately
        // but still keep the distinction between different type of outcomes.
        // We could use nested maps, but it's much easier to read and type this way.
        // A correct type for map-based implementation if we want to go that route
        // would be `Partial<Record<SentryRequestType, Partial<Record<Outcome, number>>>>`
        var key = requestTypeToCategory(category) + ":" + reason;
        logger.log("Adding outcome: " + key);
        this._outcomes[key] = (_a = this._outcomes[key], (_a !== null && _a !== void 0 ? _a : 0)) + 1;
    };
    /**
     * Send outcomes as an envelope
     */
    BaseTransport.prototype._flushOutcomes = function () {
        if (!this.options.sendClientReports) {
            return;
        }
        var outcomes = this._outcomes;
        this._outcomes = {};
        // Nothing to send
        if (!Object.keys(outcomes).length) {
            logger.log('No outcomes to flush');
            return;
        }
        logger.log("Flushing outcomes:\n" + JSON.stringify(outcomes, null, 2));
        var url = getEnvelopeEndpointWithUrlEncodedAuth(this._api.dsn, this._api.tunnel);
        // Envelope header is required to be at least an empty object
        var envelopeHeader = JSON.stringify(FronteggApp.__assign({}, (this._api.tunnel && { dsn: dsnToString(this._api.dsn) })));
        var itemHeaders = JSON.stringify({
            type: 'client_report',
        });
        var item = JSON.stringify({
            timestamp: dateTimestampInSeconds(),
            discarded_events: Object.keys(outcomes).map(function (key) {
                var _a = FronteggApp.__read(key.split(':'), 2), category = _a[0], reason = _a[1];
                return {
                    reason: reason,
                    category: category,
                    quantity: outcomes[key],
                };
            }),
        });
        var envelope = envelopeHeader + "\n" + itemHeaders + "\n" + item;
        try {
            sendReport(url, envelope);
        }
        catch (e) {
            logger.error(e);
        }
    };
    /**
     * Handle Sentry repsonse for promise-based transports.
     */
    BaseTransport.prototype._handleResponse = function (_a) {
        var requestType = _a.requestType, response = _a.response, headers = _a.headers, resolve = _a.resolve, reject = _a.reject;
        var status = eventStatusFromHttpCode(response.status);
        /**
         * "The name is case-insensitive."
         * https://developer.mozilla.org/en-US/docs/Web/API/Headers/get
         */
        var limited = this._handleRateLimit(headers);
        if (limited && isDebugBuild()) {
            logger.warn("Too many " + requestType + " requests, backing off until: " + this._disabledUntil(requestType));
        }
        if (status === 'success') {
            resolve({ status: status });
            return;
        }
        reject(response);
    };
    /**
     * Gets the time that given category is disabled until for rate limiting
     */
    BaseTransport.prototype._disabledUntil = function (requestType) {
        var category = requestTypeToCategory(requestType);
        return this._rateLimits[category] || this._rateLimits.all;
    };
    /**
     * Checks if a category is rate limited
     */
    BaseTransport.prototype._isRateLimited = function (requestType) {
        return this._disabledUntil(requestType) > new Date(Date.now());
    };
    /**
     * Sets internal _rateLimits from incoming headers. Returns true if headers contains a non-empty rate limiting header.
     */
    BaseTransport.prototype._handleRateLimit = function (headers) {
        var e_1, _a, e_2, _b;
        var now = Date.now();
        var rlHeader = headers['x-sentry-rate-limits'];
        var raHeader = headers['retry-after'];
        if (rlHeader) {
            try {
                // rate limit headers are of the form
                //     <header>,<header>,..
                // where each <header> is of the form
                //     <retry_after>: <categories>: <scope>: <reason_code>
                // where
                //     <retry_after> is a delay in ms
                //     <categories> is the event type(s) (error, transaction, etc) being rate limited and is of the form
                //         <category>;<category>;...
                //     <scope> is what's being limited (org, project, or key) - ignored by SDK
                //     <reason_code> is an arbitrary string like "org_quota" - ignored by SDK
                for (var _c = FronteggApp.__values(rlHeader.trim().split(',')), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var limit = _d.value;
                    var parameters = limit.split(':', 2);
                    var headerDelay = parseInt(parameters[0], 10);
                    var delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1000; // 60sec default
                    try {
                        for (var _e = (e_2 = void 0, FronteggApp.__values(parameters[1].split(';'))), _f = _e.next(); !_f.done; _f = _e.next()) {
                            var category = _f.value;
                            this._rateLimits[category || 'all'] = new Date(now + delay);
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return true;
        }
        else if (raHeader) {
            this._rateLimits.all = new Date(now + parseRetryAfterHeader(now, raHeader));
            return true;
        }
        return false;
    };
    return BaseTransport;
}());

/** `fetch` based transport */
var FetchTransport = /** @class */ (function (_super) {
    FronteggApp.__extends(FetchTransport, _super);
    function FetchTransport(options, fetchImpl) {
        if (fetchImpl === void 0) { fetchImpl = getNativeFetchImplementation(); }
        var _this = _super.call(this, options) || this;
        _this._fetch = fetchImpl;
        return _this;
    }
    /**
     * @param sentryRequest Prepared SentryRequest to be delivered
     * @param originalPayload Original payload used to create SentryRequest
     */
    FetchTransport.prototype._sendRequest = function (sentryRequest, originalPayload) {
        var _this = this;
        if (this._isRateLimited(sentryRequest.type)) {
            this.recordLostEvent('ratelimit_backoff', sentryRequest.type);
            return Promise.reject({
                event: originalPayload,
                type: sentryRequest.type,
                reason: "Transport for " + sentryRequest.type + " requests locked till " + this._disabledUntil(sentryRequest.type) + " due to too many requests.",
                status: 429,
            });
        }
        var options = {
            body: sentryRequest.body,
            method: 'POST',
            // Despite all stars in the sky saying that Edge supports old draft syntax, aka 'never', 'always', 'origin' and 'default'
            // (see https://caniuse.com/#feat=referrer-policy),
            // it doesn't. And it throws an exception instead of ignoring this parameter...
            // REF: https://github.com/getsentry/raven-js/issues/1233
            referrerPolicy: (supportsReferrerPolicy() ? 'origin' : ''),
        };
        if (this.options.fetchParameters !== undefined) {
            Object.assign(options, this.options.fetchParameters);
        }
        if (this.options.headers !== undefined) {
            options.headers = this.options.headers;
        }
        return this._buffer
            .add(function () {
            return new SyncPromise(function (resolve, reject) {
                void _this._fetch(sentryRequest.url, options)
                    .then(function (response) {
                    var headers = {
                        'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),
                        'retry-after': response.headers.get('Retry-After'),
                    };
                    _this._handleResponse({
                        requestType: sentryRequest.type,
                        response: response,
                        headers: headers,
                        resolve: resolve,
                        reject: reject,
                    });
                })
                    .catch(reject);
            });
        })
            .then(undefined, function (reason) {
            // It's either buffer rejection or any other xhr/fetch error, which are treated as NetworkError.
            if (reason instanceof SentryError) {
                _this.recordLostEvent('queue_overflow', sentryRequest.type);
            }
            else {
                _this.recordLostEvent('network_error', sentryRequest.type);
            }
            throw reason;
        });
    };
    return FetchTransport;
}(BaseTransport));

/** `XHR` based transport */
var XHRTransport = /** @class */ (function (_super) {
    FronteggApp.__extends(XHRTransport, _super);
    function XHRTransport() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param sentryRequest Prepared SentryRequest to be delivered
     * @param originalPayload Original payload used to create SentryRequest
     */
    XHRTransport.prototype._sendRequest = function (sentryRequest, originalPayload) {
        var _this = this;
        if (this._isRateLimited(sentryRequest.type)) {
            this.recordLostEvent('ratelimit_backoff', sentryRequest.type);
            return Promise.reject({
                event: originalPayload,
                type: sentryRequest.type,
                reason: "Transport for " + sentryRequest.type + " requests locked till " + this._disabledUntil(sentryRequest.type) + " due to too many requests.",
                status: 429,
            });
        }
        return this._buffer
            .add(function () {
            return new SyncPromise(function (resolve, reject) {
                var request = new XMLHttpRequest();
                request.onreadystatechange = function () {
                    if (request.readyState === 4) {
                        var headers = {
                            'x-sentry-rate-limits': request.getResponseHeader('X-Sentry-Rate-Limits'),
                            'retry-after': request.getResponseHeader('Retry-After'),
                        };
                        _this._handleResponse({ requestType: sentryRequest.type, response: request, headers: headers, resolve: resolve, reject: reject });
                    }
                };
                request.open('POST', sentryRequest.url);
                for (var header in _this.options.headers) {
                    if (Object.prototype.hasOwnProperty.call(_this.options.headers, header)) {
                        request.setRequestHeader(header, _this.options.headers[header]);
                    }
                }
                request.send(sentryRequest.body);
            });
        })
            .then(undefined, function (reason) {
            // It's either buffer rejection or any other xhr/fetch error, which are treated as NetworkError.
            if (reason instanceof SentryError) {
                _this.recordLostEvent('queue_overflow', sentryRequest.type);
            }
            else {
                _this.recordLostEvent('network_error', sentryRequest.type);
            }
            throw reason;
        });
    };
    return XHRTransport;
}(BaseTransport));

/**
 * The Sentry Browser SDK Backend.
 * @hidden
 */
var BrowserBackend = /** @class */ (function (_super) {
    FronteggApp.__extends(BrowserBackend, _super);
    function BrowserBackend() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @inheritDoc
     */
    BrowserBackend.prototype.eventFromException = function (exception, hint) {
        return eventFromException(this._options, exception, hint);
    };
    /**
     * @inheritDoc
     */
    BrowserBackend.prototype.eventFromMessage = function (message, level, hint) {
        if (level === void 0) { level = Severity.Info; }
        return eventFromMessage(this._options, message, level, hint);
    };
    /**
     * @inheritDoc
     */
    BrowserBackend.prototype._setupTransport = function () {
        if (!this._options.dsn) {
            // We return the noop transport here in case there is no Dsn.
            return _super.prototype._setupTransport.call(this);
        }
        var transportOptions = FronteggApp.__assign(FronteggApp.__assign({}, this._options.transportOptions), { dsn: this._options.dsn, tunnel: this._options.tunnel, sendClientReports: this._options.sendClientReports, _metadata: this._options._metadata });
        if (this._options.transport) {
            return new this._options.transport(transportOptions);
        }
        if (supportsFetch()) {
            return new FetchTransport(transportOptions);
        }
        return new XHRTransport(transportOptions);
    };
    return BrowserBackend;
}(BaseBackend));

var global$6 = getGlobalObject();
var ignoreOnError = 0;
/**
 * @hidden
 */
function shouldIgnoreOnError() {
    return ignoreOnError > 0;
}
/**
 * @hidden
 */
function ignoreNextOnError() {
    // onerror should trigger before setTimeout
    ignoreOnError += 1;
    setTimeout(function () {
        ignoreOnError -= 1;
    });
}
/**
 * Instruments the given function and sends an event to Sentry every time the
 * function throws an exception.
 *
 * @param fn A function to wrap.
 * @returns The wrapped function.
 * @hidden
 */
function wrap(fn, options, before) {
    // for future readers what this does is wrap a function and then create
    // a bi-directional wrapping between them.
    //
    // example: wrapped = wrap(original);
    //  original.__sentry_wrapped__ -> wrapped
    //  wrapped.__sentry_original__ -> original
    if (options === void 0) { options = {}; }
    if (typeof fn !== 'function') {
        return fn;
    }
    try {
        // if we're dealing with a function that was previously wrapped, return
        // the original wrapper.
        var wrapper = fn.__sentry_wrapped__;
        if (wrapper) {
            return wrapper;
        }
        // We don't wanna wrap it twice
        if (getOriginalFunction(fn)) {
            return fn;
        }
    }
    catch (e) {
        // Just accessing custom props in some Selenium environments
        // can cause a "Permission denied" exception (see raven-js#495).
        // Bail on wrapping and return the function as-is (defers to window.onerror).
        return fn;
    }
    /* eslint-disable prefer-rest-params */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    var sentryWrapped = function () {
        var args = Array.prototype.slice.call(arguments);
        try {
            if (before && typeof before === 'function') {
                before.apply(this, arguments);
            }
            // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access
            var wrappedArguments = args.map(function (arg) { return wrap(arg, options); });
            // Attempt to invoke user-land function
            // NOTE: If you are a Sentry user, and you are seeing this stack frame, it
            //       means the sentry.javascript SDK caught an error invoking your application code. This
            //       is expected behavior and NOT indicative of a bug with sentry.javascript.
            return fn.apply(this, wrappedArguments);
        }
        catch (ex) {
            ignoreNextOnError();
            withScope(function (scope) {
                scope.addEventProcessor(function (event) {
                    if (options.mechanism) {
                        addExceptionTypeValue(event, undefined, undefined);
                        addExceptionMechanism(event, options.mechanism);
                    }
                    event.extra = FronteggApp.__assign(FronteggApp.__assign({}, event.extra), { arguments: args });
                    return event;
                });
                captureException(ex);
            });
            throw ex;
        }
    };
    /* eslint-enable prefer-rest-params */
    // Accessing some objects may throw
    // ref: https://github.com/getsentry/sentry-javascript/issues/1168
    try {
        for (var property in fn) {
            if (Object.prototype.hasOwnProperty.call(fn, property)) {
                sentryWrapped[property] = fn[property];
            }
        }
    }
    catch (_oO) { } // eslint-disable-line no-empty
    // Signal that this function has been wrapped/filled already
    // for both debugging and to prevent it to being wrapped/filled twice
    markFunctionWrapped(sentryWrapped, fn);
    addNonEnumerableProperty(fn, '__sentry_wrapped__', sentryWrapped);
    // Restore original function name (not all browsers allow that)
    try {
        var descriptor = Object.getOwnPropertyDescriptor(sentryWrapped, 'name');
        if (descriptor.configurable) {
            Object.defineProperty(sentryWrapped, 'name', {
                get: function () {
                    return fn.name;
                },
            });
        }
        // eslint-disable-next-line no-empty
    }
    catch (_oO) { }
    return sentryWrapped;
}
/**
 * Injects the Report Dialog script
 * @hidden
 */
function injectReportDialog(options) {
    if (options === void 0) { options = {}; }
    if (!global$6.document) {
        return;
    }
    if (!options.eventId) {
        if (isDebugBuild()) {
            logger.error("Missing eventId option in showReportDialog call");
        }
        return;
    }
    if (!options.dsn) {
        if (isDebugBuild()) {
            logger.error("Missing dsn option in showReportDialog call");
        }
        return;
    }
    var script = global$6.document.createElement('script');
    script.async = true;
    script.src = getReportDialogEndpoint(options.dsn, options);
    if (options.onLoad) {
        // eslint-disable-next-line @typescript-eslint/unbound-method
        script.onload = options.onLoad;
    }
    var injectionPoint = global$6.document.head || global$6.document.body;
    if (injectionPoint) {
        injectionPoint.appendChild(script);
    }
}

/** Global handlers */
var GlobalHandlers = /** @class */ (function () {
    /** JSDoc */
    function GlobalHandlers(options) {
        /**
         * @inheritDoc
         */
        this.name = GlobalHandlers.id;
        /**
         * Stores references functions to installing handlers. Will set to undefined
         * after they have been run so that they are not used twice.
         */
        this._installFunc = {
            onerror: _installGlobalOnErrorHandler,
            onunhandledrejection: _installGlobalOnUnhandledRejectionHandler,
        };
        this._options = FronteggApp.__assign({ onerror: true, onunhandledrejection: true }, options);
    }
    /**
     * @inheritDoc
     */
    GlobalHandlers.prototype.setupOnce = function () {
        Error.stackTraceLimit = 50;
        var options = this._options;
        // We can disable guard-for-in as we construct the options object above + do checks against
        // `this._installFunc` for the property.
        // eslint-disable-next-line guard-for-in
        for (var key in options) {
            var installFunc = this._installFunc[key];
            if (installFunc && options[key]) {
                globalHandlerLog(key);
                installFunc();
                this._installFunc[key] = undefined;
            }
        }
    };
    /**
     * @inheritDoc
     */
    GlobalHandlers.id = 'GlobalHandlers';
    return GlobalHandlers;
}());
/** JSDoc */
function _installGlobalOnErrorHandler() {
    addInstrumentationHandler('error', 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    function (data) {
        var _a = FronteggApp.__read(getHubAndAttachStacktrace(), 2), hub = _a[0], attachStacktrace = _a[1];
        if (!hub.getIntegration(GlobalHandlers)) {
            return;
        }
        var msg = data.msg, url = data.url, line = data.line, column = data.column, error = data.error;
        if (shouldIgnoreOnError() || (error && error.__sentry_own_request__)) {
            return;
        }
        var event = error === undefined && isString(msg)
            ? _eventFromIncompleteOnError(msg, url, line, column)
            : _enhanceEventWithInitialFrame(eventFromUnknownInput(error || msg, undefined, {
                attachStacktrace: attachStacktrace,
                isRejection: false,
            }), url, line, column);
        event.level = Severity.Error;
        addMechanismAndCapture(hub, error, event, 'onerror');
    });
}
/** JSDoc */
function _installGlobalOnUnhandledRejectionHandler() {
    addInstrumentationHandler('unhandledrejection', 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    function (e) {
        var _a = FronteggApp.__read(getHubAndAttachStacktrace(), 2), hub = _a[0], attachStacktrace = _a[1];
        if (!hub.getIntegration(GlobalHandlers)) {
            return;
        }
        var error = e;
        // dig the object of the rejection out of known event types
        try {
            // PromiseRejectionEvents store the object of the rejection under 'reason'
            // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent
            if ('reason' in e) {
                error = e.reason;
            }
            // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents
            // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into
            // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec
            // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and
            // https://github.com/getsentry/sentry-javascript/issues/2380
            else if ('detail' in e && 'reason' in e.detail) {
                error = e.detail.reason;
            }
        }
        catch (_oO) {
            // no-empty
        }
        if (shouldIgnoreOnError() || (error && error.__sentry_own_request__)) {
            return true;
        }
        var event = isPrimitive(error)
            ? _eventFromRejectionWithPrimitive(error)
            : eventFromUnknownInput(error, undefined, {
                attachStacktrace: attachStacktrace,
                isRejection: true,
            });
        event.level = Severity.Error;
        addMechanismAndCapture(hub, error, event, 'onunhandledrejection');
        return;
    });
}
/**
 * Create an event from a promise rejection where the `reason` is a primitive.
 *
 * @param reason: The `reason` property of the promise rejection
 * @returns An Event object with an appropriate `exception` value
 */
function _eventFromRejectionWithPrimitive(reason) {
    return {
        exception: {
            values: [
                {
                    type: 'UnhandledRejection',
                    // String() is needed because the Primitive type includes symbols (which can't be automatically stringified)
                    value: "Non-Error promise rejection captured with value: " + String(reason),
                },
            ],
        },
    };
}
/**
 * This function creates a stack from an old, error-less onerror handler.
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function _eventFromIncompleteOnError(msg, url, line, column) {
    var ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i;
    // If 'message' is ErrorEvent, get real message from inside
    var message = isErrorEvent(msg) ? msg.message : msg;
    var name = 'Error';
    var groups = message.match(ERROR_TYPES_RE);
    if (groups) {
        name = groups[1];
        message = groups[2];
    }
    var event = {
        exception: {
            values: [
                {
                    type: name,
                    value: message,
                },
            ],
        },
    };
    return _enhanceEventWithInitialFrame(event, url, line, column);
}
/** JSDoc */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function _enhanceEventWithInitialFrame(event, url, line, column) {
    // event.exception
    var e = (event.exception = event.exception || {});
    // event.exception.values
    var ev = (e.values = e.values || []);
    // event.exception.values[0]
    var ev0 = (ev[0] = ev[0] || {});
    // event.exception.values[0].stacktrace
    var ev0s = (ev0.stacktrace = ev0.stacktrace || {});
    // event.exception.values[0].stacktrace.frames
    var ev0sf = (ev0s.frames = ev0s.frames || []);
    var colno = isNaN(parseInt(column, 10)) ? undefined : column;
    var lineno = isNaN(parseInt(line, 10)) ? undefined : line;
    var filename = isString(url) && url.length > 0 ? url : getLocationHref();
    // event.exception.values[0].stacktrace.frames
    if (ev0sf.length === 0) {
        ev0sf.push({
            colno: colno,
            filename: filename,
            function: '?',
            in_app: true,
            lineno: lineno,
        });
    }
    return event;
}
function globalHandlerLog(type) {
    if (isDebugBuild()) {
        logger.log("Global Handler attached: " + type);
    }
}
function addMechanismAndCapture(hub, error, event, type) {
    addExceptionMechanism(event, {
        handled: false,
        type: type,
    });
    hub.captureEvent(event, {
        originalException: error,
    });
}
function getHubAndAttachStacktrace() {
    var hub = getCurrentHub();
    var client = hub.getClient();
    var attachStacktrace = client && client.getOptions().attachStacktrace;
    return [hub, attachStacktrace];
}

var DEFAULT_EVENT_TARGET = [
    'EventTarget',
    'Window',
    'Node',
    'ApplicationCache',
    'AudioTrackList',
    'ChannelMergerNode',
    'CryptoOperation',
    'EventSource',
    'FileReader',
    'HTMLUnknownElement',
    'IDBDatabase',
    'IDBRequest',
    'IDBTransaction',
    'KeyOperation',
    'MediaController',
    'MessagePort',
    'ModalWindow',
    'Notification',
    'SVGElementInstance',
    'Screen',
    'TextTrack',
    'TextTrackCue',
    'TextTrackList',
    'WebSocket',
    'WebSocketWorker',
    'Worker',
    'XMLHttpRequest',
    'XMLHttpRequestEventTarget',
    'XMLHttpRequestUpload',
];
/** Wrap timer functions and event targets to catch errors and provide better meta data */
var TryCatch = /** @class */ (function () {
    /**
     * @inheritDoc
     */
    function TryCatch(options) {
        /**
         * @inheritDoc
         */
        this.name = TryCatch.id;
        this._options = FronteggApp.__assign({ XMLHttpRequest: true, eventTarget: true, requestAnimationFrame: true, setInterval: true, setTimeout: true }, options);
    }
    /**
     * Wrap timer functions and event targets to catch errors
     * and provide better metadata.
     */
    TryCatch.prototype.setupOnce = function () {
        var global = getGlobalObject();
        if (this._options.setTimeout) {
            fill(global, 'setTimeout', _wrapTimeFunction);
        }
        if (this._options.setInterval) {
            fill(global, 'setInterval', _wrapTimeFunction);
        }
        if (this._options.requestAnimationFrame) {
            fill(global, 'requestAnimationFrame', _wrapRAF);
        }
        if (this._options.XMLHttpRequest && 'XMLHttpRequest' in global) {
            fill(XMLHttpRequest.prototype, 'send', _wrapXHR);
        }
        var eventTargetOption = this._options.eventTarget;
        if (eventTargetOption) {
            var eventTarget = Array.isArray(eventTargetOption) ? eventTargetOption : DEFAULT_EVENT_TARGET;
            eventTarget.forEach(_wrapEventTarget);
        }
    };
    /**
     * @inheritDoc
     */
    TryCatch.id = 'TryCatch';
    return TryCatch;
}());
/** JSDoc */
function _wrapTimeFunction(original) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var originalCallback = args[0];
        args[0] = wrap(originalCallback, {
            mechanism: {
                data: { function: getFunctionName(original) },
                handled: true,
                type: 'instrument',
            },
        });
        return original.apply(this, args);
    };
}
/** JSDoc */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function _wrapRAF(original) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return function (callback) {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
        return original.call(this, wrap(callback, {
            mechanism: {
                data: {
                    function: 'requestAnimationFrame',
                    handler: getFunctionName(original),
                },
                handled: true,
                type: 'instrument',
            },
        }));
    };
}
/** JSDoc */
function _wrapXHR(originalSend) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        var xhr = this;
        var xmlHttpRequestProps = ['onload', 'onerror', 'onprogress', 'onreadystatechange'];
        xmlHttpRequestProps.forEach(function (prop) {
            if (prop in xhr && typeof xhr[prop] === 'function') {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                fill(xhr, prop, function (original) {
                    var wrapOptions = {
                        mechanism: {
                            data: {
                                function: prop,
                                handler: getFunctionName(original),
                            },
                            handled: true,
                            type: 'instrument',
                        },
                    };
                    // If Instrument integration has been called before TryCatch, get the name of original function
                    var originalFunction = getOriginalFunction(original);
                    if (originalFunction) {
                        wrapOptions.mechanism.data.handler = getFunctionName(originalFunction);
                    }
                    // Otherwise wrap directly
                    return wrap(original, wrapOptions);
                });
            }
        });
        return originalSend.apply(this, args);
    };
}
/** JSDoc */
function _wrapEventTarget(target) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    var global = getGlobalObject();
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    var proto = global[target] && global[target].prototype;
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, no-prototype-builtins
    if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty('addEventListener')) {
        return;
    }
    fill(proto, 'addEventListener', function (original) {
        return function (eventName, fn, options) {
            try {
                if (typeof fn.handleEvent === 'function') {
                    fn.handleEvent = wrap(fn.handleEvent.bind(fn), {
                        mechanism: {
                            data: {
                                function: 'handleEvent',
                                handler: getFunctionName(fn),
                                target: target,
                            },
                            handled: true,
                            type: 'instrument',
                        },
                    });
                }
            }
            catch (err) {
                // can sometimes get 'Permission denied to access property "handle Event'
            }
            return original.call(this, eventName, 
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            wrap(fn, {
                mechanism: {
                    data: {
                        function: 'addEventListener',
                        handler: getFunctionName(fn),
                        target: target,
                    },
                    handled: true,
                    type: 'instrument',
                },
            }), options);
        };
    });
    fill(proto, 'removeEventListener', function (originalRemoveEventListener) {
        return function (eventName, fn, options) {
            /**
             * There are 2 possible scenarios here:
             *
             * 1. Someone passes a callback, which was attached prior to Sentry initialization, or by using unmodified
             * method, eg. `document.addEventListener.call(el, name, handler). In this case, we treat this function
             * as a pass-through, and call original `removeEventListener` with it.
             *
             * 2. Someone passes a callback, which was attached after Sentry was initialized, which means that it was using
             * our wrapped version of `addEventListener`, which internally calls `wrap` helper.
             * This helper "wraps" whole callback inside a try/catch statement, and attached appropriate metadata to it,
             * in order for us to make a distinction between wrapped/non-wrapped functions possible.
             * If a function was wrapped, it has additional property of `__sentry_wrapped__`, holding the handler.
             *
             * When someone adds a handler prior to initialization, and then do it again, but after,
             * then we have to detach both of them. Otherwise, if we'd detach only wrapped one, it'd be impossible
             * to get rid of the initial handler and it'd stick there forever.
             */
            var wrappedEventHandler = fn;
            try {
                var originalEventHandler = wrappedEventHandler && wrappedEventHandler.__sentry_wrapped__;
                if (originalEventHandler) {
                    originalRemoveEventListener.call(this, eventName, originalEventHandler, options);
                }
            }
            catch (e) {
                // ignore, accessing __sentry_wrapped__ will throw in some Selenium environments
            }
            return originalRemoveEventListener.call(this, eventName, wrappedEventHandler, options);
        };
    });
}

/**
 * Default Breadcrumbs instrumentations
 * TODO: Deprecated - with v6, this will be renamed to `Instrument`
 */
var Breadcrumbs = /** @class */ (function () {
    /**
     * @inheritDoc
     */
    function Breadcrumbs(options) {
        /**
         * @inheritDoc
         */
        this.name = Breadcrumbs.id;
        this._options = FronteggApp.__assign({ console: true, dom: true, fetch: true, history: true, sentry: true, xhr: true }, options);
    }
    /**
     * Create a breadcrumb of `sentry` from the events themselves
     */
    Breadcrumbs.prototype.addSentryBreadcrumb = function (event) {
        if (!this._options.sentry) {
            return;
        }
        getCurrentHub().addBreadcrumb({
            category: "sentry." + (event.type === 'transaction' ? 'transaction' : 'event'),
            event_id: event.event_id,
            level: event.level,
            message: getEventDescription(event),
        }, {
            event: event,
        });
    };
    /**
     * Instrument browser built-ins w/ breadcrumb capturing
     *  - Console API
     *  - DOM API (click/typing)
     *  - XMLHttpRequest API
     *  - Fetch API
     *  - History API
     */
    Breadcrumbs.prototype.setupOnce = function () {
        if (this._options.console) {
            addInstrumentationHandler('console', _consoleBreadcrumb);
        }
        if (this._options.dom) {
            addInstrumentationHandler('dom', _domBreadcrumb(this._options.dom));
        }
        if (this._options.xhr) {
            addInstrumentationHandler('xhr', _xhrBreadcrumb);
        }
        if (this._options.fetch) {
            addInstrumentationHandler('fetch', _fetchBreadcrumb);
        }
        if (this._options.history) {
            addInstrumentationHandler('history', _historyBreadcrumb);
        }
    };
    /**
     * @inheritDoc
     */
    Breadcrumbs.id = 'Breadcrumbs';
    return Breadcrumbs;
}());
/**
 * A HOC that creaes a function that creates breadcrumbs from DOM API calls.
 * This is a HOC so that we get access to dom options in the closure.
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function _domBreadcrumb(dom) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    function _innerDomBreadcrumb(handlerData) {
        var target;
        var keyAttrs = typeof dom === 'object' ? dom.serializeAttribute : undefined;
        if (typeof keyAttrs === 'string') {
            keyAttrs = [keyAttrs];
        }
        // Accessing event.target can throw (see getsentry/raven-js#838, #768)
        try {
            target = handlerData.event.target
                ? htmlTreeAsString(handlerData.event.target, keyAttrs)
                : htmlTreeAsString(handlerData.event, keyAttrs);
        }
        catch (e) {
            target = '<unknown>';
        }
        if (target.length === 0) {
            return;
        }
        getCurrentHub().addBreadcrumb({
            category: "ui." + handlerData.name,
            message: target,
        }, {
            event: handlerData.event,
            name: handlerData.name,
            global: handlerData.global,
        });
    }
    return _innerDomBreadcrumb;
}
/**
 * Creates breadcrumbs from console API calls
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function _consoleBreadcrumb(handlerData) {
    var breadcrumb = {
        category: 'console',
        data: {
            arguments: handlerData.args,
            logger: 'console',
        },
        level: severityFromString(handlerData.level),
        message: safeJoin(handlerData.args, ' '),
    };
    if (handlerData.level === 'assert') {
        if (handlerData.args[0] === false) {
            breadcrumb.message = "Assertion failed: " + (safeJoin(handlerData.args.slice(1), ' ') || 'console.assert');
            breadcrumb.data.arguments = handlerData.args.slice(1);
        }
        else {
            // Don't capture a breadcrumb for passed assertions
            return;
        }
    }
    getCurrentHub().addBreadcrumb(breadcrumb, {
        input: handlerData.args,
        level: handlerData.level,
    });
}
/**
 * Creates breadcrumbs from XHR API calls
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function _xhrBreadcrumb(handlerData) {
    if (handlerData.endTimestamp) {
        // We only capture complete, non-sentry requests
        if (handlerData.xhr.__sentry_own_request__) {
            return;
        }
        var _a = handlerData.xhr.__sentry_xhr__ || {}, method = _a.method, url = _a.url, status_code = _a.status_code, body = _a.body;
        getCurrentHub().addBreadcrumb({
            category: 'xhr',
            data: {
                method: method,
                url: url,
                status_code: status_code,
            },
            type: 'http',
        }, {
            xhr: handlerData.xhr,
            input: body,
        });
        return;
    }
}
/**
 * Creates breadcrumbs from fetch API calls
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function _fetchBreadcrumb(handlerData) {
    // We only capture complete fetch requests
    if (!handlerData.endTimestamp) {
        return;
    }
    if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {
        // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)
        return;
    }
    if (handlerData.error) {
        getCurrentHub().addBreadcrumb({
            category: 'fetch',
            data: handlerData.fetchData,
            level: Severity.Error,
            type: 'http',
        }, {
            data: handlerData.error,
            input: handlerData.args,
        });
    }
    else {
        getCurrentHub().addBreadcrumb({
            category: 'fetch',
            data: FronteggApp.__assign(FronteggApp.__assign({}, handlerData.fetchData), { status_code: handlerData.response.status }),
            type: 'http',
        }, {
            input: handlerData.args,
            response: handlerData.response,
        });
    }
}
/**
 * Creates breadcrumbs from history API calls
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function _historyBreadcrumb(handlerData) {
    var global = getGlobalObject();
    var from = handlerData.from;
    var to = handlerData.to;
    var parsedLoc = parseUrl(global.location.href);
    var parsedFrom = parseUrl(from);
    var parsedTo = parseUrl(to);
    // Initial pushState doesn't provide `from` information
    if (!parsedFrom.path) {
        parsedFrom = parsedLoc;
    }
    // Use only the path component of the URL if the URL matches the current
    // document (almost all the time when using pushState)
    if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {
        to = parsedTo.relative;
    }
    if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {
        from = parsedFrom.relative;
    }
    getCurrentHub().addBreadcrumb({
        category: 'navigation',
        data: {
            from: from,
            to: to,
        },
    });
}

var DEFAULT_KEY = 'cause';
var DEFAULT_LIMIT = 5;
/** Adds SDK info to an event. */
var LinkedErrors = /** @class */ (function () {
    /**
     * @inheritDoc
     */
    function LinkedErrors(options) {
        if (options === void 0) { options = {}; }
        /**
         * @inheritDoc
         */
        this.name = LinkedErrors.id;
        this._key = options.key || DEFAULT_KEY;
        this._limit = options.limit || DEFAULT_LIMIT;
    }
    /**
     * @inheritDoc
     */
    LinkedErrors.prototype.setupOnce = function () {
        addGlobalEventProcessor(function (event, hint) {
            var self = getCurrentHub().getIntegration(LinkedErrors);
            return self ? _handler(self._key, self._limit, event, hint) : event;
        });
    };
    /**
     * @inheritDoc
     */
    LinkedErrors.id = 'LinkedErrors';
    return LinkedErrors;
}());
/**
 * @inheritDoc
 */
function _handler(key, limit, event, hint) {
    if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {
        return event;
    }
    var linkedErrors = _walkErrorTree(limit, hint.originalException, key);
    event.exception.values = FronteggApp.__spread(linkedErrors, event.exception.values);
    return event;
}
/**
 * JSDOC
 */
function _walkErrorTree(limit, error, key, stack) {
    if (stack === void 0) { stack = []; }
    if (!isInstanceOf(error[key], Error) || stack.length + 1 >= limit) {
        return stack;
    }
    var exception = exceptionFromError(error[key]);
    return _walkErrorTree(limit, error[key], key, FronteggApp.__spread([exception], stack));
}

var global$5 = getGlobalObject();
/** UserAgent */
var UserAgent = /** @class */ (function () {
    function UserAgent() {
        /**
         * @inheritDoc
         */
        this.name = UserAgent.id;
    }
    /**
     * @inheritDoc
     */
    UserAgent.prototype.setupOnce = function () {
        addGlobalEventProcessor(function (event) {
            if (getCurrentHub().getIntegration(UserAgent)) {
                // if none of the information we want exists, don't bother
                if (!global$5.navigator && !global$5.location && !global$5.document) {
                    return event;
                }
                // grab as much info as exists and add it to the event
                var url = (event.request && event.request.url) || (global$5.location && global$5.location.href);
                var referrer = (global$5.document || {}).referrer;
                var userAgent = (global$5.navigator || {}).userAgent;
                var headers = FronteggApp.__assign(FronteggApp.__assign(FronteggApp.__assign({}, (event.request && event.request.headers)), (referrer && { Referer: referrer })), (userAgent && { 'User-Agent': userAgent }));
                var request = FronteggApp.__assign(FronteggApp.__assign({}, (url && { url: url })), { headers: headers });
                return FronteggApp.__assign(FronteggApp.__assign({}, event), { request: request });
            }
            return event;
        });
    };
    /**
     * @inheritDoc
     */
    UserAgent.id = 'UserAgent';
    return UserAgent;
}());

/** Deduplication filter */
var Dedupe = /** @class */ (function () {
    function Dedupe() {
        /**
         * @inheritDoc
         */
        this.name = Dedupe.id;
    }
    /**
     * @inheritDoc
     */
    Dedupe.prototype.setupOnce = function (addGlobalEventProcessor, getCurrentHub) {
        addGlobalEventProcessor(function (currentEvent) {
            var self = getCurrentHub().getIntegration(Dedupe);
            if (self) {
                // Juuust in case something goes wrong
                try {
                    if (_shouldDropEvent(currentEvent, self._previousEvent)) {
                        logger.warn("Event dropped due to being a duplicate of previously captured event.");
                        return null;
                    }
                }
                catch (_oO) {
                    return (self._previousEvent = currentEvent);
                }
                return (self._previousEvent = currentEvent);
            }
            return currentEvent;
        });
    };
    /**
     * @inheritDoc
     */
    Dedupe.id = 'Dedupe';
    return Dedupe;
}());
/** JSDoc */
function _shouldDropEvent(currentEvent, previousEvent) {
    if (!previousEvent) {
        return false;
    }
    if (_isSameMessageEvent(currentEvent, previousEvent)) {
        return true;
    }
    if (_isSameExceptionEvent(currentEvent, previousEvent)) {
        return true;
    }
    return false;
}
/** JSDoc */
function _isSameMessageEvent(currentEvent, previousEvent) {
    var currentMessage = currentEvent.message;
    var previousMessage = previousEvent.message;
    // If neither event has a message property, they were both exceptions, so bail out
    if (!currentMessage && !previousMessage) {
        return false;
    }
    // If only one event has a stacktrace, but not the other one, they are not the same
    if ((currentMessage && !previousMessage) || (!currentMessage && previousMessage)) {
        return false;
    }
    if (currentMessage !== previousMessage) {
        return false;
    }
    if (!_isSameFingerprint(currentEvent, previousEvent)) {
        return false;
    }
    if (!_isSameStacktrace(currentEvent, previousEvent)) {
        return false;
    }
    return true;
}
/** JSDoc */
function _isSameExceptionEvent(currentEvent, previousEvent) {
    var previousException = _getExceptionFromEvent(previousEvent);
    var currentException = _getExceptionFromEvent(currentEvent);
    if (!previousException || !currentException) {
        return false;
    }
    if (previousException.type !== currentException.type || previousException.value !== currentException.value) {
        return false;
    }
    if (!_isSameFingerprint(currentEvent, previousEvent)) {
        return false;
    }
    if (!_isSameStacktrace(currentEvent, previousEvent)) {
        return false;
    }
    return true;
}
/** JSDoc */
function _isSameStacktrace(currentEvent, previousEvent) {
    var currentFrames = _getFramesFromEvent(currentEvent);
    var previousFrames = _getFramesFromEvent(previousEvent);
    // If neither event has a stacktrace, they are assumed to be the same
    if (!currentFrames && !previousFrames) {
        return true;
    }
    // If only one event has a stacktrace, but not the other one, they are not the same
    if ((currentFrames && !previousFrames) || (!currentFrames && previousFrames)) {
        return false;
    }
    currentFrames = currentFrames;
    previousFrames = previousFrames;
    // If number of frames differ, they are not the same
    if (previousFrames.length !== currentFrames.length) {
        return false;
    }
    // Otherwise, compare the two
    for (var i = 0; i < previousFrames.length; i++) {
        var frameA = previousFrames[i];
        var frameB = currentFrames[i];
        if (frameA.filename !== frameB.filename ||
            frameA.lineno !== frameB.lineno ||
            frameA.colno !== frameB.colno ||
            frameA.function !== frameB.function) {
            return false;
        }
    }
    return true;
}
/** JSDoc */
function _isSameFingerprint(currentEvent, previousEvent) {
    var currentFingerprint = currentEvent.fingerprint;
    var previousFingerprint = previousEvent.fingerprint;
    // If neither event has a fingerprint, they are assumed to be the same
    if (!currentFingerprint && !previousFingerprint) {
        return true;
    }
    // If only one event has a fingerprint, but not the other one, they are not the same
    if ((currentFingerprint && !previousFingerprint) || (!currentFingerprint && previousFingerprint)) {
        return false;
    }
    currentFingerprint = currentFingerprint;
    previousFingerprint = previousFingerprint;
    // Otherwise, compare the two
    try {
        return !!(currentFingerprint.join('') === previousFingerprint.join(''));
    }
    catch (_oO) {
        return false;
    }
}
/** JSDoc */
function _getExceptionFromEvent(event) {
    return event.exception && event.exception.values && event.exception.values[0];
}
/** JSDoc */
function _getFramesFromEvent(event) {
    var exception = event.exception;
    if (exception) {
        try {
            // @ts-ignore Object could be undefined
            return exception.values[0].stacktrace.frames;
        }
        catch (_oO) {
            return undefined;
        }
    }
    else if (event.stacktrace) {
        return event.stacktrace.frames;
    }
    return undefined;
}

/**
 * The Sentry Browser SDK Client.
 *
 * @see BrowserOptions for documentation on configuration options.
 * @see SentryClient for usage documentation.
 */
var BrowserClient = /** @class */ (function (_super) {
    FronteggApp.__extends(BrowserClient, _super);
    /**
     * Creates a new Browser SDK instance.
     *
     * @param options Configuration options for this SDK.
     */
    function BrowserClient(options) {
        if (options === void 0) { options = {}; }
        var _this = this;
        options._metadata = options._metadata || {};
        options._metadata.sdk = options._metadata.sdk || {
            name: 'sentry.javascript.browser',
            packages: [
                {
                    name: 'npm:@sentry/browser',
                    version: SDK_VERSION,
                },
            ],
            version: SDK_VERSION,
        };
        _this = _super.call(this, BrowserBackend, options) || this;
        return _this;
    }
    /**
     * Show a report dialog to the user to send feedback to a specific event.
     *
     * @param options Set individual options for the dialog
     */
    BrowserClient.prototype.showReportDialog = function (options) {
        if (options === void 0) { options = {}; }
        // doesn't work without a document (React Native)
        var document = getGlobalObject().document;
        if (!document) {
            return;
        }
        if (!this._isEnabled()) {
            logger.error('Trying to call showReportDialog with Sentry Client disabled');
            return;
        }
        injectReportDialog(FronteggApp.__assign(FronteggApp.__assign({}, options), { dsn: options.dsn || this.getDsn() }));
    };
    /**
     * @inheritDoc
     */
    BrowserClient.prototype._prepareEvent = function (event, scope, hint) {
        event.platform = event.platform || 'javascript';
        return _super.prototype._prepareEvent.call(this, event, scope, hint);
    };
    /**
     * @inheritDoc
     */
    BrowserClient.prototype._sendEvent = function (event) {
        var integration = this.getIntegration(Breadcrumbs);
        if (integration) {
            integration.addSentryBreadcrumb(event);
        }
        _super.prototype._sendEvent.call(this, event);
    };
    return BrowserClient;
}(BaseClient));

var defaultIntegrations = [
    new InboundFilters(),
    new FunctionToString(),
    new TryCatch(),
    new Breadcrumbs(),
    new GlobalHandlers(),
    new LinkedErrors(),
    new Dedupe(),
    new UserAgent(),
];
/**
 * The Sentry Browser SDK Client.
 *
 * To use this SDK, call the {@link init} function as early as possible when
 * loading the web page. To set context information or send manual events, use
 * the provided methods.
 *
 * @example
 *
 * ```
 *
 * import { init } from '@sentry/browser';
 *
 * init({
 *   dsn: '__DSN__',
 *   // ...
 * });
 * ```
 *
 * @example
 * ```
 *
 * import { configureScope } from '@sentry/browser';
 * configureScope((scope: Scope) => {
 *   scope.setExtra({ battery: 0.7 });
 *   scope.setTag({ user_mode: 'admin' });
 *   scope.setUser({ id: '4711' });
 * });
 * ```
 *
 * @example
 * ```
 *
 * import { addBreadcrumb } from '@sentry/browser';
 * addBreadcrumb({
 *   message: 'My Breadcrumb',
 *   // ...
 * });
 * ```
 *
 * @example
 *
 * ```
 *
 * import * as Sentry from '@sentry/browser';
 * Sentry.captureMessage('Hello, world!');
 * Sentry.captureException(new Error('Good bye'));
 * Sentry.captureEvent({
 *   message: 'Manual',
 *   stacktrace: [
 *     // ...
 *   ],
 * });
 * ```
 *
 * @see {@link BrowserOptions} for documentation on configuration options.
 */
function init$1(options) {
    if (options === void 0) { options = {}; }
    if (options.defaultIntegrations === undefined) {
        options.defaultIntegrations = defaultIntegrations;
    }
    if (options.release === undefined) {
        var window_1 = getGlobalObject();
        // This supports the variable that sentry-webpack-plugin injects
        if (window_1.SENTRY_RELEASE && window_1.SENTRY_RELEASE.id) {
            options.release = window_1.SENTRY_RELEASE.id;
        }
    }
    if (options.autoSessionTracking === undefined) {
        options.autoSessionTracking = true;
    }
    if (options.sendClientReports === undefined) {
        options.sendClientReports = true;
    }
    initAndBind(BrowserClient, options);
    if (options.autoSessionTracking) {
        startSessionTracking();
    }
}
function startSessionOnHub(hub) {
    hub.startSession({ ignoreDuration: true });
    hub.captureSession();
}
/**
 * Enable automatic Session Tracking for the initial page load.
 */
function startSessionTracking() {
    var window = getGlobalObject();
    var document = window.document;
    if (typeof document === 'undefined') {
        if (isDebugBuild()) {
            logger.warn('Session tracking in non-browser environment with @sentry/browser is not supported.');
        }
        return;
    }
    var hub = getCurrentHub();
    // The only way for this to be false is for there to be a version mismatch between @sentry/browser (>= 6.0.0) and
    // @sentry/hub (< 5.27.0). In the simple case, there won't ever be such a mismatch, because the two packages are
    // pinned at the same version in package.json, but there are edge cases where it's possible. See
    // https://github.com/getsentry/sentry-javascript/issues/3207 and
    // https://github.com/getsentry/sentry-javascript/issues/3234 and
    // https://github.com/getsentry/sentry-javascript/issues/3278.
    if (!hub.captureSession) {
        return;
    }
    // The session duration for browser sessions does not track a meaningful
    // concept that can be used as a metric.
    // Automatically captured sessions are akin to page views, and thus we
    // discard their duration.
    startSessionOnHub(hub);
    // We want to create a session for every navigation as well
    addInstrumentationHandler('history', function (_a) {
        var from = _a.from, to = _a.to;
        // Don't create an additional session for the initial route or if the location did not change
        if (!(from === undefined || from === to)) {
            startSessionOnHub(getCurrentHub());
        }
    });
}

/**
 * Inits the React SDK
 */
function init(options) {
    options._metadata = options._metadata || {};
    options._metadata.sdk = options._metadata.sdk || {
        name: 'sentry.javascript.react',
        packages: [
            {
                name: 'npm:@sentry/react',
                version: SDK_VERSION,
            },
        ],
        version: SDK_VERSION,
    };
    init$1(options);
}

var TRACEPARENT_REGEXP = new RegExp('^[ \\t]*' + // whitespace
    '([0-9a-f]{32})?' + // trace_id
    '-?([0-9a-f]{16})?' + // span_id
    '-?([01])?' + // sampled
    '[ \\t]*$');
/**
 * Determines if tracing is currently enabled.
 *
 * Tracing is enabled when at least one of `tracesSampleRate` and `tracesSampler` is defined in the SDK config.
 */
function hasTracingEnabled(maybeOptions) {
    var client = getCurrentHub().getClient();
    var options = maybeOptions || (client && client.getOptions());
    return !!options && ('tracesSampleRate' in options || 'tracesSampler' in options);
}
/**
 * Extract transaction context data from a `sentry-trace` header.
 *
 * @param traceparent Traceparent string
 *
 * @returns Object containing data from the header, or undefined if traceparent string is malformed
 */
function extractTraceparentData(traceparent) {
    var matches = traceparent.match(TRACEPARENT_REGEXP);
    if (matches) {
        var parentSampled = void 0;
        if (matches[3] === '1') {
            parentSampled = true;
        }
        else if (matches[3] === '0') {
            parentSampled = false;
        }
        return {
            traceId: matches[1],
            parentSampled: parentSampled,
            parentSpanId: matches[2],
        };
    }
    return undefined;
}
/** Grabs active transaction off scope, if any */
function getActiveTransaction(maybeHub) {
    var hub = maybeHub || getCurrentHub();
    var scope = hub.getScope();
    return scope && scope.getTransaction();
}
/**
 * Converts from milliseconds to seconds
 * @param time time in ms
 */
function msToSec(time) {
    return time / 1000;
}
/**
 * Converts from seconds to milliseconds
 * @param time time in seconds
 */
function secToMs(time) {
    return time * 1000;
}

/**
 * Configures global error listeners
 */
function registerErrorInstrumentation() {
    addInstrumentationHandler('error', errorCallback);
    addInstrumentationHandler('unhandledrejection', errorCallback);
}
/**
 * If an error or unhandled promise occurs, we mark the active transaction as failed
 */
function errorCallback() {
    var activeTransaction = getActiveTransaction();
    if (activeTransaction) {
        var status_1 = 'internal_error';
        logger.log("[Tracing] Transaction: " + status_1 + " -> Global error occured");
        activeTransaction.setStatus(status_1);
    }
}

// Store finish reasons in tuple to save on bundle size
// Readonly type should enforce that this is not mutated.
var FINISH_REASON_TAG = 'finishReason';
var IDLE_TRANSACTION_FINISH_REASONS = ['heartbeatFailed', 'idleTimeout', 'documentHidden'];

/**
 * Keeps track of finished spans for a given transaction
 * @internal
 * @hideconstructor
 * @hidden
 */
var SpanRecorder = /** @class */ (function () {
    function SpanRecorder(maxlen) {
        if (maxlen === void 0) { maxlen = 1000; }
        this.spans = [];
        this._maxlen = maxlen;
    }
    /**
     * This is just so that we don't run out of memory while recording a lot
     * of spans. At some point we just stop and flush out the start of the
     * trace tree (i.e.the first n spans with the smallest
     * start_timestamp).
     */
    SpanRecorder.prototype.add = function (span) {
        if (this.spans.length > this._maxlen) {
            span.spanRecorder = undefined;
        }
        else {
            this.spans.push(span);
        }
    };
    return SpanRecorder;
}());
/**
 * Span contains all data about a span
 */
var Span = /** @class */ (function () {
    /**
     * You should never call the constructor manually, always use `Sentry.startTransaction()`
     * or call `startChild()` on an existing span.
     * @internal
     * @hideconstructor
     * @hidden
     */
    function Span(spanContext) {
        /**
         * @inheritDoc
         */
        this.traceId = uuid4();
        /**
         * @inheritDoc
         */
        this.spanId = uuid4().substring(16);
        /**
         * Timestamp in seconds when the span was created.
         */
        this.startTimestamp = timestampWithMs();
        /**
         * @inheritDoc
         */
        this.tags = {};
        /**
         * @inheritDoc
         */
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.data = {};
        if (!spanContext) {
            return this;
        }
        if (spanContext.traceId) {
            this.traceId = spanContext.traceId;
        }
        if (spanContext.spanId) {
            this.spanId = spanContext.spanId;
        }
        if (spanContext.parentSpanId) {
            this.parentSpanId = spanContext.parentSpanId;
        }
        // We want to include booleans as well here
        if ('sampled' in spanContext) {
            this.sampled = spanContext.sampled;
        }
        if (spanContext.op) {
            this.op = spanContext.op;
        }
        if (spanContext.description) {
            this.description = spanContext.description;
        }
        if (spanContext.data) {
            this.data = spanContext.data;
        }
        if (spanContext.tags) {
            this.tags = spanContext.tags;
        }
        if (spanContext.status) {
            this.status = spanContext.status;
        }
        if (spanContext.startTimestamp) {
            this.startTimestamp = spanContext.startTimestamp;
        }
        if (spanContext.endTimestamp) {
            this.endTimestamp = spanContext.endTimestamp;
        }
    }
    /**
     * @inheritDoc
     * @deprecated
     */
    Span.prototype.child = function (spanContext) {
        return this.startChild(spanContext);
    };
    /**
     * @inheritDoc
     */
    Span.prototype.startChild = function (spanContext) {
        var childSpan = new Span(FronteggApp.__assign(FronteggApp.__assign({}, spanContext), { parentSpanId: this.spanId, sampled: this.sampled, traceId: this.traceId }));
        childSpan.spanRecorder = this.spanRecorder;
        if (childSpan.spanRecorder) {
            childSpan.spanRecorder.add(childSpan);
        }
        childSpan.transaction = this.transaction;
        return childSpan;
    };
    /**
     * @inheritDoc
     */
    Span.prototype.setTag = function (key, value) {
        var _a;
        this.tags = FronteggApp.__assign(FronteggApp.__assign({}, this.tags), (_a = {}, _a[key] = value, _a));
        return this;
    };
    /**
     * @inheritDoc
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types
    Span.prototype.setData = function (key, value) {
        var _a;
        this.data = FronteggApp.__assign(FronteggApp.__assign({}, this.data), (_a = {}, _a[key] = value, _a));
        return this;
    };
    /**
     * @inheritDoc
     */
    Span.prototype.setStatus = function (value) {
        this.status = value;
        return this;
    };
    /**
     * @inheritDoc
     */
    Span.prototype.setHttpStatus = function (httpStatus) {
        this.setTag('http.status_code', String(httpStatus));
        var spanStatus = spanStatusfromHttpCode(httpStatus);
        if (spanStatus !== 'unknown_error') {
            this.setStatus(spanStatus);
        }
        return this;
    };
    /**
     * @inheritDoc
     */
    Span.prototype.isSuccess = function () {
        return this.status === 'ok';
    };
    /**
     * @inheritDoc
     */
    Span.prototype.finish = function (endTimestamp) {
        this.endTimestamp = typeof endTimestamp === 'number' ? endTimestamp : timestampWithMs();
    };
    /**
     * @inheritDoc
     */
    Span.prototype.toTraceparent = function () {
        var sampledString = '';
        if (this.sampled !== undefined) {
            sampledString = this.sampled ? '-1' : '-0';
        }
        return this.traceId + "-" + this.spanId + sampledString;
    };
    /**
     * @inheritDoc
     */
    Span.prototype.toContext = function () {
        return dropUndefinedKeys({
            data: this.data,
            description: this.description,
            endTimestamp: this.endTimestamp,
            op: this.op,
            parentSpanId: this.parentSpanId,
            sampled: this.sampled,
            spanId: this.spanId,
            startTimestamp: this.startTimestamp,
            status: this.status,
            tags: this.tags,
            traceId: this.traceId,
        });
    };
    /**
     * @inheritDoc
     */
    Span.prototype.updateWithContext = function (spanContext) {
        var _a, _b, _c, _d, _e;
        this.data = (_a = spanContext.data, (_a !== null && _a !== void 0 ? _a : {}));
        this.description = spanContext.description;
        this.endTimestamp = spanContext.endTimestamp;
        this.op = spanContext.op;
        this.parentSpanId = spanContext.parentSpanId;
        this.sampled = spanContext.sampled;
        this.spanId = (_b = spanContext.spanId, (_b !== null && _b !== void 0 ? _b : this.spanId));
        this.startTimestamp = (_c = spanContext.startTimestamp, (_c !== null && _c !== void 0 ? _c : this.startTimestamp));
        this.status = spanContext.status;
        this.tags = (_d = spanContext.tags, (_d !== null && _d !== void 0 ? _d : {}));
        this.traceId = (_e = spanContext.traceId, (_e !== null && _e !== void 0 ? _e : this.traceId));
        return this;
    };
    /**
     * @inheritDoc
     */
    Span.prototype.getTraceContext = function () {
        return dropUndefinedKeys({
            data: Object.keys(this.data).length > 0 ? this.data : undefined,
            description: this.description,
            op: this.op,
            parent_span_id: this.parentSpanId,
            span_id: this.spanId,
            status: this.status,
            tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,
            trace_id: this.traceId,
        });
    };
    /**
     * @inheritDoc
     */
    Span.prototype.toJSON = function () {
        return dropUndefinedKeys({
            data: Object.keys(this.data).length > 0 ? this.data : undefined,
            description: this.description,
            op: this.op,
            parent_span_id: this.parentSpanId,
            span_id: this.spanId,
            start_timestamp: this.startTimestamp,
            status: this.status,
            tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,
            timestamp: this.endTimestamp,
            trace_id: this.traceId,
        });
    };
    return Span;
}());
/**
 * Converts a HTTP status code into a {@link SpanStatusType}.
 *
 * @param httpStatus The HTTP response status code.
 * @returns The span status or unknown_error.
 */
function spanStatusfromHttpCode(httpStatus) {
    if (httpStatus < 400 && httpStatus >= 100) {
        return 'ok';
    }
    if (httpStatus >= 400 && httpStatus < 500) {
        switch (httpStatus) {
            case 401:
                return 'unauthenticated';
            case 403:
                return 'permission_denied';
            case 404:
                return 'not_found';
            case 409:
                return 'already_exists';
            case 413:
                return 'failed_precondition';
            case 429:
                return 'resource_exhausted';
            default:
                return 'invalid_argument';
        }
    }
    if (httpStatus >= 500 && httpStatus < 600) {
        switch (httpStatus) {
            case 501:
                return 'unimplemented';
            case 503:
                return 'unavailable';
            case 504:
                return 'deadline_exceeded';
            default:
                return 'internal_error';
        }
    }
    return 'unknown_error';
}

/** JSDoc */
var Transaction = /** @class */ (function (_super) {
    FronteggApp.__extends(Transaction, _super);
    /**
     * This constructor should never be called manually. Those instrumenting tracing should use
     * `Sentry.startTransaction()`, and internal methods should use `hub.startTransaction()`.
     * @internal
     * @hideconstructor
     * @hidden
     */
    function Transaction(transactionContext, hub) {
        var _this = _super.call(this, transactionContext) || this;
        _this._measurements = {};
        /**
         * The reference to the current hub.
         */
        _this._hub = getCurrentHub();
        if (isInstanceOf(hub, Hub)) {
            _this._hub = hub;
        }
        _this.name = transactionContext.name || '';
        _this.metadata = transactionContext.metadata || {};
        _this._trimEnd = transactionContext.trimEnd;
        // this is because transactions are also spans, and spans have a transaction pointer
        _this.transaction = _this;
        return _this;
    }
    /**
     * JSDoc
     */
    Transaction.prototype.setName = function (name) {
        this.name = name;
    };
    /**
     * Attaches SpanRecorder to the span itself
     * @param maxlen maximum number of spans that can be recorded
     */
    Transaction.prototype.initSpanRecorder = function (maxlen) {
        if (maxlen === void 0) { maxlen = 1000; }
        if (!this.spanRecorder) {
            this.spanRecorder = new SpanRecorder(maxlen);
        }
        this.spanRecorder.add(this);
    };
    /**
     * Set observed measurements for this transaction.
     * @hidden
     */
    Transaction.prototype.setMeasurements = function (measurements) {
        this._measurements = FronteggApp.__assign({}, measurements);
    };
    /**
     * Set metadata for this transaction.
     * @hidden
     */
    Transaction.prototype.setMetadata = function (newMetadata) {
        this.metadata = FronteggApp.__assign(FronteggApp.__assign({}, this.metadata), newMetadata);
    };
    /**
     * @inheritDoc
     */
    Transaction.prototype.finish = function (endTimestamp) {
        var _this = this;
        // This transaction is already finished, so we should not flush it again.
        if (this.endTimestamp !== undefined) {
            return undefined;
        }
        if (!this.name) {
            logger.warn('Transaction has no name, falling back to `<unlabeled transaction>`.');
            this.name = '<unlabeled transaction>';
        }
        // just sets the end timestamp
        _super.prototype.finish.call(this, endTimestamp);
        if (this.sampled !== true) {
            // At this point if `sampled !== true` we want to discard the transaction.
            logger.log('[Tracing] Discarding transaction because its trace was not chosen to be sampled.');
            var client = this._hub.getClient();
            var transport = client && client.getTransport && client.getTransport();
            if (transport && transport.recordLostEvent) {
                transport.recordLostEvent('sample_rate', 'transaction');
            }
            return undefined;
        }
        var finishedSpans = this.spanRecorder ? this.spanRecorder.spans.filter(function (s) { return s !== _this && s.endTimestamp; }) : [];
        if (this._trimEnd && finishedSpans.length > 0) {
            this.endTimestamp = finishedSpans.reduce(function (prev, current) {
                if (prev.endTimestamp && current.endTimestamp) {
                    return prev.endTimestamp > current.endTimestamp ? prev : current;
                }
                return prev;
            }).endTimestamp;
        }
        var transaction = {
            contexts: {
                trace: this.getTraceContext(),
            },
            spans: finishedSpans,
            start_timestamp: this.startTimestamp,
            tags: this.tags,
            timestamp: this.endTimestamp,
            transaction: this.name,
            type: 'transaction',
            sdkProcessingMetadata: this.metadata,
        };
        var hasMeasurements = Object.keys(this._measurements).length > 0;
        if (hasMeasurements) {
            logger.log('[Measurements] Adding measurements to transaction', JSON.stringify(this._measurements, undefined, 2));
            transaction.measurements = this._measurements;
        }
        logger.log("[Tracing] Finishing " + this.op + " transaction: " + this.name + ".");
        return this._hub.captureEvent(transaction);
    };
    /**
     * @inheritDoc
     */
    Transaction.prototype.toContext = function () {
        var spanContext = _super.prototype.toContext.call(this);
        return dropUndefinedKeys(FronteggApp.__assign(FronteggApp.__assign({}, spanContext), { name: this.name, trimEnd: this._trimEnd }));
    };
    /**
     * @inheritDoc
     */
    Transaction.prototype.updateWithContext = function (transactionContext) {
        var _a;
        _super.prototype.updateWithContext.call(this, transactionContext);
        this.name = (_a = transactionContext.name, (_a !== null && _a !== void 0 ? _a : ''));
        this._trimEnd = transactionContext.trimEnd;
        return this;
    };
    return Transaction;
}(Span));

var DEFAULT_IDLE_TIMEOUT = 1000;
var HEARTBEAT_INTERVAL = 5000;
/**
 * @inheritDoc
 */
var IdleTransactionSpanRecorder = /** @class */ (function (_super) {
    FronteggApp.__extends(IdleTransactionSpanRecorder, _super);
    function IdleTransactionSpanRecorder(_pushActivity, _popActivity, transactionSpanId, maxlen) {
        if (transactionSpanId === void 0) { transactionSpanId = ''; }
        var _this = _super.call(this, maxlen) || this;
        _this._pushActivity = _pushActivity;
        _this._popActivity = _popActivity;
        _this.transactionSpanId = transactionSpanId;
        return _this;
    }
    /**
     * @inheritDoc
     */
    IdleTransactionSpanRecorder.prototype.add = function (span) {
        var _this = this;
        // We should make sure we do not push and pop activities for
        // the transaction that this span recorder belongs to.
        if (span.spanId !== this.transactionSpanId) {
            // We patch span.finish() to pop an activity after setting an endTimestamp.
            span.finish = function (endTimestamp) {
                span.endTimestamp = typeof endTimestamp === 'number' ? endTimestamp : timestampWithMs();
                _this._popActivity(span.spanId);
            };
            // We should only push new activities if the span does not have an end timestamp.
            if (span.endTimestamp === undefined) {
                this._pushActivity(span.spanId);
            }
        }
        _super.prototype.add.call(this, span);
    };
    return IdleTransactionSpanRecorder;
}(SpanRecorder));
/**
 * An IdleTransaction is a transaction that automatically finishes. It does this by tracking child spans as activities.
 * You can have multiple IdleTransactions active, but if the `onScope` option is specified, the idle transaction will
 * put itself on the scope on creation.
 */
var IdleTransaction = /** @class */ (function (_super) {
    FronteggApp.__extends(IdleTransaction, _super);
    function IdleTransaction(transactionContext, _idleHub, 
    /**
     * The time to wait in ms until the idle transaction will be finished.
     * @default 1000
     */
    _idleTimeout, 
    // Whether or not the transaction should put itself on the scope when it starts and pop itself off when it ends
    _onScope) {
        if (_idleTimeout === void 0) { _idleTimeout = DEFAULT_IDLE_TIMEOUT; }
        if (_onScope === void 0) { _onScope = false; }
        var _this = _super.call(this, transactionContext, _idleHub) || this;
        _this._idleHub = _idleHub;
        _this._idleTimeout = _idleTimeout;
        _this._onScope = _onScope;
        // Activities store a list of active spans
        _this.activities = {};
        // Amount of times heartbeat has counted. Will cause transaction to finish after 3 beats.
        _this._heartbeatCounter = 0;
        // We should not use heartbeat if we finished a transaction
        _this._finished = false;
        _this._beforeFinishCallbacks = [];
        if (_idleHub && _onScope) {
            // There should only be one active transaction on the scope
            clearActiveTransaction(_idleHub);
            // We set the transaction here on the scope so error events pick up the trace
            // context and attach it to the error.
            logger.log("Setting idle transaction on scope. Span ID: " + _this.spanId);
            _idleHub.configureScope(function (scope) { return scope.setSpan(_this); });
        }
        _this._initTimeout = setTimeout(function () {
            if (!_this._finished) {
                _this.finish();
            }
        }, _this._idleTimeout);
        return _this;
    }
    /** {@inheritDoc} */
    IdleTransaction.prototype.finish = function (endTimestamp) {
        var e_1, _a;
        var _this = this;
        if (endTimestamp === void 0) { endTimestamp = timestampWithMs(); }
        this._finished = true;
        this.activities = {};
        if (this.spanRecorder) {
            logger.log('[Tracing] finishing IdleTransaction', new Date(endTimestamp * 1000).toISOString(), this.op);
            try {
                for (var _b = FronteggApp.__values(this._beforeFinishCallbacks), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var callback = _c.value;
                    callback(this, endTimestamp);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            this.spanRecorder.spans = this.spanRecorder.spans.filter(function (span) {
                // If we are dealing with the transaction itself, we just return it
                if (span.spanId === _this.spanId) {
                    return true;
                }
                // We cancel all pending spans with status "cancelled" to indicate the idle transaction was finished early
                if (!span.endTimestamp) {
                    span.endTimestamp = endTimestamp;
                    span.setStatus('cancelled');
                    logger.log('[Tracing] cancelling span since transaction ended early', JSON.stringify(span, undefined, 2));
                }
                var keepSpan = span.startTimestamp < endTimestamp;
                if (!keepSpan) {
                    logger.log('[Tracing] discarding Span since it happened after Transaction was finished', JSON.stringify(span, undefined, 2));
                }
                return keepSpan;
            });
            logger.log('[Tracing] flushing IdleTransaction');
        }
        else {
            logger.log('[Tracing] No active IdleTransaction');
        }
        // if `this._onScope` is `true`, the transaction put itself on the scope when it started
        if (this._onScope) {
            clearActiveTransaction(this._idleHub);
        }
        return _super.prototype.finish.call(this, endTimestamp);
    };
    /**
     * Register a callback function that gets excecuted before the transaction finishes.
     * Useful for cleanup or if you want to add any additional spans based on current context.
     *
     * This is exposed because users have no other way of running something before an idle transaction
     * finishes.
     */
    IdleTransaction.prototype.registerBeforeFinishCallback = function (callback) {
        this._beforeFinishCallbacks.push(callback);
    };
    /**
     * @inheritDoc
     */
    IdleTransaction.prototype.initSpanRecorder = function (maxlen) {
        var _this = this;
        if (!this.spanRecorder) {
            var pushActivity = function (id) {
                if (_this._finished) {
                    return;
                }
                _this._pushActivity(id);
            };
            var popActivity = function (id) {
                if (_this._finished) {
                    return;
                }
                _this._popActivity(id);
            };
            this.spanRecorder = new IdleTransactionSpanRecorder(pushActivity, popActivity, this.spanId, maxlen);
            // Start heartbeat so that transactions do not run forever.
            logger.log('Starting heartbeat');
            this._pingHeartbeat();
        }
        this.spanRecorder.add(this);
    };
    /**
     * Start tracking a specific activity.
     * @param spanId The span id that represents the activity
     */
    IdleTransaction.prototype._pushActivity = function (spanId) {
        if (this._initTimeout) {
            clearTimeout(this._initTimeout);
            this._initTimeout = undefined;
        }
        logger.log("[Tracing] pushActivity: " + spanId);
        this.activities[spanId] = true;
        logger.log('[Tracing] new activities count', Object.keys(this.activities).length);
    };
    /**
     * Remove an activity from usage
     * @param spanId The span id that represents the activity
     */
    IdleTransaction.prototype._popActivity = function (spanId) {
        var _this = this;
        if (this.activities[spanId]) {
            logger.log("[Tracing] popActivity " + spanId);
            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
            delete this.activities[spanId];
            logger.log('[Tracing] new activities count', Object.keys(this.activities).length);
        }
        if (Object.keys(this.activities).length === 0) {
            var timeout = this._idleTimeout;
            // We need to add the timeout here to have the real endtimestamp of the transaction
            // Remember timestampWithMs is in seconds, timeout is in ms
            var end_1 = timestampWithMs() + timeout / 1000;
            setTimeout(function () {
                if (!_this._finished) {
                    _this.setTag(FINISH_REASON_TAG, IDLE_TRANSACTION_FINISH_REASONS[1]);
                    _this.finish(end_1);
                }
            }, timeout);
        }
    };
    /**
     * Checks when entries of this.activities are not changing for 3 beats.
     * If this occurs we finish the transaction.
     */
    IdleTransaction.prototype._beat = function () {
        // We should not be running heartbeat if the idle transaction is finished.
        if (this._finished) {
            return;
        }
        var heartbeatString = Object.keys(this.activities).join('');
        if (heartbeatString === this._prevHeartbeatString) {
            this._heartbeatCounter += 1;
        }
        else {
            this._heartbeatCounter = 1;
        }
        this._prevHeartbeatString = heartbeatString;
        if (this._heartbeatCounter >= 3) {
            logger.log("[Tracing] Transaction finished because of no change for 3 heart beats");
            this.setStatus('deadline_exceeded');
            this.setTag(FINISH_REASON_TAG, IDLE_TRANSACTION_FINISH_REASONS[0]);
            this.finish();
        }
        else {
            this._pingHeartbeat();
        }
    };
    /**
     * Pings the heartbeat
     */
    IdleTransaction.prototype._pingHeartbeat = function () {
        var _this = this;
        logger.log("pinging Heartbeat -> current counter: " + this._heartbeatCounter);
        setTimeout(function () {
            _this._beat();
        }, HEARTBEAT_INTERVAL);
    };
    return IdleTransaction;
}(Transaction));
/**
 * Reset transaction on scope to `undefined`
 */
function clearActiveTransaction(hub) {
    if (hub) {
        var scope = hub.getScope();
        if (scope) {
            var transaction = scope.getTransaction();
            if (transaction) {
                scope.setSpan(undefined);
            }
        }
    }
}

/** Returns all trace headers that are currently on the top scope. */
function traceHeaders() {
    var scope = this.getScope();
    if (scope) {
        var span = scope.getSpan();
        if (span) {
            return {
                'sentry-trace': span.toTraceparent(),
            };
        }
    }
    return {};
}
/**
 * Makes a sampling decision for the given transaction and stores it on the transaction.
 *
 * Called every time a transaction is created. Only transactions which emerge with a `sampled` value of `true` will be
 * sent to Sentry.
 *
 * @param transaction: The transaction needing a sampling decision
 * @param options: The current client's options, so we can access `tracesSampleRate` and/or `tracesSampler`
 * @param samplingContext: Default and user-provided data which may be used to help make the decision
 *
 * @returns The given transaction with its `sampled` value set
 */
function sample(transaction, options, samplingContext) {
    // nothing to do if tracing is not enabled
    if (!hasTracingEnabled(options)) {
        transaction.sampled = false;
        return transaction;
    }
    // if the user has forced a sampling decision by passing a `sampled` value in their transaction context, go with that
    if (transaction.sampled !== undefined) {
        transaction.setMetadata({
            transactionSampling: { method: 'explicitly_set' },
        });
        return transaction;
    }
    // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` were defined, so one of these should
    // work; prefer the hook if so
    var sampleRate;
    if (typeof options.tracesSampler === 'function') {
        sampleRate = options.tracesSampler(samplingContext);
        transaction.setMetadata({
            transactionSampling: {
                method: 'client_sampler',
                // cast to number in case it's a boolean
                rate: Number(sampleRate),
            },
        });
    }
    else if (samplingContext.parentSampled !== undefined) {
        sampleRate = samplingContext.parentSampled;
        transaction.setMetadata({
            transactionSampling: { method: 'inheritance' },
        });
    }
    else {
        sampleRate = options.tracesSampleRate;
        transaction.setMetadata({
            transactionSampling: {
                method: 'client_rate',
                // cast to number in case it's a boolean
                rate: Number(sampleRate),
            },
        });
    }
    // Since this is coming from the user (or from a function provided by the user), who knows what we might get. (The
    // only valid values are booleans or numbers between 0 and 1.)
    if (!isValidSampleRate(sampleRate)) {
        logger.warn("[Tracing] Discarding transaction because of invalid sample rate.");
        transaction.sampled = false;
        return transaction;
    }
    // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped
    if (!sampleRate) {
        logger.log("[Tracing] Discarding transaction because " + (typeof options.tracesSampler === 'function'
            ? 'tracesSampler returned 0 or false'
            : 'a negative sampling decision was inherited or tracesSampleRate is set to 0'));
        transaction.sampled = false;
        return transaction;
    }
    // Now we roll the dice. Math.random is inclusive of 0, but not of 1, so strict < is safe here. In case sampleRate is
    // a boolean, the < comparison will cause it to be automatically cast to 1 if it's true and 0 if it's false.
    transaction.sampled = Math.random() < sampleRate;
    // if we're not going to keep it, we're done
    if (!transaction.sampled) {
        logger.log("[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = " + Number(sampleRate) + ")");
        return transaction;
    }
    logger.log("[Tracing] starting " + transaction.op + " transaction - " + transaction.name);
    return transaction;
}
/**
 * Checks the given sample rate to make sure it is valid type and value (a boolean, or a number between 0 and 1).
 */
function isValidSampleRate(rate) {
    // we need to check NaN explicitly because it's of type 'number' and therefore wouldn't get caught by this typecheck
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    if (isNaN(rate) || !(typeof rate === 'number' || typeof rate === 'boolean')) {
        logger.warn("[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got " + JSON.stringify(rate) + " of type " + JSON.stringify(typeof rate) + ".");
        return false;
    }
    // in case sampleRate is a boolean, it will get automatically cast to 1 if it's true and 0 if it's false
    if (rate < 0 || rate > 1) {
        logger.warn("[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got " + rate + ".");
        return false;
    }
    return true;
}
/**
 * Creates a new transaction and adds a sampling decision if it doesn't yet have one.
 *
 * The Hub.startTransaction method delegates to this method to do its work, passing the Hub instance in as `this`, as if
 * it had been called on the hub directly. Exists as a separate function so that it can be injected into the class as an
 * "extension method."
 *
 * @param this: The Hub starting the transaction
 * @param transactionContext: Data used to configure the transaction
 * @param CustomSamplingContext: Optional data to be provided to the `tracesSampler` function (if any)
 *
 * @returns The new transaction
 *
 * @see {@link Hub.startTransaction}
 */
function _startTransaction(transactionContext, customSamplingContext) {
    var client = this.getClient();
    var options = (client && client.getOptions()) || {};
    var transaction = new Transaction(transactionContext, this);
    transaction = sample(transaction, options, FronteggApp.__assign({ parentSampled: transactionContext.parentSampled, transactionContext: transactionContext }, customSamplingContext));
    if (transaction.sampled) {
        transaction.initSpanRecorder(options._experiments && options._experiments.maxSpans);
    }
    return transaction;
}
/**
 * Create new idle transaction.
 */
function startIdleTransaction(hub, transactionContext, idleTimeout, onScope, customSamplingContext) {
    var client = hub.getClient();
    var options = (client && client.getOptions()) || {};
    var transaction = new IdleTransaction(transactionContext, hub, idleTimeout, onScope);
    transaction = sample(transaction, options, FronteggApp.__assign({ parentSampled: transactionContext.parentSampled, transactionContext: transactionContext }, customSamplingContext));
    if (transaction.sampled) {
        transaction.initSpanRecorder(options._experiments && options._experiments.maxSpans);
    }
    return transaction;
}
/**
 * @private
 */
function _addTracingExtensions() {
    var carrier = getMainCarrier();
    if (!carrier.__SENTRY__) {
        return;
    }
    carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};
    if (!carrier.__SENTRY__.extensions.startTransaction) {
        carrier.__SENTRY__.extensions.startTransaction = _startTransaction;
    }
    if (!carrier.__SENTRY__.extensions.traceHeaders) {
        carrier.__SENTRY__.extensions.traceHeaders = traceHeaders;
    }
}
/**
 * @private
 */
function _autoloadDatabaseIntegrations() {
    var carrier = getMainCarrier();
    if (!carrier.__SENTRY__) {
        return;
    }
    var packageToIntegrationMapping = {
        mongodb: function () {
            var integration = dynamicRequire(module, './integrations/node/mongo');
            return new integration.Mongo();
        },
        mongoose: function () {
            var integration = dynamicRequire(module, './integrations/node/mongo');
            return new integration.Mongo({ mongoose: true });
        },
        mysql: function () {
            var integration = dynamicRequire(module, './integrations/node/mysql');
            return new integration.Mysql();
        },
        pg: function () {
            var integration = dynamicRequire(module, './integrations/node/postgres');
            return new integration.Postgres();
        },
    };
    var mappedPackages = Object.keys(packageToIntegrationMapping)
        .filter(function (moduleName) { return !!loadModule(moduleName); })
        .map(function (pkg) {
        try {
            return packageToIntegrationMapping[pkg]();
        }
        catch (e) {
            return undefined;
        }
    })
        .filter(function (p) { return p; });
    if (mappedPackages.length > 0) {
        carrier.__SENTRY__.integrations = FronteggApp.__spread((carrier.__SENTRY__.integrations || []), mappedPackages);
    }
}
/**
 * This patches the global object and injects the Tracing extensions methods
 */
function addExtensionMethods() {
    _addTracingExtensions();
    // Detect and automatically load specified integrations.
    if (isNodeEnv()) {
        _autoloadDatabaseIntegrations();
    }
    // If an error happens globally, we should make sure transaction status is set to error.
    registerErrorInstrumentation();
}

var global$4 = getGlobalObject();
/**
 * Add a listener that cancels and finishes a transaction when the global
 * document is hidden.
 */
function registerBackgroundTabDetection() {
    if (global$4 && global$4.document) {
        global$4.document.addEventListener('visibilitychange', function () {
            var activeTransaction = getActiveTransaction();
            if (global$4.document.hidden && activeTransaction) {
                var statusType = 'cancelled';
                logger.log("[Tracing] Transaction: " + statusType + " -> since tab moved to the background, op: " + activeTransaction.op);
                // We should not set status if it is already set, this prevent important statuses like
                // error or data loss from being overwritten on transaction.
                if (!activeTransaction.status) {
                    activeTransaction.setStatus(statusType);
                }
                activeTransaction.setTag('visibilitychange', 'document.hidden');
                activeTransaction.setTag(FINISH_REASON_TAG, IDLE_TRANSACTION_FINISH_REASONS[2]);
                activeTransaction.finish();
            }
        });
    }
    else {
        logger.warn('[Tracing] Could not set up background tab detection due to lack of global document');
    }
}

/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var bindReporter = function (callback, metric, reportAllChanges) {
    var prevValue;
    return function (forceReport) {
        if (metric.value >= 0) {
            if (forceReport || reportAllChanges) {
                metric.delta = metric.value - (prevValue || 0);
                // Report the metric if there's a non-zero delta or if no previous
                // value exists (which can happen in the case of the document becoming
                // hidden when the metric value is 0).
                // See: https://github.com/GoogleChrome/web-vitals/issues/14
                if (metric.delta || prevValue === undefined) {
                    prevValue = metric.value;
                    callback(metric);
                }
            }
        }
    };
};

/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Performantly generate a unique, 30-char string by combining a version
 * number, the current timestamp with a 13-digit number integer.
 * @return {string}
 */
var generateUniqueID = function () {
    return "v2-" + Date.now() + "-" + (Math.floor(Math.random() * (9e12 - 1)) + 1e12);
};

/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var initMetric = function (name, value) {
    return {
        name: name,
        value: (value !== null && value !== void 0 ? value : -1),
        delta: 0,
        entries: [],
        id: generateUniqueID(),
    };
};

/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Takes a performance entry type and a callback function, and creates a
 * `PerformanceObserver` instance that will observe the specified entry type
 * with buffering enabled and call the callback _for each entry_.
 *
 * This function also feature-detects entry support and wraps the logic in a
 * try/catch to avoid errors in unsupporting browsers.
 */
var observe = function (type, callback) {
    try {
        if (PerformanceObserver.supportedEntryTypes.includes(type)) {
            // More extensive feature detect needed for Firefox due to:
            // https://github.com/GoogleChrome/web-vitals/issues/142
            if (type === 'first-input' && !('PerformanceEventTiming' in self)) {
                return;
            }
            var po = new PerformanceObserver(function (l) { return l.getEntries().map(callback); });
            po.observe({ type: type, buffered: true });
            return po;
        }
    }
    catch (e) {
        // Do nothing.
    }
    return;
};

/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var onHidden = function (cb, once) {
    var onHiddenOrPageHide = function (event) {
        if (event.type === 'pagehide' || getGlobalObject().document.visibilityState === 'hidden') {
            cb(event);
            if (once) {
                removeEventListener('visibilitychange', onHiddenOrPageHide, true);
                removeEventListener('pagehide', onHiddenOrPageHide, true);
            }
        }
    };
    addEventListener('visibilitychange', onHiddenOrPageHide, true);
    // Some browsers have buggy implementations of visibilitychange,
    // so we use pagehide in addition, just to be safe.
    addEventListener('pagehide', onHiddenOrPageHide, true);
};

/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var getCLS = function (onReport, reportAllChanges) {
    var metric = initMetric('CLS', 0);
    var report;
    var sessionValue = 0;
    var sessionEntries = [];
    var entryHandler = function (entry) {
        // Only count layout shifts without recent user input.
        // TODO: Figure out why entry can be undefined
        if (entry && !entry.hadRecentInput) {
            var firstSessionEntry = sessionEntries[0];
            var lastSessionEntry = sessionEntries[sessionEntries.length - 1];
            // If the entry occurred less than 1 second after the previous entry and
            // less than 5 seconds after the first entry in the session, include the
            // entry in the current session. Otherwise, start a new session.
            if (sessionValue &&
                sessionEntries.length !== 0 &&
                entry.startTime - lastSessionEntry.startTime < 1000 &&
                entry.startTime - firstSessionEntry.startTime < 5000) {
                sessionValue += entry.value;
                sessionEntries.push(entry);
            }
            else {
                sessionValue = entry.value;
                sessionEntries = [entry];
            }
            // If the current session value is larger than the current CLS value,
            // update CLS and the entries contributing to it.
            if (sessionValue > metric.value) {
                metric.value = sessionValue;
                metric.entries = sessionEntries;
                if (report) {
                    report();
                }
            }
        }
    };
    var po = observe('layout-shift', entryHandler);
    if (po) {
        report = bindReporter(onReport, metric, reportAllChanges);
        onHidden(function () {
            po.takeRecords().map(entryHandler);
            report(true);
        });
    }
};

/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var firstHiddenTime = -1;
var initHiddenTime = function () {
    return getGlobalObject().document.visibilityState === 'hidden' ? 0 : Infinity;
};
var trackChanges = function () {
    // Update the time if/when the document becomes hidden.
    onHidden(function (_a) {
        var timeStamp = _a.timeStamp;
        firstHiddenTime = timeStamp;
    }, true);
};
var getVisibilityWatcher = function () {
    if (firstHiddenTime < 0) {
        // If the document is hidden when this code runs, assume it was hidden
        // since navigation start. This isn't a perfect heuristic, but it's the
        // best we can do until an API is available to support querying past
        // visibilityState.
        firstHiddenTime = initHiddenTime();
        trackChanges();
    }
    return {
        get firstHiddenTime() {
            return firstHiddenTime;
        },
    };
};

/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var getFID = function (onReport, reportAllChanges) {
    var visibilityWatcher = getVisibilityWatcher();
    var metric = initMetric('FID');
    var report;
    var entryHandler = function (entry) {
        // Only report if the page wasn't hidden prior to the first input.
        if (report && entry.startTime < visibilityWatcher.firstHiddenTime) {
            metric.value = entry.processingStart - entry.startTime;
            metric.entries.push(entry);
            report(true);
        }
    };
    var po = observe('first-input', entryHandler);
    if (po) {
        report = bindReporter(onReport, metric, reportAllChanges);
        onHidden(function () {
            po.takeRecords().map(entryHandler);
            po.disconnect();
        }, true);
    }
};

/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var reportedMetricIDs = {};
var getLCP = function (onReport, reportAllChanges) {
    var visibilityWatcher = getVisibilityWatcher();
    var metric = initMetric('LCP');
    var report;
    var entryHandler = function (entry) {
        // The startTime attribute returns the value of the renderTime if it is not 0,
        // and the value of the loadTime otherwise.
        var value = entry.startTime;
        // If the page was hidden prior to paint time of the entry,
        // ignore it and mark the metric as final, otherwise add the entry.
        if (value < visibilityWatcher.firstHiddenTime) {
            metric.value = value;
            metric.entries.push(entry);
        }
        if (report) {
            report();
        }
    };
    var po = observe('largest-contentful-paint', entryHandler);
    if (po) {
        report = bindReporter(onReport, metric, reportAllChanges);
        var stopListening_1 = function () {
            if (!reportedMetricIDs[metric.id]) {
                po.takeRecords().map(entryHandler);
                po.disconnect();
                reportedMetricIDs[metric.id] = true;
                report(true);
            }
        };
        // Stop listening after input. Note: while scrolling is an input that
        // stop LCP observation, it's unreliable since it can be programmatically
        // generated. See: https://github.com/GoogleChrome/web-vitals/issues/75
        ['keydown', 'click'].forEach(function (type) {
            addEventListener(type, stopListening_1, { once: true, capture: true });
        });
        onHidden(stopListening_1, true);
    }
};

var global$3 = getGlobalObject();
/** Class tracking metrics  */
var MetricsInstrumentation = /** @class */ (function () {
    function MetricsInstrumentation(_reportAllChanges) {
        if (_reportAllChanges === void 0) { _reportAllChanges = false; }
        this._reportAllChanges = _reportAllChanges;
        this._measurements = {};
        this._performanceCursor = 0;
        if (!isNodeEnv() && global$3 && global$3.performance && global$3.document) {
            if (global$3.performance.mark) {
                global$3.performance.mark('sentry-tracing-init');
            }
            this._trackCLS();
            this._trackLCP();
            this._trackFID();
        }
    }
    /** Add performance related spans to a transaction */
    MetricsInstrumentation.prototype.addPerformanceEntries = function (transaction) {
        var _this = this;
        if (!global$3 || !global$3.performance || !global$3.performance.getEntries || !browserPerformanceTimeOrigin) {
            // Gatekeeper if performance API not available
            return;
        }
        logger.log('[Tracing] Adding & adjusting spans using Performance API');
        var timeOrigin = msToSec(browserPerformanceTimeOrigin);
        var responseStartTimestamp;
        var requestStartTimestamp;
        global$3.performance
            .getEntries()
            .slice(this._performanceCursor)
            .forEach(function (entry) {
            var startTime = msToSec(entry.startTime);
            var duration = msToSec(entry.duration);
            if (transaction.op === 'navigation' && timeOrigin + startTime < transaction.startTimestamp) {
                return;
            }
            switch (entry.entryType) {
                case 'navigation': {
                    addNavigationSpans(transaction, entry, timeOrigin);
                    responseStartTimestamp = timeOrigin + msToSec(entry.responseStart);
                    requestStartTimestamp = timeOrigin + msToSec(entry.requestStart);
                    break;
                }
                case 'mark':
                case 'paint':
                case 'measure': {
                    var startTimestamp = addMeasureSpans(transaction, entry, startTime, duration, timeOrigin);
                    // capture web vitals
                    var firstHidden = getVisibilityWatcher();
                    // Only report if the page wasn't hidden prior to the web vital.
                    var shouldRecord = entry.startTime < firstHidden.firstHiddenTime;
                    if (entry.name === 'first-paint' && shouldRecord) {
                        logger.log('[Measurements] Adding FP');
                        _this._measurements['fp'] = { value: entry.startTime };
                        _this._measurements['mark.fp'] = { value: startTimestamp };
                    }
                    if (entry.name === 'first-contentful-paint' && shouldRecord) {
                        logger.log('[Measurements] Adding FCP');
                        _this._measurements['fcp'] = { value: entry.startTime };
                        _this._measurements['mark.fcp'] = { value: startTimestamp };
                    }
                    break;
                }
                case 'resource': {
                    var resourceName = entry.name.replace(global$3.location.origin, '');
                    addResourceSpans(transaction, entry, resourceName, startTime, duration, timeOrigin);
                    break;
                }
                // Ignore other entry types.
            }
        });
        this._performanceCursor = Math.max(performance.getEntries().length - 1, 0);
        this._trackNavigator(transaction);
        // Measurements are only available for pageload transactions
        if (transaction.op === 'pageload') {
            // normalize applicable web vital values to be relative to transaction.startTimestamp
            var timeOrigin_1 = msToSec(browserPerformanceTimeOrigin);
            // Generate TTFB (Time to First Byte), which measured as the time between the beginning of the transaction and the
            // start of the response in milliseconds
            if (typeof responseStartTimestamp === 'number') {
                logger.log('[Measurements] Adding TTFB');
                this._measurements['ttfb'] = { value: (responseStartTimestamp - transaction.startTimestamp) * 1000 };
                if (typeof requestStartTimestamp === 'number' && requestStartTimestamp <= responseStartTimestamp) {
                    // Capture the time spent making the request and receiving the first byte of the response.
                    // This is the time between the start of the request and the start of the response in milliseconds.
                    this._measurements['ttfb.requestTime'] = { value: (responseStartTimestamp - requestStartTimestamp) * 1000 };
                }
            }
            ['fcp', 'fp', 'lcp'].forEach(function (name) {
                if (!_this._measurements[name] || timeOrigin_1 >= transaction.startTimestamp) {
                    return;
                }
                // The web vitals, fcp, fp, lcp, and ttfb, all measure relative to timeOrigin.
                // Unfortunately, timeOrigin is not captured within the transaction span data, so these web vitals will need
                // to be adjusted to be relative to transaction.startTimestamp.
                var oldValue = _this._measurements[name].value;
                var measurementTimestamp = timeOrigin_1 + msToSec(oldValue);
                // normalizedValue should be in milliseconds
                var normalizedValue = Math.abs((measurementTimestamp - transaction.startTimestamp) * 1000);
                var delta = normalizedValue - oldValue;
                logger.log("[Measurements] Normalized " + name + " from " + oldValue + " to " + normalizedValue + " (" + delta + ")");
                _this._measurements[name].value = normalizedValue;
            });
            if (this._measurements['mark.fid'] && this._measurements['fid']) {
                // create span for FID
                _startChild(transaction, {
                    description: 'first input delay',
                    endTimestamp: this._measurements['mark.fid'].value + msToSec(this._measurements['fid'].value),
                    op: 'web.vitals',
                    startTimestamp: this._measurements['mark.fid'].value,
                });
            }
            // If FCP is not recorded we should not record the cls value
            // according to the new definition of CLS.
            if (!('fcp' in this._measurements)) {
                delete this._measurements.cls;
            }
            transaction.setMeasurements(this._measurements);
            tagMetricInfo(transaction, this._lcpEntry, this._clsEntry);
            transaction.setTag('sentry_reportAllChanges', this._reportAllChanges);
        }
    };
    /**
     * Capture the information of the user agent.
     */
    MetricsInstrumentation.prototype._trackNavigator = function (transaction) {
        var navigator = global$3.navigator;
        if (!navigator) {
            return;
        }
        // track network connectivity
        var connection = navigator.connection;
        if (connection) {
            if (connection.effectiveType) {
                transaction.setTag('effectiveConnectionType', connection.effectiveType);
            }
            if (connection.type) {
                transaction.setTag('connectionType', connection.type);
            }
            if (isMeasurementValue(connection.rtt)) {
                this._measurements['connection.rtt'] = { value: connection.rtt };
            }
            if (isMeasurementValue(connection.downlink)) {
                this._measurements['connection.downlink'] = { value: connection.downlink };
            }
        }
        if (isMeasurementValue(navigator.deviceMemory)) {
            transaction.setTag('deviceMemory', String(navigator.deviceMemory));
        }
        if (isMeasurementValue(navigator.hardwareConcurrency)) {
            transaction.setTag('hardwareConcurrency', String(navigator.hardwareConcurrency));
        }
    };
    /** Starts tracking the Cumulative Layout Shift on the current page. */
    MetricsInstrumentation.prototype._trackCLS = function () {
        var _this = this;
        // See:
        // https://web.dev/evolving-cls/
        // https://web.dev/cls-web-tooling/
        getCLS(function (metric) {
            var entry = metric.entries.pop();
            if (!entry) {
                return;
            }
            logger.log('[Measurements] Adding CLS');
            _this._measurements['cls'] = { value: metric.value };
            _this._clsEntry = entry;
        });
    };
    /** Starts tracking the Largest Contentful Paint on the current page. */
    MetricsInstrumentation.prototype._trackLCP = function () {
        var _this = this;
        getLCP(function (metric) {
            var entry = metric.entries.pop();
            if (!entry) {
                return;
            }
            var timeOrigin = msToSec(browserPerformanceTimeOrigin);
            var startTime = msToSec(entry.startTime);
            logger.log('[Measurements] Adding LCP');
            _this._measurements['lcp'] = { value: metric.value };
            _this._measurements['mark.lcp'] = { value: timeOrigin + startTime };
            _this._lcpEntry = entry;
        }, this._reportAllChanges);
    };
    /** Starts tracking the First Input Delay on the current page. */
    MetricsInstrumentation.prototype._trackFID = function () {
        var _this = this;
        getFID(function (metric) {
            var entry = metric.entries.pop();
            if (!entry) {
                return;
            }
            var timeOrigin = msToSec(browserPerformanceTimeOrigin);
            var startTime = msToSec(entry.startTime);
            logger.log('[Measurements] Adding FID');
            _this._measurements['fid'] = { value: metric.value };
            _this._measurements['mark.fid'] = { value: timeOrigin + startTime };
        });
    };
    return MetricsInstrumentation;
}());
/** Instrument navigation entries */
function addNavigationSpans(transaction, entry, timeOrigin) {
    ['unloadEvent', 'redirect', 'domContentLoadedEvent', 'loadEvent', 'connect'].forEach(function (event) {
        addPerformanceNavigationTiming(transaction, entry, event, timeOrigin);
    });
    addPerformanceNavigationTiming(transaction, entry, 'secureConnection', timeOrigin, 'TLS/SSL', 'connectEnd');
    addPerformanceNavigationTiming(transaction, entry, 'fetch', timeOrigin, 'cache', 'domainLookupStart');
    addPerformanceNavigationTiming(transaction, entry, 'domainLookup', timeOrigin, 'DNS');
    addRequest(transaction, entry, timeOrigin);
}
/** Create measure related spans */
function addMeasureSpans(transaction, entry, startTime, duration, timeOrigin) {
    var measureStartTimestamp = timeOrigin + startTime;
    var measureEndTimestamp = measureStartTimestamp + duration;
    _startChild(transaction, {
        description: entry.name,
        endTimestamp: measureEndTimestamp,
        op: entry.entryType,
        startTimestamp: measureStartTimestamp,
    });
    return measureStartTimestamp;
}
/** Create resource-related spans */
function addResourceSpans(transaction, entry, resourceName, startTime, duration, timeOrigin) {
    // we already instrument based on fetch and xhr, so we don't need to
    // duplicate spans here.
    if (entry.initiatorType === 'xmlhttprequest' || entry.initiatorType === 'fetch') {
        return;
    }
    var data = {};
    if ('transferSize' in entry) {
        data['Transfer Size'] = entry.transferSize;
    }
    if ('encodedBodySize' in entry) {
        data['Encoded Body Size'] = entry.encodedBodySize;
    }
    if ('decodedBodySize' in entry) {
        data['Decoded Body Size'] = entry.decodedBodySize;
    }
    var startTimestamp = timeOrigin + startTime;
    var endTimestamp = startTimestamp + duration;
    _startChild(transaction, {
        description: resourceName,
        endTimestamp: endTimestamp,
        op: entry.initiatorType ? "resource." + entry.initiatorType : 'resource',
        startTimestamp: startTimestamp,
        data: data,
    });
}
/** Create performance navigation related spans */
function addPerformanceNavigationTiming(transaction, entry, event, timeOrigin, description, eventEnd) {
    var end = eventEnd ? entry[eventEnd] : entry[event + "End"];
    var start = entry[event + "Start"];
    if (!start || !end) {
        return;
    }
    _startChild(transaction, {
        op: 'browser',
        description: (description !== null && description !== void 0 ? description : event),
        startTimestamp: timeOrigin + msToSec(start),
        endTimestamp: timeOrigin + msToSec(end),
    });
}
/** Create request and response related spans */
function addRequest(transaction, entry, timeOrigin) {
    _startChild(transaction, {
        op: 'browser',
        description: 'request',
        startTimestamp: timeOrigin + msToSec(entry.requestStart),
        endTimestamp: timeOrigin + msToSec(entry.responseEnd),
    });
    _startChild(transaction, {
        op: 'browser',
        description: 'response',
        startTimestamp: timeOrigin + msToSec(entry.responseStart),
        endTimestamp: timeOrigin + msToSec(entry.responseEnd),
    });
}
/**
 * Helper function to start child on transactions. This function will make sure that the transaction will
 * use the start timestamp of the created child span if it is earlier than the transactions actual
 * start timestamp.
 */
function _startChild(transaction, _a) {
    var startTimestamp = _a.startTimestamp, ctx = FronteggApp.__rest(_a, ["startTimestamp"]);
    if (startTimestamp && transaction.startTimestamp > startTimestamp) {
        transaction.startTimestamp = startTimestamp;
    }
    return transaction.startChild(FronteggApp.__assign({ startTimestamp: startTimestamp }, ctx));
}
/**
 * Checks if a given value is a valid measurement value.
 */
function isMeasurementValue(value) {
    return typeof value === 'number' && isFinite(value);
}
/** Add LCP / CLS data to transaction to allow debugging */
function tagMetricInfo(transaction, lcpEntry, clsEntry) {
    if (lcpEntry) {
        logger.log('[Measurements] Adding LCP Data');
        // Capture Properties of the LCP element that contributes to the LCP.
        if (lcpEntry.element) {
            transaction.setTag('lcp.element', htmlTreeAsString(lcpEntry.element));
        }
        if (lcpEntry.id) {
            transaction.setTag('lcp.id', lcpEntry.id);
        }
        if (lcpEntry.url) {
            // Trim URL to the first 200 characters.
            transaction.setTag('lcp.url', lcpEntry.url.trim().slice(0, 200));
        }
        transaction.setTag('lcp.size', lcpEntry.size);
    }
    // See: https://developer.mozilla.org/en-US/docs/Web/API/LayoutShift
    if (clsEntry && clsEntry.sources) {
        logger.log('[Measurements] Adding CLS Data');
        clsEntry.sources.forEach(function (source, index) {
            return transaction.setTag("cls.source." + (index + 1), htmlTreeAsString(source.node));
        });
    }
}

var DEFAULT_TRACING_ORIGINS = ['localhost', /^\//];
var defaultRequestInstrumentationOptions = {
    traceFetch: true,
    traceXHR: true,
    tracingOrigins: DEFAULT_TRACING_ORIGINS,
};
/** Registers span creators for xhr and fetch requests  */
function instrumentOutgoingRequests(_options) {
    // eslint-disable-next-line @typescript-eslint/unbound-method
    var _a = FronteggApp.__assign(FronteggApp.__assign({}, defaultRequestInstrumentationOptions), _options), traceFetch = _a.traceFetch, traceXHR = _a.traceXHR, tracingOrigins = _a.tracingOrigins, shouldCreateSpanForRequest = _a.shouldCreateSpanForRequest;
    // We should cache url -> decision so that we don't have to compute
    // regexp everytime we create a request.
    var urlMap = {};
    var defaultShouldCreateSpan = function (url) {
        if (urlMap[url]) {
            return urlMap[url];
        }
        var origins = tracingOrigins;
        urlMap[url] =
            origins.some(function (origin) { return isMatchingPattern(url, origin); }) &&
                !isMatchingPattern(url, 'sentry_key');
        return urlMap[url];
    };
    // We want that our users don't have to re-implement shouldCreateSpanForRequest themselves
    // That's why we filter out already unwanted Spans from tracingOrigins
    var shouldCreateSpan = defaultShouldCreateSpan;
    if (typeof shouldCreateSpanForRequest === 'function') {
        shouldCreateSpan = function (url) {
            return defaultShouldCreateSpan(url) && shouldCreateSpanForRequest(url);
        };
    }
    var spans = {};
    if (traceFetch) {
        addInstrumentationHandler('fetch', function (handlerData) {
            fetchCallback(handlerData, shouldCreateSpan, spans);
        });
    }
    if (traceXHR) {
        addInstrumentationHandler('xhr', function (handlerData) {
            xhrCallback(handlerData, shouldCreateSpan, spans);
        });
    }
}
/**
 * Create and track fetch request spans
 */
function fetchCallback(handlerData, shouldCreateSpan, spans) {
    if (!hasTracingEnabled() || !(handlerData.fetchData && shouldCreateSpan(handlerData.fetchData.url))) {
        return;
    }
    if (handlerData.endTimestamp) {
        var spanId = handlerData.fetchData.__span;
        if (!spanId)
            return;
        var span = spans[spanId];
        if (span) {
            if (handlerData.response) {
                // TODO (kmclb) remove this once types PR goes through
                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                span.setHttpStatus(handlerData.response.status);
            }
            else if (handlerData.error) {
                span.setStatus('internal_error');
            }
            span.finish();
            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
            delete spans[spanId];
        }
        return;
    }
    var activeTransaction = getActiveTransaction();
    if (activeTransaction) {
        var span = activeTransaction.startChild({
            data: FronteggApp.__assign(FronteggApp.__assign({}, handlerData.fetchData), { type: 'fetch' }),
            description: handlerData.fetchData.method + " " + handlerData.fetchData.url,
            op: 'http.client',
        });
        handlerData.fetchData.__span = span.spanId;
        spans[span.spanId] = span;
        var request = (handlerData.args[0] = handlerData.args[0]);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var options = (handlerData.args[1] = handlerData.args[1] || {});
        var headers = options.headers;
        if (isInstanceOf(request, Request)) {
            headers = request.headers;
        }
        if (headers) {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
            if (typeof headers.append === 'function') {
                // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
                headers.append('sentry-trace', span.toTraceparent());
            }
            else if (Array.isArray(headers)) {
                headers = FronteggApp.__spread(headers, [['sentry-trace', span.toTraceparent()]]);
            }
            else {
                headers = FronteggApp.__assign(FronteggApp.__assign({}, headers), { 'sentry-trace': span.toTraceparent() });
            }
        }
        else {
            headers = { 'sentry-trace': span.toTraceparent() };
        }
        options.headers = headers;
    }
}
/**
 * Create and track xhr request spans
 */
function xhrCallback(handlerData, shouldCreateSpan, spans) {
    if (!hasTracingEnabled() ||
        (handlerData.xhr && handlerData.xhr.__sentry_own_request__) ||
        !(handlerData.xhr && handlerData.xhr.__sentry_xhr__ && shouldCreateSpan(handlerData.xhr.__sentry_xhr__.url))) {
        return;
    }
    var xhr = handlerData.xhr.__sentry_xhr__;
    // check first if the request has finished and is tracked by an existing span which should now end
    if (handlerData.endTimestamp) {
        var spanId = handlerData.xhr.__sentry_xhr_span_id__;
        if (!spanId)
            return;
        var span = spans[spanId];
        if (span) {
            span.setHttpStatus(xhr.status_code);
            span.finish();
            // eslint-disable-next-line @typescript-eslint/no-dynamic-delete
            delete spans[spanId];
        }
        return;
    }
    // if not, create a new span to track it
    var activeTransaction = getActiveTransaction();
    if (activeTransaction) {
        var span = activeTransaction.startChild({
            data: FronteggApp.__assign(FronteggApp.__assign({}, xhr.data), { type: 'xhr', method: xhr.method, url: xhr.url }),
            description: xhr.method + " " + xhr.url,
            op: 'http.client',
        });
        handlerData.xhr.__sentry_xhr_span_id__ = span.spanId;
        spans[handlerData.xhr.__sentry_xhr_span_id__] = span;
        if (handlerData.xhr.setRequestHeader) {
            try {
                handlerData.xhr.setRequestHeader('sentry-trace', span.toTraceparent());
            }
            catch (_) {
                // Error: InvalidStateError: Failed to execute 'setRequestHeader' on 'XMLHttpRequest': The object's state must be OPENED.
            }
        }
    }
}

var global$2 = getGlobalObject();
/**
 * Default function implementing pageload and navigation transactions
 */
function instrumentRoutingWithDefaults(customStartTransaction, startTransactionOnPageLoad, startTransactionOnLocationChange) {
    if (startTransactionOnPageLoad === void 0) { startTransactionOnPageLoad = true; }
    if (startTransactionOnLocationChange === void 0) { startTransactionOnLocationChange = true; }
    if (!global$2 || !global$2.location) {
        logger.warn('Could not initialize routing instrumentation due to invalid location');
        return;
    }
    var startingUrl = global$2.location.href;
    var activeTransaction;
    if (startTransactionOnPageLoad) {
        activeTransaction = customStartTransaction({ name: global$2.location.pathname, op: 'pageload' });
    }
    if (startTransactionOnLocationChange) {
        addInstrumentationHandler('history', function (_a) {
            var to = _a.to, from = _a.from;
            /**
             * This early return is there to account for some cases where a navigation transaction starts right after
             * long-running pageload. We make sure that if `from` is undefined and a valid `startingURL` exists, we don't
             * create an uneccessary navigation transaction.
             *
             * This was hard to duplicate, but this behavior stopped as soon as this fix was applied. This issue might also
             * only be caused in certain development environments where the usage of a hot module reloader is causing
             * errors.
             */
            if (from === undefined && startingUrl && startingUrl.indexOf(to) !== -1) {
                startingUrl = undefined;
                return;
            }
            if (from !== to) {
                startingUrl = undefined;
                if (activeTransaction) {
                    logger.log("[Tracing] Finishing current transaction with op: " + activeTransaction.op);
                    // If there's an open transaction on the scope, we need to finish it before creating an new one.
                    activeTransaction.finish();
                }
                activeTransaction = customStartTransaction({ name: global$2.location.pathname, op: 'navigation' });
            }
        });
    }
}

var DEFAULT_MAX_TRANSACTION_DURATION_SECONDS = 600;
var DEFAULT_BROWSER_TRACING_OPTIONS = FronteggApp.__assign({ idleTimeout: DEFAULT_IDLE_TIMEOUT, markBackgroundTransactions: true, maxTransactionDuration: DEFAULT_MAX_TRANSACTION_DURATION_SECONDS, routingInstrumentation: instrumentRoutingWithDefaults, startTransactionOnLocationChange: true, startTransactionOnPageLoad: true }, defaultRequestInstrumentationOptions);
/**
 * The Browser Tracing integration automatically instruments browser pageload/navigation
 * actions as transactions, and captures requests, metrics and errors as spans.
 *
 * The integration can be configured with a variety of options, and can be extended to use
 * any routing library. This integration uses {@see IdleTransaction} to create transactions.
 */
var BrowserTracing = /** @class */ (function () {
    function BrowserTracing(_options) {
        /**
         * @inheritDoc
         */
        this.name = BrowserTracing.id;
        this._emitOptionsWarning = false;
        /** Store configured idle timeout so that it can be added as a tag to transactions */
        this._configuredIdleTimeout = undefined;
        var tracingOrigins = defaultRequestInstrumentationOptions.tracingOrigins;
        // NOTE: Logger doesn't work in constructors, as it's initialized after integrations instances
        if (_options) {
            this._configuredIdleTimeout = _options.idleTimeout;
            if (_options.tracingOrigins && Array.isArray(_options.tracingOrigins) && _options.tracingOrigins.length !== 0) {
                tracingOrigins = _options.tracingOrigins;
            }
            else {
                this._emitOptionsWarning = true;
            }
        }
        this.options = FronteggApp.__assign(FronteggApp.__assign(FronteggApp.__assign({}, DEFAULT_BROWSER_TRACING_OPTIONS), _options), { tracingOrigins: tracingOrigins });
        var _metricOptions = this.options._metricOptions;
        this._metrics = new MetricsInstrumentation(_metricOptions && _metricOptions._reportAllChanges);
    }
    /**
     * @inheritDoc
     */
    BrowserTracing.prototype.setupOnce = function (_, getCurrentHub) {
        var _this = this;
        this._getCurrentHub = getCurrentHub;
        if (this._emitOptionsWarning) {
            logger.warn('[Tracing] You need to define `tracingOrigins` in the options. Set an array of urls or patterns to trace.');
            logger.warn("[Tracing] We added a reasonable default for you: " + defaultRequestInstrumentationOptions.tracingOrigins);
        }
        // eslint-disable-next-line @typescript-eslint/unbound-method
        var _a = this.options, instrumentRouting = _a.routingInstrumentation, startTransactionOnLocationChange = _a.startTransactionOnLocationChange, startTransactionOnPageLoad = _a.startTransactionOnPageLoad, markBackgroundTransactions = _a.markBackgroundTransactions, traceFetch = _a.traceFetch, traceXHR = _a.traceXHR, tracingOrigins = _a.tracingOrigins, shouldCreateSpanForRequest = _a.shouldCreateSpanForRequest;
        instrumentRouting(function (context) { return _this._createRouteTransaction(context); }, startTransactionOnPageLoad, startTransactionOnLocationChange);
        if (markBackgroundTransactions) {
            registerBackgroundTabDetection();
        }
        instrumentOutgoingRequests({ traceFetch: traceFetch, traceXHR: traceXHR, tracingOrigins: tracingOrigins, shouldCreateSpanForRequest: shouldCreateSpanForRequest });
    };
    /** Create routing idle transaction. */
    BrowserTracing.prototype._createRouteTransaction = function (context) {
        var _this = this;
        if (!this._getCurrentHub) {
            logger.warn("[Tracing] Did not create " + context.op + " transaction because _getCurrentHub is invalid.");
            return undefined;
        }
        // eslint-disable-next-line @typescript-eslint/unbound-method
        var _a = this.options, beforeNavigate = _a.beforeNavigate, idleTimeout = _a.idleTimeout, maxTransactionDuration = _a.maxTransactionDuration;
        var parentContextFromHeader = context.op === 'pageload' ? getHeaderContext() : undefined;
        var expandedContext = FronteggApp.__assign(FronteggApp.__assign(FronteggApp.__assign({}, context), parentContextFromHeader), { trimEnd: true });
        var modifiedContext = typeof beforeNavigate === 'function' ? beforeNavigate(expandedContext) : expandedContext;
        // For backwards compatibility reasons, beforeNavigate can return undefined to "drop" the transaction (prevent it
        // from being sent to Sentry).
        var finalContext = modifiedContext === undefined ? FronteggApp.__assign(FronteggApp.__assign({}, expandedContext), { sampled: false }) : modifiedContext;
        if (finalContext.sampled === false) {
            logger.log("[Tracing] Will not send " + finalContext.op + " transaction because of beforeNavigate.");
        }
        logger.log("[Tracing] Starting " + finalContext.op + " transaction on scope");
        var hub = this._getCurrentHub();
        var location = getGlobalObject().location;
        var idleTransaction = startIdleTransaction(hub, finalContext, idleTimeout, true, { location: location });
        idleTransaction.registerBeforeFinishCallback(function (transaction, endTimestamp) {
            _this._metrics.addPerformanceEntries(transaction);
            adjustTransactionDuration(secToMs(maxTransactionDuration), transaction, endTimestamp);
        });
        idleTransaction.setTag('idleTimeout', this._configuredIdleTimeout);
        return idleTransaction;
    };
    /**
     * @inheritDoc
     */
    BrowserTracing.id = 'BrowserTracing';
    return BrowserTracing;
}());
/**
 * Gets transaction context from a sentry-trace meta.
 *
 * @returns Transaction context data from the header or undefined if there's no header or the header is malformed
 */
function getHeaderContext() {
    var header = getMetaContent('sentry-trace');
    if (header) {
        return extractTraceparentData(header);
    }
    return undefined;
}
/** Returns the value of a meta tag */
function getMetaContent(metaName) {
    var el = getGlobalObject().document.querySelector("meta[name=" + metaName + "]");
    return el ? el.getAttribute('content') : null;
}
/** Adjusts transaction value based on max transaction duration */
function adjustTransactionDuration(maxDuration, transaction, endTimestamp) {
    var diff = endTimestamp - transaction.startTimestamp;
    var isOutdatedTransaction = endTimestamp && (diff > maxDuration || diff < 0);
    if (isOutdatedTransaction) {
        transaction.setStatus('deadline_exceeded');
        transaction.setTag('maxTransactionDurationExceeded', 'true');
    }
}

// We are patching the global object with our hub extension methods
addExtensionMethods();

var global$1 = getGlobalObject();
/** Send Console API calls as Sentry Events */
var CaptureConsole = /** @class */ (function () {
    /**
     * @inheritDoc
     */
    function CaptureConsole(options) {
        if (options === void 0) { options = {}; }
        /**
         * @inheritDoc
         */
        this.name = CaptureConsole.id;
        /**
         * @inheritDoc
         */
        this._levels = ['log', 'info', 'warn', 'error', 'debug', 'assert'];
        if (options.levels) {
            this._levels = options.levels;
        }
    }
    /**
     * @inheritDoc
     */
    CaptureConsole.prototype.setupOnce = function (_, getCurrentHub) {
        if (!('console' in global$1)) {
            return;
        }
        this._levels.forEach(function (level) {
            if (!(level in global$1.console)) {
                return;
            }
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            fill(global$1.console, level, function (originalConsoleMethod) { return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var hub = getCurrentHub();
                if (hub.getIntegration(CaptureConsole)) {
                    hub.withScope(function (scope) {
                        scope.setLevel(severityFromString(level));
                        scope.setExtra('arguments', args);
                        scope.addEventProcessor(function (event) {
                            event.logger = 'console';
                            return event;
                        });
                        var message = safeJoin(args, ' ');
                        if (level === 'assert') {
                            if (args[0] === false) {
                                message = "Assertion failed: " + (safeJoin(args.slice(1), ' ') || 'console.assert');
                                scope.setExtra('arguments', args.slice(1));
                                hub.captureMessage(message);
                            }
                        }
                        else if (level === 'error' && args[0] instanceof Error) {
                            hub.captureException(args[0]);
                        }
                        else {
                            hub.captureMessage(message);
                        }
                    });
                }
                // this fails for some browsers. :(
                if (originalConsoleMethod) {
                    originalConsoleMethod.apply(global$1.console, args);
                }
            }; });
        });
    };
    /**
     * @inheritDoc
     */
    CaptureConsole.id = 'CaptureConsole';
    return CaptureConsole;
}());

var createStyled$1 = {};

var interopRequireDefault = {exports: {}};

(function (module) {
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

module.exports = _interopRequireDefault;
module.exports["default"] = module.exports, module.exports.__esModule = true;
}(interopRequireDefault));

var _extends$3 = {exports: {}};

(function (module) {
function _extends() {
  module.exports = _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  module.exports["default"] = module.exports, module.exports.__esModule = true;
  return _extends.apply(this, arguments);
}

module.exports = _extends;
module.exports["default"] = module.exports, module.exports.__esModule = true;
}(_extends$3));

var objectWithoutPropertiesLoose = {exports: {}};

(function (module) {
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

module.exports = _objectWithoutPropertiesLoose;
module.exports["default"] = module.exports, module.exports.__esModule = true;
}(objectWithoutPropertiesLoose));

var require$$3 = /*@__PURE__*/formik_esm.getAugmentedNamespace(formik_esm.styledEngine);

var require$$5 = /*@__PURE__*/formik_esm.getAugmentedNamespace(createTheme);

var require$$6 = /*@__PURE__*/formik_esm.getAugmentedNamespace(styleFunctionSx);

var propsToClassKey$1 = {};

var _interopRequireDefault$1 = interopRequireDefault.exports;

Object.defineProperty(propsToClassKey$1, "__esModule", {
  value: true
});
propsToClassKey$1.default = propsToClassKey;

var _objectWithoutPropertiesLoose2$1 = _interopRequireDefault$1(objectWithoutPropertiesLoose.exports);

var _utils = formik_esm.require$$4;

const _excluded$1 = ["variant"];

function isEmpty$1(string) {
  return string.length === 0;
}
/**
 * Generates string classKey based on the properties provided. It starts with the
 * variant if defined, and then it appends all other properties in alphabetical order.
 * @param {object} props - the properties for which the classKey should be created.
 */


function propsToClassKey(props) {
  const {
    variant
  } = props,
        other = (0, _objectWithoutPropertiesLoose2$1.default)(props, _excluded$1);
  let classKey = variant || '';
  Object.keys(other).sort().forEach(key => {
    if (key === 'color') {
      classKey += isEmpty$1(classKey) ? props[key] : (0, _utils.unstable_capitalize)(props[key]);
    } else {
      classKey += `${isEmpty$1(classKey) ? key : (0, _utils.unstable_capitalize)(key)}${(0, _utils.unstable_capitalize)(props[key].toString())}`;
    }
  });
  return classKey;
}

var _interopRequireDefault = interopRequireDefault.exports;

Object.defineProperty(createStyled$1, "__esModule", {
  value: true
});
createStyled$1.shouldForwardProp = shouldForwardProp;
var _default = createStyled$1.default = createStyled;
createStyled$1.systemDefaultTheme = void 0;

var _extends2 = _interopRequireDefault(_extends$3.exports);

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(objectWithoutPropertiesLoose.exports);

var _styledEngine = _interopRequireDefault(require$$3);

var _createTheme = _interopRequireDefault(require$$5);

var _styleFunctionSx = _interopRequireDefault(require$$6);

var _propsToClassKey = _interopRequireDefault(propsToClassKey$1);

const _excluded = ["name", "slot", "skipVariantsResolver", "skipSx", "overridesResolver"],
      _excluded2 = ["theme"],
      _excluded3 = ["theme"];

function isEmpty(obj) {
  return Object.keys(obj).length === 0;
}

const getStyleOverrides = (name, theme) => {
  if (theme.components && theme.components[name] && theme.components[name].styleOverrides) {
    return theme.components[name].styleOverrides;
  }

  return null;
};

const getVariantStyles = (name, theme) => {
  let variants = [];

  if (theme && theme.components && theme.components[name] && theme.components[name].variants) {
    variants = theme.components[name].variants;
  }

  const variantsStyles = {};
  variants.forEach(definition => {
    const key = (0, _propsToClassKey.default)(definition.props);
    variantsStyles[key] = definition.style;
  });
  return variantsStyles;
};

const variantsResolver = (props, styles, theme, name) => {
  var _theme$components, _theme$components$nam;

  const {
    ownerState = {}
  } = props;
  const variantsStyles = [];
  const themeVariants = theme == null ? void 0 : (_theme$components = theme.components) == null ? void 0 : (_theme$components$nam = _theme$components[name]) == null ? void 0 : _theme$components$nam.variants;

  if (themeVariants) {
    themeVariants.forEach(themeVariant => {
      let isMatch = true;
      Object.keys(themeVariant.props).forEach(key => {
        if (ownerState[key] !== themeVariant.props[key] && props[key] !== themeVariant.props[key]) {
          isMatch = false;
        }
      });

      if (isMatch) {
        variantsStyles.push(styles[(0, _propsToClassKey.default)(themeVariant.props)]);
      }
    });
  }

  return variantsStyles;
};

function shouldForwardProp(prop) {
  return prop !== 'ownerState' && prop !== 'theme' && prop !== 'sx' && prop !== 'as';
}

const systemDefaultTheme = (0, _createTheme.default)();
createStyled$1.systemDefaultTheme = systemDefaultTheme;

function createStyled(input = {}) {
  const {
    defaultTheme = systemDefaultTheme,
    rootShouldForwardProp = shouldForwardProp,
    slotShouldForwardProp = shouldForwardProp
  } = input;
  return (tag, inputOptions = {}) => {
    const {
      name: componentName,
      slot: componentSlot,
      skipVariantsResolver: inputSkipVariantsResolver,
      skipSx: inputSkipSx,
      overridesResolver
    } = inputOptions,
          options = (0, _objectWithoutPropertiesLoose2.default)(inputOptions, _excluded); // if skipVariantsResolver option is defined, take the value, otherwise, true for root and false for other slots.

    const skipVariantsResolver = inputSkipVariantsResolver !== undefined ? inputSkipVariantsResolver : componentSlot && componentSlot !== 'Root' || false;
    const skipSx = inputSkipSx || false;
    let label;

    let shouldForwardPropOption = shouldForwardProp;

    if (componentSlot === 'Root') {
      shouldForwardPropOption = rootShouldForwardProp;
    } else if (componentSlot) {
      // any other slot specified
      shouldForwardPropOption = slotShouldForwardProp;
    }

    const defaultStyledResolver = (0, _styledEngine.default)(tag, (0, _extends2.default)({
      shouldForwardProp: shouldForwardPropOption,
      label
    }, options));

    const muiStyledResolver = (styleArg, ...expressions) => {
      const expressionsWithDefaultTheme = expressions ? expressions.map(stylesArg => {
        return typeof stylesArg === 'function' ? _ref => {
          let {
            theme: themeInput
          } = _ref,
              other = (0, _objectWithoutPropertiesLoose2.default)(_ref, _excluded2);
          return stylesArg((0, _extends2.default)({
            theme: isEmpty(themeInput) ? defaultTheme : themeInput
          }, other));
        } : stylesArg;
      }) : [];
      let transformedStyleArg = styleArg;

      if (componentName && overridesResolver) {
        expressionsWithDefaultTheme.push(props => {
          const theme = isEmpty(props.theme) ? defaultTheme : props.theme;
          const styleOverrides = getStyleOverrides(componentName, theme);

          if (styleOverrides) {
            return overridesResolver(props, styleOverrides);
          }

          return null;
        });
      }

      if (componentName && !skipVariantsResolver) {
        expressionsWithDefaultTheme.push(props => {
          const theme = isEmpty(props.theme) ? defaultTheme : props.theme;
          return variantsResolver(props, getVariantStyles(componentName, theme), theme, componentName);
        });
      }

      if (!skipSx) {
        expressionsWithDefaultTheme.push(props => {
          const theme = isEmpty(props.theme) ? defaultTheme : props.theme;
          return (0, _styleFunctionSx.default)((0, _extends2.default)({}, props, {
            theme
          }));
        });
      }

      const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;

      if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {
        const placeholders = new Array(numOfCustomFnsApplied).fill(''); // If the type is array, than we need to add placeholders in the template for the overrides, variants and the sx styles.

        transformedStyleArg = [...styleArg, ...placeholders];
        transformedStyleArg.raw = [...styleArg.raw, ...placeholders];
      } else if (typeof styleArg === 'function') {
        // If the type is function, we need to define the default theme.
        transformedStyleArg = _ref2 => {
          let {
            theme: themeInput
          } = _ref2,
              other = (0, _objectWithoutPropertiesLoose2.default)(_ref2, _excluded3);
          return styleArg((0, _extends2.default)({
            theme: isEmpty(themeInput) ? defaultTheme : themeInput
          }, other));
        };
      }

      const Component = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);

      return Component;
    };

    return muiStyledResolver;
  };
}

/*!
 * get-value <https://github.com/jonschlinkert/get-value>
 *
 * Copyright (c) 2014-2018, Jon Schlinkert.
 * Released under the MIT License.
 */

const isObject = formik_esm.isobject;

var getValue = function(target, path, options) {
  if (!isObject(options)) {
    options = { default: options };
  }

  if (!isValidObject(target)) {
    return typeof options.default !== 'undefined' ? options.default : target;
  }

  if (typeof path === 'number') {
    path = String(path);
  }

  const isArray = Array.isArray(path);
  const isString = typeof path === 'string';
  const splitChar = options.separator || '.';
  const joinChar = options.joinChar || (typeof splitChar === 'string' ? splitChar : '.');

  if (!isString && !isArray) {
    return target;
  }

  if (isString && path in target) {
    return isValid(path, target, options) ? target[path] : options.default;
  }

  let segs = isArray ? path : split(path, splitChar, options);
  let len = segs.length;
  let idx = 0;

  do {
    let prop = segs[idx];
    if (typeof prop === 'number') {
      prop = String(prop);
    }

    while (prop && prop.slice(-1) === '\\') {
      prop = join([prop.slice(0, -1), segs[++idx] || ''], joinChar, options);
    }

    if (prop in target) {
      if (!isValid(prop, target, options)) {
        return options.default;
      }

      target = target[prop];
    } else {
      let hasProp = false;
      let n = idx + 1;

      while (n < len) {
        prop = join([prop, segs[n++]], joinChar, options);

        if ((hasProp = prop in target)) {
          if (!isValid(prop, target, options)) {
            return options.default;
          }

          target = target[prop];
          idx = n - 1;
          break;
        }
      }

      if (!hasProp) {
        return options.default;
      }
    }
  } while (++idx < len && isValidObject(target));

  if (idx === len) {
    return target;
  }

  return options.default;
};

function join(segs, joinChar, options) {
  if (typeof options.join === 'function') {
    return options.join(segs);
  }
  return segs[0] + joinChar + segs[1];
}

function split(path, splitChar, options) {
  if (typeof options.split === 'function') {
    return options.split(path);
  }
  return path.split(splitChar);
}

function isValid(key, target, options) {
  if (typeof options.isValid === 'function') {
    return options.isValid(key, target);
  }
  return true;
}

function isValidObject(val) {
  return isObject(val) || Array.isArray(val) || typeof val === 'function';
}

const toString = Object.prototype.toString;
const errorToString = Error.prototype.toString;
const regExpToString = RegExp.prototype.toString;
const symbolToString = typeof Symbol !== 'undefined' ? Symbol.prototype.toString : () => '';
const SYMBOL_REGEXP = /^Symbol\((.*)\)(.*)$/;

function printNumber(val) {
  if (val != +val) return 'NaN';
  const isNegativeZero = val === 0 && 1 / val < 0;
  return isNegativeZero ? '-0' : '' + val;
}

function printSimpleValue(val, quoteStrings = false) {
  if (val == null || val === true || val === false) return '' + val;
  const typeOf = typeof val;
  if (typeOf === 'number') return printNumber(val);
  if (typeOf === 'string') return quoteStrings ? `"${val}"` : val;
  if (typeOf === 'function') return '[Function ' + (val.name || 'anonymous') + ']';
  if (typeOf === 'symbol') return symbolToString.call(val).replace(SYMBOL_REGEXP, 'Symbol($1)');
  const tag = toString.call(val).slice(8, -1);
  if (tag === 'Date') return isNaN(val.getTime()) ? '' + val : val.toISOString(val);
  if (tag === 'Error' || val instanceof Error) return '[' + errorToString.call(val) + ']';
  if (tag === 'RegExp') return regExpToString.call(val);
  return null;
}

function printValue(value, quoteStrings) {
  let result = printSimpleValue(value, quoteStrings);
  if (result !== null) return result;
  return JSON.stringify(value, function (key, value) {
    let result = printSimpleValue(this[key], quoteStrings);
    if (result !== null) return result;
    return value;
  }, 2);
}

let mixed = {
  default: '${path} is invalid',
  required: '${path} is a required field',
  oneOf: '${path} must be one of the following values: ${values}',
  notOneOf: '${path} must not be one of the following values: ${values}',
  notType: ({
    path,
    type,
    value,
    originalValue
  }) => {
    let isCast = originalValue != null && originalValue !== value;
    let msg = `${path} must be a \`${type}\` type, ` + `but the final value was: \`${printValue(value, true)}\`` + (isCast ? ` (cast from the value \`${printValue(originalValue, true)}\`).` : '.');

    if (value === null) {
      msg += `\n If "null" is intended as an empty value be sure to mark the schema as \`.nullable()\``;
    }

    return msg;
  },
  defined: '${path} must be defined'
};
let string = {
  length: '${path} must be exactly ${length} characters',
  min: '${path} must be at least ${min} characters',
  max: '${path} must be at most ${max} characters',
  matches: '${path} must match the following: "${regex}"',
  email: '${path} must be a valid email',
  url: '${path} must be a valid URL',
  uuid: '${path} must be a valid UUID',
  trim: '${path} must be a trimmed string',
  lowercase: '${path} must be a lowercase string',
  uppercase: '${path} must be a upper case string'
};
let number = {
  min: '${path} must be greater than or equal to ${min}',
  max: '${path} must be less than or equal to ${max}',
  lessThan: '${path} must be less than ${less}',
  moreThan: '${path} must be greater than ${more}',
  positive: '${path} must be a positive number',
  negative: '${path} must be a negative number',
  integer: '${path} must be an integer'
};
let date = {
  min: '${path} field must be later than ${min}',
  max: '${path} field must be at earlier than ${max}'
};
let boolean = {
  isValue: '${path} field must be ${value}'
};
let object = {
  noUnknown: '${path} field has unspecified keys: ${unknown}'
};
let array = {
  min: '${path} field must have at least ${min} items',
  max: '${path} field must have less than or equal to ${max} items',
  length: '${path} must be have ${length} items'
};
Object.assign(Object.create(null), {
  mixed,
  string,
  number,
  date,
  object,
  array,
  boolean
});

var isSchema = (obj => obj && obj.__isYupSchema__);

class Condition {
  constructor(refs, options) {
    this.refs = refs;
    this.refs = refs;

    if (typeof options === 'function') {
      this.fn = options;
      return;
    }

    if (!formik_esm.has_1(options, 'is')) throw new TypeError('`is:` is required for `when()` conditions');
    if (!options.then && !options.otherwise) throw new TypeError('either `then:` or `otherwise:` is required for `when()` conditions');
    let {
      is,
      then,
      otherwise
    } = options;
    let check = typeof is === 'function' ? is : (...values) => values.every(value => value === is);

    this.fn = function (...args) {
      let options = args.pop();
      let schema = args.pop();
      let branch = check(...args) ? then : otherwise;
      if (!branch) return undefined;
      if (typeof branch === 'function') return branch(schema);
      return schema.concat(branch.resolve(options));
    };
  }

  resolve(base, options) {
    let values = this.refs.map(ref => ref.getValue(options == null ? void 0 : options.value, options == null ? void 0 : options.parent, options == null ? void 0 : options.context));
    let schema = this.fn.apply(base, values.concat(base, options));
    if (schema === undefined || schema === base) return base;
    if (!isSchema(schema)) throw new TypeError('conditions must return a schema object');
    return schema.resolve(options);
  }

}

function toArray(value) {
  return value == null ? [] : [].concat(value);
}

function _extends$2() { _extends$2 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$2.apply(this, arguments); }
let strReg = /\$\{\s*(\w+)\s*\}/g;
class ValidationError extends Error {
  static formatError(message, params) {
    const path = params.label || params.path || 'this';
    if (path !== params.path) params = _extends$2({}, params, {
      path
    });
    if (typeof message === 'string') return message.replace(strReg, (_, key) => printValue(params[key]));
    if (typeof message === 'function') return message(params);
    return message;
  }

  static isError(err) {
    return err && err.name === 'ValidationError';
  }

  constructor(errorOrErrors, value, field, type) {
    super();
    this.name = 'ValidationError';
    this.value = value;
    this.path = field;
    this.type = type;
    this.errors = [];
    this.inner = [];
    toArray(errorOrErrors).forEach(err => {
      if (ValidationError.isError(err)) {
        this.errors.push(...err.errors);
        this.inner = this.inner.concat(err.inner.length ? err.inner : err);
      } else {
        this.errors.push(err);
      }
    });
    this.message = this.errors.length > 1 ? `${this.errors.length} errors occurred` : this.errors[0];
    if (Error.captureStackTrace) Error.captureStackTrace(this, ValidationError);
  }

}

const once = cb => {
  let fired = false;
  return (...args) => {
    if (fired) return;
    fired = true;
    cb(...args);
  };
};

function runTests(options, cb) {
  let {
    endEarly,
    tests,
    args,
    value,
    errors,
    sort,
    path
  } = options;
  let callback = once(cb);
  let count = tests.length;
  const nestedErrors = [];
  errors = errors ? errors : [];
  if (!count) return errors.length ? callback(new ValidationError(errors, value, path)) : callback(null, value);

  for (let i = 0; i < tests.length; i++) {
    const test = tests[i];
    test(args, function finishTestRun(err) {
      if (err) {
        // always return early for non validation errors
        if (!ValidationError.isError(err)) {
          return callback(err, value);
        }

        if (endEarly) {
          err.value = value;
          return callback(err, value);
        }

        nestedErrors.push(err);
      }

      if (--count <= 0) {
        if (nestedErrors.length) {
          if (sort) nestedErrors.sort(sort); //show parent errors after the nested ones: name.first, name

          if (errors.length) nestedErrors.push(...errors);
          errors = nestedErrors;
        }

        if (errors.length) {
          callback(new ValidationError(errors, value, path), value);
          return;
        }

        callback(null, value);
      }
    });
  }
}

const prefixes = {
  context: '$',
  value: '.'
};
class Reference {
  constructor(key, options = {}) {
    if (typeof key !== 'string') throw new TypeError('ref must be a string, got: ' + key);
    this.key = key.trim();
    if (key === '') throw new TypeError('ref must be a non-empty string');
    this.isContext = this.key[0] === prefixes.context;
    this.isValue = this.key[0] === prefixes.value;
    this.isSibling = !this.isContext && !this.isValue;
    let prefix = this.isContext ? prefixes.context : this.isValue ? prefixes.value : '';
    this.path = this.key.slice(prefix.length);
    this.getter = this.path && formik_esm.propertyExpr.getter(this.path, true);
    this.map = options.map;
  }

  getValue(value, parent, context) {
    let result = this.isContext ? context : this.isValue ? value : parent;
    if (this.getter) result = this.getter(result || {});
    if (this.map) result = this.map(result);
    return result;
  }
  /**
   *
   * @param {*} value
   * @param {Object} options
   * @param {Object=} options.context
   * @param {Object=} options.parent
   */


  cast(value, options) {
    return this.getValue(value, options == null ? void 0 : options.parent, options == null ? void 0 : options.context);
  }

  resolve() {
    return this;
  }

  describe() {
    return {
      type: 'ref',
      key: this.key
    };
  }

  toString() {
    return `Ref(${this.key})`;
  }

  static isRef(value) {
    return value && value.__isYupRef;
  }

} // @ts-ignore

Reference.prototype.__isYupRef = true;

function _extends$1() { _extends$1 = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends$1.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function createValidation(config) {
  function validate(_ref, cb) {
    let {
      value,
      path = '',
      label,
      options,
      originalValue,
      sync
    } = _ref,
        rest = _objectWithoutPropertiesLoose(_ref, ["value", "path", "label", "options", "originalValue", "sync"]);

    const {
      name,
      test,
      params,
      message
    } = config;
    let {
      parent,
      context
    } = options;

    function resolve(item) {
      return Reference.isRef(item) ? item.getValue(value, parent, context) : item;
    }

    function createError(overrides = {}) {
      const nextParams = formik_esm.mapValues_1(_extends$1({
        value,
        originalValue,
        label,
        path: overrides.path || path
      }, params, overrides.params), resolve);
      const error = new ValidationError(ValidationError.formatError(overrides.message || message, nextParams), value, nextParams.path, overrides.type || name);
      error.params = nextParams;
      return error;
    }

    let ctx = _extends$1({
      path,
      parent,
      type: name,
      createError,
      resolve,
      options,
      originalValue
    }, rest);

    if (!sync) {
      try {
        Promise.resolve(test.call(ctx, value, ctx)).then(validOrError => {
          if (ValidationError.isError(validOrError)) cb(validOrError);else if (!validOrError) cb(createError());else cb(null, validOrError);
        });
      } catch (err) {
        cb(err);
      }

      return;
    }

    let result;

    try {
      var _ref2;

      result = test.call(ctx, value, ctx);

      if (typeof ((_ref2 = result) == null ? void 0 : _ref2.then) === 'function') {
        throw new Error(`Validation test of type: "${ctx.type}" returned a Promise during a synchronous validate. ` + `This test will finish after the validate call has returned`);
      }
    } catch (err) {
      cb(err);
      return;
    }

    if (ValidationError.isError(result)) cb(result);else if (!result) cb(createError());else cb(null, result);
  }

  validate.OPTIONS = config;
  return validate;
}

let trim = part => part.substr(0, part.length - 1).substr(1);

function getIn(schema, path, value, context = value) {
  let parent, lastPart, lastPartDebug; // root path: ''

  if (!path) return {
    parent,
    parentPath: path,
    schema
  };
  formik_esm.propertyExpr.forEach(path, (_part, isBracket, isArray) => {
    let part = isBracket ? trim(_part) : _part;
    schema = schema.resolve({
      context,
      parent,
      value
    });

    if (schema.innerType) {
      let idx = isArray ? parseInt(part, 10) : 0;

      if (value && idx >= value.length) {
        throw new Error(`Yup.reach cannot resolve an array item at index: ${_part}, in the path: ${path}. ` + `because there is no value at that index. `);
      }

      parent = value;
      value = value && value[idx];
      schema = schema.innerType;
    } // sometimes the array index part of a path doesn't exist: "nested.arr.child"
    // in these cases the current part is the next schema and should be processed
    // in this iteration. For cases where the index signature is included this
    // check will fail and we'll handle the `child` part on the next iteration like normal


    if (!isArray) {
      if (!schema.fields || !schema.fields[part]) throw new Error(`The schema does not contain the path: ${path}. ` + `(failed at: ${lastPartDebug} which is a type: "${schema._type}")`);
      parent = value;
      value = value && value[part];
      schema = schema.fields[part];
    }

    lastPart = part;
    lastPartDebug = isBracket ? '[' + _part + ']' : '.' + _part;
  });
  return {
    schema,
    parent,
    parentPath: lastPart
  };
}

class ReferenceSet {
  constructor() {
    this.list = new Set();
    this.refs = new Map();
  }

  get size() {
    return this.list.size + this.refs.size;
  }

  describe() {
    const description = [];

    for (const item of this.list) description.push(item);

    for (const [, ref] of this.refs) description.push(ref.describe());

    return description;
  }

  toArray() {
    return Array.from(this.list).concat(Array.from(this.refs.values()));
  }

  add(value) {
    Reference.isRef(value) ? this.refs.set(value.key, value) : this.list.add(value);
  }

  delete(value) {
    Reference.isRef(value) ? this.refs.delete(value.key) : this.list.delete(value);
  }

  has(value, resolve) {
    if (this.list.has(value)) return true;
    let item,
        values = this.refs.values();

    while (item = values.next(), !item.done) if (resolve(item.value) === value) return true;

    return false;
  }

  clone() {
    const next = new ReferenceSet();
    next.list = new Set(this.list);
    next.refs = new Map(this.refs);
    return next;
  }

  merge(newItems, removeItems) {
    const next = this.clone();
    newItems.list.forEach(value => next.add(value));
    newItems.refs.forEach(value => next.add(value));
    removeItems.list.forEach(value => next.delete(value));
    removeItems.refs.forEach(value => next.delete(value));
    return next;
  }

}

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
class BaseSchema {
  constructor(options) {
    this.deps = [];
    this.conditions = [];
    this._whitelist = new ReferenceSet();
    this._blacklist = new ReferenceSet();
    this.exclusiveTests = Object.create(null);
    this.tests = [];
    this.transforms = [];
    this.withMutation(() => {
      this.typeError(mixed.notType);
    });
    this.type = (options == null ? void 0 : options.type) || 'mixed';
    this.spec = _extends({
      strip: false,
      strict: false,
      abortEarly: true,
      recursive: true,
      label: undefined,
      meta: undefined,
      nullable: false,
      presence: 'optional'
    }, options == null ? void 0 : options.spec);
  } // TODO: remove


  get _type() {
    return this.type;
  }

  _typeCheck(_value) {
    return true;
  }

  clone(spec) {
    if (this._mutate) {
      if (spec) Object.assign(this.spec, spec);
      return this;
    } // if the nested value is a schema we can skip cloning, since
    // they are already immutable


    const next = Object.create(Object.getPrototypeOf(this)); // @ts-expect-error this is readonly

    next.type = this.type;
    next._typeError = this._typeError;
    next._whitelistError = this._whitelistError;
    next._blacklistError = this._blacklistError;
    next._whitelist = this._whitelist.clone();
    next._blacklist = this._blacklist.clone();
    next.exclusiveTests = _extends({}, this.exclusiveTests); // @ts-expect-error this is readonly

    next.deps = [...this.deps];
    next.conditions = [...this.conditions];
    next.tests = [...this.tests];
    next.transforms = [...this.transforms];
    next.spec = formik_esm.clone(_extends({}, this.spec, spec));
    return next;
  }

  label(label) {
    var next = this.clone();
    next.spec.label = label;
    return next;
  }

  meta(...args) {
    if (args.length === 0) return this.spec.meta;
    let next = this.clone();
    next.spec.meta = Object.assign(next.spec.meta || {}, args[0]);
    return next;
  } // withContext<TContext extends AnyObject>(): BaseSchema<
  //   TCast,
  //   TContext,
  //   TOutput
  // > {
  //   return this as any;
  // }


  withMutation(fn) {
    let before = this._mutate;
    this._mutate = true;
    let result = fn(this);
    this._mutate = before;
    return result;
  }

  concat(schema) {
    if (!schema || schema === this) return this;
    if (schema.type !== this.type && this.type !== 'mixed') throw new TypeError(`You cannot \`concat()\` schema's of different types: ${this.type} and ${schema.type}`);
    let base = this;
    let combined = schema.clone();

    const mergedSpec = _extends({}, base.spec, combined.spec); // if (combined.spec.nullable === UNSET)
    //   mergedSpec.nullable = base.spec.nullable;
    // if (combined.spec.presence === UNSET)
    //   mergedSpec.presence = base.spec.presence;


    combined.spec = mergedSpec;
    combined._typeError || (combined._typeError = base._typeError);
    combined._whitelistError || (combined._whitelistError = base._whitelistError);
    combined._blacklistError || (combined._blacklistError = base._blacklistError); // manually merge the blacklist/whitelist (the other `schema` takes
    // precedence in case of conflicts)

    combined._whitelist = base._whitelist.merge(schema._whitelist, schema._blacklist);
    combined._blacklist = base._blacklist.merge(schema._blacklist, schema._whitelist); // start with the current tests

    combined.tests = base.tests;
    combined.exclusiveTests = base.exclusiveTests; // manually add the new tests to ensure
    // the deduping logic is consistent

    combined.withMutation(next => {
      schema.tests.forEach(fn => {
        next.test(fn.OPTIONS);
      });
    });
    return combined;
  }

  isType(v) {
    if (this.spec.nullable && v === null) return true;
    return this._typeCheck(v);
  }

  resolve(options) {
    let schema = this;

    if (schema.conditions.length) {
      let conditions = schema.conditions;
      schema = schema.clone();
      schema.conditions = [];
      schema = conditions.reduce((schema, condition) => condition.resolve(schema, options), schema);
      schema = schema.resolve(options);
    }

    return schema;
  }
  /**
   *
   * @param {*} value
   * @param {Object} options
   * @param {*=} options.parent
   * @param {*=} options.context
   */


  cast(value, options = {}) {
    let resolvedSchema = this.resolve(_extends({
      value
    }, options));

    let result = resolvedSchema._cast(value, options);

    if (value !== undefined && options.assert !== false && resolvedSchema.isType(result) !== true) {
      let formattedValue = printValue(value);
      let formattedResult = printValue(result);
      throw new TypeError(`The value of ${options.path || 'field'} could not be cast to a value ` + `that satisfies the schema type: "${resolvedSchema._type}". \n\n` + `attempted value: ${formattedValue} \n` + (formattedResult !== formattedValue ? `result of cast: ${formattedResult}` : ''));
    }

    return result;
  }

  _cast(rawValue, _options) {
    let value = rawValue === undefined ? rawValue : this.transforms.reduce((value, fn) => fn.call(this, value, rawValue, this), rawValue);

    if (value === undefined) {
      value = this.getDefault();
    }

    return value;
  }

  _validate(_value, options = {}, cb) {
    let {
      sync,
      path,
      from = [],
      originalValue = _value,
      strict = this.spec.strict,
      abortEarly = this.spec.abortEarly
    } = options;
    let value = _value;

    if (!strict) {
      // this._validating = true;
      value = this._cast(value, _extends({
        assert: false
      }, options)); // this._validating = false;
    } // value is cast, we can check if it meets type requirements


    let args = {
      value,
      path,
      options,
      originalValue,
      schema: this,
      label: this.spec.label,
      sync,
      from
    };
    let initialTests = [];
    if (this._typeError) initialTests.push(this._typeError);
    if (this._whitelistError) initialTests.push(this._whitelistError);
    if (this._blacklistError) initialTests.push(this._blacklistError);
    runTests({
      args,
      value,
      path,
      sync,
      tests: initialTests,
      endEarly: abortEarly
    }, err => {
      if (err) return void cb(err, value);
      runTests({
        tests: this.tests,
        args,
        path,
        sync,
        value,
        endEarly: abortEarly
      }, cb);
    });
  }

  validate(value, options, maybeCb) {
    let schema = this.resolve(_extends({}, options, {
      value
    })); // callback case is for nested validations

    return typeof maybeCb === 'function' ? schema._validate(value, options, maybeCb) : new Promise((resolve, reject) => schema._validate(value, options, (err, value) => {
      if (err) reject(err);else resolve(value);
    }));
  }

  validateSync(value, options) {
    let schema = this.resolve(_extends({}, options, {
      value
    }));
    let result;

    schema._validate(value, _extends({}, options, {
      sync: true
    }), (err, value) => {
      if (err) throw err;
      result = value;
    });

    return result;
  }

  isValid(value, options) {
    return this.validate(value, options).then(() => true, err => {
      if (ValidationError.isError(err)) return false;
      throw err;
    });
  }

  isValidSync(value, options) {
    try {
      this.validateSync(value, options);
      return true;
    } catch (err) {
      if (ValidationError.isError(err)) return false;
      throw err;
    }
  }

  _getDefault() {
    let defaultValue = this.spec.default;

    if (defaultValue == null) {
      return defaultValue;
    }

    return typeof defaultValue === 'function' ? defaultValue.call(this) : formik_esm.clone(defaultValue);
  }

  getDefault(options) {
    let schema = this.resolve(options || {});
    return schema._getDefault();
  }

  default(def) {
    if (arguments.length === 0) {
      return this._getDefault();
    }

    let next = this.clone({
      default: def
    });
    return next;
  }

  strict(isStrict = true) {
    var next = this.clone();
    next.spec.strict = isStrict;
    return next;
  }

  _isPresent(value) {
    return value != null;
  }

  defined(message = mixed.defined) {
    return this.test({
      message,
      name: 'defined',
      exclusive: true,

      test(value) {
        return value !== undefined;
      }

    });
  }

  required(message = mixed.required) {
    return this.clone({
      presence: 'required'
    }).withMutation(s => s.test({
      message,
      name: 'required',
      exclusive: true,

      test(value) {
        return this.schema._isPresent(value);
      }

    }));
  }

  notRequired() {
    var next = this.clone({
      presence: 'optional'
    });
    next.tests = next.tests.filter(test => test.OPTIONS.name !== 'required');
    return next;
  }

  nullable(isNullable = true) {
    var next = this.clone({
      nullable: isNullable !== false
    });
    return next;
  }

  transform(fn) {
    var next = this.clone();
    next.transforms.push(fn);
    return next;
  }
  /**
   * Adds a test function to the schema's queue of tests.
   * tests can be exclusive or non-exclusive.
   *
   * - exclusive tests, will replace any existing tests of the same name.
   * - non-exclusive: can be stacked
   *
   * If a non-exclusive test is added to a schema with an exclusive test of the same name
   * the exclusive test is removed and further tests of the same name will be stacked.
   *
   * If an exclusive test is added to a schema with non-exclusive tests of the same name
   * the previous tests are removed and further tests of the same name will replace each other.
   */


  test(...args) {
    let opts;

    if (args.length === 1) {
      if (typeof args[0] === 'function') {
        opts = {
          test: args[0]
        };
      } else {
        opts = args[0];
      }
    } else if (args.length === 2) {
      opts = {
        name: args[0],
        test: args[1]
      };
    } else {
      opts = {
        name: args[0],
        message: args[1],
        test: args[2]
      };
    }

    if (opts.message === undefined) opts.message = mixed.default;
    if (typeof opts.test !== 'function') throw new TypeError('`test` is a required parameters');
    let next = this.clone();
    let validate = createValidation(opts);
    let isExclusive = opts.exclusive || opts.name && next.exclusiveTests[opts.name] === true;

    if (opts.exclusive) {
      if (!opts.name) throw new TypeError('Exclusive tests must provide a unique `name` identifying the test');
    }

    if (opts.name) next.exclusiveTests[opts.name] = !!opts.exclusive;
    next.tests = next.tests.filter(fn => {
      if (fn.OPTIONS.name === opts.name) {
        if (isExclusive) return false;
        if (fn.OPTIONS.test === validate.OPTIONS.test) return false;
      }

      return true;
    });
    next.tests.push(validate);
    return next;
  }

  when(keys, options) {
    if (!Array.isArray(keys) && typeof keys !== 'string') {
      options = keys;
      keys = '.';
    }

    let next = this.clone();
    let deps = toArray(keys).map(key => new Reference(key));
    deps.forEach(dep => {
      // @ts-ignore
      if (dep.isSibling) next.deps.push(dep.key);
    });
    next.conditions.push(new Condition(deps, options));
    return next;
  }

  typeError(message) {
    var next = this.clone();
    next._typeError = createValidation({
      message,
      name: 'typeError',

      test(value) {
        if (value !== undefined && !this.schema.isType(value)) return this.createError({
          params: {
            type: this.schema._type
          }
        });
        return true;
      }

    });
    return next;
  }

  oneOf(enums, message = mixed.oneOf) {
    var next = this.clone();
    enums.forEach(val => {
      next._whitelist.add(val);

      next._blacklist.delete(val);
    });
    next._whitelistError = createValidation({
      message,
      name: 'oneOf',

      test(value) {
        if (value === undefined) return true;
        let valids = this.schema._whitelist;
        return valids.has(value, this.resolve) ? true : this.createError({
          params: {
            values: valids.toArray().join(', ')
          }
        });
      }

    });
    return next;
  }

  notOneOf(enums, message = mixed.notOneOf) {
    var next = this.clone();
    enums.forEach(val => {
      next._blacklist.add(val);

      next._whitelist.delete(val);
    });
    next._blacklistError = createValidation({
      message,
      name: 'notOneOf',

      test(value) {
        let invalids = this.schema._blacklist;
        if (invalids.has(value, this.resolve)) return this.createError({
          params: {
            values: invalids.toArray().join(', ')
          }
        });
        return true;
      }

    });
    return next;
  }

  strip(strip = true) {
    let next = this.clone();
    next.spec.strip = strip;
    return next;
  }

  describe() {
    const next = this.clone();
    const {
      label,
      meta
    } = next.spec;
    const description = {
      meta,
      label,
      type: next.type,
      oneOf: next._whitelist.describe(),
      notOneOf: next._blacklist.describe(),
      tests: next.tests.map(fn => ({
        name: fn.OPTIONS.name,
        params: fn.OPTIONS.params
      })).filter((n, idx, list) => list.findIndex(c => c.name === n.name) === idx)
    };
    return description;
  }

}
// @ts-expect-error
BaseSchema.prototype.__isYupSchema__ = true;

for (const method of ['validate', 'validateSync']) BaseSchema.prototype[`${method}At`] = function (path, value, options = {}) {
  const {
    parent,
    parentPath,
    schema
  } = getIn(this, path, value, options.context);
  return schema[method](parent && parent[parentPath], _extends({}, options, {
    parent,
    path
  }));
};

for (const alias of ['equals', 'is']) BaseSchema.prototype[alias] = BaseSchema.prototype.oneOf;

for (const alias of ['not', 'nope']) BaseSchema.prototype[alias] = BaseSchema.prototype.notOneOf;

BaseSchema.prototype.optional = BaseSchema.prototype.notRequired;

var isAbsent = (value => value == null);

let rEmail = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i; // eslint-disable-next-line

let rUrl = /^((https?|ftp):)?\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i; // eslint-disable-next-line

let rUUID = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

let isTrimmed = value => isAbsent(value) || value === value.trim();

let objStringTag = {}.toString();
function create() {
  return new StringSchema();
}
class StringSchema extends BaseSchema {
  constructor() {
    super({
      type: 'string'
    });
    this.withMutation(() => {
      this.transform(function (value) {
        if (this.isType(value)) return value;
        if (Array.isArray(value)) return value;
        const strValue = value != null && value.toString ? value.toString() : value;
        if (strValue === objStringTag) return value;
        return strValue;
      });
    });
  }

  _typeCheck(value) {
    if (value instanceof String) value = value.valueOf();
    return typeof value === 'string';
  }

  _isPresent(value) {
    return super._isPresent(value) && !!value.length;
  }

  length(length, message = string.length) {
    return this.test({
      message,
      name: 'length',
      exclusive: true,
      params: {
        length
      },

      test(value) {
        return isAbsent(value) || value.length === this.resolve(length);
      }

    });
  }

  min(min, message = string.min) {
    return this.test({
      message,
      name: 'min',
      exclusive: true,
      params: {
        min
      },

      test(value) {
        return isAbsent(value) || value.length >= this.resolve(min);
      }

    });
  }

  max(max, message = string.max) {
    return this.test({
      name: 'max',
      exclusive: true,
      message,
      params: {
        max
      },

      test(value) {
        return isAbsent(value) || value.length <= this.resolve(max);
      }

    });
  }

  matches(regex, options) {
    let excludeEmptyString = false;
    let message;
    let name;

    if (options) {
      if (typeof options === 'object') {
        ({
          excludeEmptyString = false,
          message,
          name
        } = options);
      } else {
        message = options;
      }
    }

    return this.test({
      name: name || 'matches',
      message: message || string.matches,
      params: {
        regex
      },
      test: value => isAbsent(value) || value === '' && excludeEmptyString || value.search(regex) !== -1
    });
  }

  email(message = string.email) {
    return this.matches(rEmail, {
      name: 'email',
      message,
      excludeEmptyString: true
    });
  }

  url(message = string.url) {
    return this.matches(rUrl, {
      name: 'url',
      message,
      excludeEmptyString: true
    });
  }

  uuid(message = string.uuid) {
    return this.matches(rUUID, {
      name: 'uuid',
      message,
      excludeEmptyString: false
    });
  } //-- transforms --


  ensure() {
    return this.default('').transform(val => val === null ? '' : val);
  }

  trim(message = string.trim) {
    return this.transform(val => val != null ? val.trim() : val).test({
      message,
      name: 'trim',
      test: isTrimmed
    });
  }

  lowercase(message = string.lowercase) {
    return this.transform(value => !isAbsent(value) ? value.toLowerCase() : value).test({
      message,
      name: 'string_case',
      exclusive: true,
      test: value => isAbsent(value) || value === value.toLowerCase()
    });
  }

  uppercase(message = string.uppercase) {
    return this.transform(value => !isAbsent(value) ? value.toUpperCase() : value).test({
      message,
      name: 'string_case',
      exclusive: true,
      test: value => isAbsent(value) || value === value.toUpperCase()
    });
  }

}
create.prototype = StringSchema.prototype; //
// String Interfaces
//

/* eslint-disable */

/**
 *
 * Date.parse with progressive enhancement for ISO 8601 <https://github.com/csnover/js-iso8601>
 * NON-CONFORMANT EDITION.
 * © 2011 Colin Snover <http://zetafleet.com>
 * Released under MIT license.
 */
//              1 YYYY                 2 MM        3 DD              4 HH     5 mm        6 ss            7 msec         8 Z 9 ±    10 tzHH    11 tzmm
var isoReg = /^(\d{4}|[+\-]\d{6})(?:-?(\d{2})(?:-?(\d{2}))?)?(?:[ T]?(\d{2}):?(\d{2})(?::?(\d{2})(?:[,\.](\d{1,}))?)?(?:(Z)|([+\-])(\d{2})(?::?(\d{2}))?)?)?$/;
function parseIsoDate(date) {
  var numericKeys = [1, 4, 5, 6, 7, 10, 11],
      minutesOffset = 0,
      timestamp,
      struct;

  if (struct = isoReg.exec(date)) {
    // avoid NaN timestamps caused by “undefined” values being passed to Date.UTC
    for (var i = 0, k; k = numericKeys[i]; ++i) struct[k] = +struct[k] || 0; // allow undefined days and months


    struct[2] = (+struct[2] || 1) - 1;
    struct[3] = +struct[3] || 1; // allow arbitrary sub-second precision beyond milliseconds

    struct[7] = struct[7] ? String(struct[7]).substr(0, 3) : 0; // timestamps without timezone identifiers should be considered local time

    if ((struct[8] === undefined || struct[8] === '') && (struct[9] === undefined || struct[9] === '')) timestamp = +new Date(struct[1], struct[2], struct[3], struct[4], struct[5], struct[6], struct[7]);else {
      if (struct[8] !== 'Z' && struct[9] !== undefined) {
        minutesOffset = struct[10] * 60 + struct[11];
        if (struct[9] === '+') minutesOffset = 0 - minutesOffset;
      }

      timestamp = Date.UTC(struct[1], struct[2], struct[3], struct[4], struct[5] + minutesOffset, struct[6], struct[7]);
    }
  } else timestamp = Date.parse ? Date.parse(date) : NaN;

  return timestamp;
}

// @ts-ignore
let invalidDate = new Date('');

let isDate = obj => Object.prototype.toString.call(obj) === '[object Date]';
class DateSchema extends BaseSchema {
  constructor() {
    super({
      type: 'date'
    });
    this.withMutation(() => {
      this.transform(function (value) {
        if (this.isType(value)) return value;
        value = parseIsoDate(value); // 0 is a valid timestamp equivalent to 1970-01-01T00:00:00Z(unix epoch) or before.

        return !isNaN(value) ? new Date(value) : invalidDate;
      });
    });
  }

  _typeCheck(v) {
    return isDate(v) && !isNaN(v.getTime());
  }

  prepareParam(ref, name) {
    let param;

    if (!Reference.isRef(ref)) {
      let cast = this.cast(ref);
      if (!this._typeCheck(cast)) throw new TypeError(`\`${name}\` must be a Date or a value that can be \`cast()\` to a Date`);
      param = cast;
    } else {
      param = ref;
    }

    return param;
  }

  min(min, message = date.min) {
    let limit = this.prepareParam(min, 'min');
    return this.test({
      message,
      name: 'min',
      exclusive: true,
      params: {
        min
      },

      test(value) {
        return isAbsent(value) || value >= this.resolve(limit);
      }

    });
  }

  max(max, message = date.max) {
    var limit = this.prepareParam(max, 'max');
    return this.test({
      message,
      name: 'max',
      exclusive: true,
      params: {
        max
      },

      test(value) {
        return isAbsent(value) || value <= this.resolve(limit);
      }

    });
  }

}
DateSchema.INVALID_DATE = invalidDate;

const useT = (root) => {
    const { t } = formik_esm.useTranslation();
    return FronteggApp.react.exports.useCallback((key, options, defaultValue) => {
        return t(`loginBox.${root}.${key}`, options, defaultValue);
    }, [t]);
};
const useGlobalT = () => {
    const { t } = formik_esm.useTranslation();
    return FronteggApp.react.exports.useCallback((key, options, defaultValue) => {
        return t(key, options, defaultValue);
    }, [t]);
};
const useContextT = (context) => {
    const { t } = formik_esm.useTranslation();
    return FronteggApp.react.exports.useCallback((key, options, defaultValue) => {
        return t(`${context}.${key}`, options, defaultValue);
    }, [t]);
};
const defaultPasswordConfig = {
    allowPassphrases: true,
    maxLength: 128,
    minLength: 6,
    minOptionalTestsToPass: 1,
    minPhraseLength: 6,
};
const IDENTITY_CONFIGURATION_SERVICE_URL_V1 = '/identity/resources/configurations/v1';
const usePasswordConfig = (userId) => {
    const { setForgotPasswordState, loadPasswordConfig } = formik_esm.useForgotPasswordActions();
    const { passwordConfig, loading } = formik_esm.useForgotPasswordState();
    const { builderMode } = formik_esm.useShadowDom();
    FronteggApp.react.exports.useEffect(() => {
        if (loading) {
            return;
        }
        if (!passwordConfig) {
            if (userId || builderMode) {
                loadPasswordConfig({ userId: userId !== null && userId !== void 0 ? userId : 'demo-user' });
            }
            else {
                // TODO: to be replaced with loadPublicPasswordConfig
                restApi.fetch.Get(`${IDENTITY_CONFIGURATION_SERVICE_URL_V1}/password`).then((data) => FronteggApp.__awaiter(void 0, void 0, void 0, function* () {
                    setForgotPasswordState({ loading: false, passwordConfig: data });
                })).catch(e => {
                    setForgotPasswordState({ loading: false, passwordConfig: defaultPasswordConfig });
                });
            }
        }
    }, [loading, passwordConfig, setForgotPasswordState, loadPasswordConfig]);
    const passwordServerConfig = Object.assign(Object.assign({}, defaultPasswordConfig), passwordConfig);
    const strength = passwordServerConfig.minLength <= 6 ? 'easy' : passwordServerConfig.minLength <= 8 ? 'medium' : 'hard';
    return {
        loading,
        passwordConfig: loading && !passwordConfig ? defaultPasswordConfig : passwordServerConfig,
        defaultPasswordConfig,
        strength,
    };
};
const useRecaptcha = ({ action, recaptchaRef, onTokenLoad }) => {
    var _a, _b, _c, _d;
    const { loadSecurityPolicyCaptcha } = formik_esm.useSecurityPolicyActions();
    const { captchaPolicy } = formik_esm.useSecurityPolicyState();
    const [token, setToken] = FronteggApp.react.exports.useState('');
    const timer = FronteggApp.react.exports.useRef(null);
    FronteggApp.react.exports.useEffect(() => {
        !captchaPolicy.policy && loadSecurityPolicyCaptcha();
    }, [captchaPolicy.policy, loadSecurityPolicyCaptcha]);
    FronteggApp.react.exports.useEffect(() => {
        var _a;
        if ((_a = captchaPolicy.policy) === null || _a === void 0 ? void 0 : _a.enabled)
            dist.loadReCaptcha(captchaPolicy.policy.siteKey || '');
    }, [(_a = captchaPolicy.policy) === null || _a === void 0 ? void 0 : _a.enabled, (_b = captchaPolicy.policy) === null || _b === void 0 ? void 0 : _b.siteKey]);
    const handleCallback = FronteggApp.react.exports.useCallback((token) => {
        setToken(token);
        onTokenLoad === null || onTokenLoad === void 0 ? void 0 : onTokenLoad(token);
        timer.current && clearTimeout(timer.current);
        timer.current = setTimeout(() => {
            var _a;
            if ((_a = captchaPolicy.policy) === null || _a === void 0 ? void 0 : _a.enabled) {
                dist.loadReCaptcha(captchaPolicy.policy.siteKey || '');
            }
        }, 60 * 1000);
    }, [setToken, dist.loadReCaptcha, captchaPolicy, onTokenLoad]);
    // clear timeout on unmount
    FronteggApp.react.exports.useCallback(() => () => timer.current && clearTimeout(timer.current), []);
    if (!((_c = captchaPolicy.policy) === null || _c === void 0 ? void 0 : _c.enabled))
        return null;
    return {
        token,
        component: FronteggApp.React.createElement(dist.ReCaptcha, { sitekey: (_d = captchaPolicy.policy) === null || _d === void 0 ? void 0 : _d.siteKey, ref: recaptchaRef, verifyCallback: handleCallback, action: action }),
    };
};
const useVerifyInviteToken = () => {
    var _a;
    const url = new URL(window.location.href);
    const invitationToken = (_a = url.searchParams.get('invitationToken')) !== null && _a !== void 0 ? _a : '';
    const { verifyInviteToken } = formik_esm.useLoginActions();
    const { inviteTokenTenantName, inviteTokenError } = formik_esm.useLoginState(({ inviteTokenTenantName, inviteTokenError }) => ({
        inviteTokenTenantName,
        inviteTokenError,
    }));
    const loadingVerifyInviteToken = FronteggApp.react.exports.useMemo(() => !!invitationToken && (!inviteTokenTenantName && !inviteTokenError), [inviteTokenTenantName, inviteTokenError]);
    FronteggApp.react.exports.useEffect(() => {
        invitationToken && verifyInviteToken({ token: invitationToken });
    }, [invitationToken, verifyInviteToken]);
    return { invitationToken, loading: loadingVerifyInviteToken };
};
const useQueryParams = (...keys) => {
    const params = new URLSearchParams(window.location.search);
    const result = {};
    keys.forEach((key) => {
        result[key] = params.get(key);
    });
    return result;
};
const setTtlInterval = (cb, delay) => {
    const maxTtlForInterval = Math.pow(2, 31) - 1;
    const timesArray = [];
    for (let i = delay; i > 0; i -= maxTtlForInterval) {
        if (i > maxTtlForInterval) {
            timesArray.push(maxTtlForInterval);
        }
        else {
            timesArray.push(i);
        }
    }
    let counter = 0;
    return setInterval((...args) => {
        counter++;
        if (timesArray.length <= counter) {
            counter = 0;
            cb(...args);
        }
    }, ...timesArray);
};
const useHideRecaptcha = () => {
    const hideRecaptcha = (element) => {
        if (!!element) {
            element.style.visibility = 'hidden';
        }
    };
    return [hideRecaptcha];
};

const redirectIfFronteggPath = (_routes, basename, urlStrategy, path, opts) => {
    const routes = FronteggApp.__rest(_routes, ["authenticatedUrl", "signUpSuccessUrl"]);
    if (path === '/') {
        return false;
    }
    const fronteggPath = Object.values(routes).find((p) => p.startsWith(path));
    if (!fronteggPath) {
        return false;
    }
    const calculatedBasename = basename ? (basename.endsWith('/') ? basename.substring(0, basename.length - 1) : '') : '';
    let newPath = calculatedBasename + path;
    if (opts === null || opts === void 0 ? void 0 : opts.preserveQueryParams) {
        newPath += window.location.search;
    }
    if (urlStrategy === 'path') {
        window.history.pushState(null, '', newPath);
    }
    else {
        window.history.pushState(null, '', `#${newPath}`);
    }
    return true;
};
const useIdleTimeout = () => {
    const events = ['mousemove', 'scroll', 'keydown'];
    const { loadSessionsPolicy } = formik_esm.useSessionsPolicyActions();
    const { configurations } = formik_esm.useSessionsPolicyState();
    const { logout } = formik_esm.useAuthActions();
    const isAuthenticated = formik_esm.useIsAuthenticated();
    FronteggApp.react.exports.useEffect(() => {
        isAuthenticated && loadSessionsPolicy();
    }, [isAuthenticated, loadSessionsPolicy]);
    const isIdleTimeoutActive = FronteggApp.react.exports.useMemo(() => { var _a, _b; return isAuthenticated && !!((_a = configurations.sessionIdleTimeoutConfiguration) === null || _a === void 0 ? void 0 : _a.timeout) && !!((_b = configurations.sessionIdleTimeoutConfiguration) === null || _b === void 0 ? void 0 : _b.isActive); }, [configurations, isAuthenticated]);
    FronteggApp.react.exports.useEffect(() => {
        let idleTimeout;
        if (isIdleTimeoutActive) {
            const timeout = configurations.sessionIdleTimeoutConfiguration.timeout * 1000;
            idleTimeout = setTimeout(() => logout(), timeout);
            events.forEach(event => {
                window.addEventListener(event, () => {
                    clearTimeout(idleTimeout);
                    idleTimeout = setTimeout(() => logout(), timeout);
                });
            });
        }
        return () => {
            clearTimeout(idleTimeout);
        };
    }, [isIdleTimeoutActive, configurations]);
};
const StoreListener = () => {
    var _a;
    const timer = FronteggApp.react.exports.useRef(0);
    const { previewMode, builderMode, contextOptions, basename, urlStrategy, onRedirectTo: onRedirectToProp, hostedLoginBox, framework, } = formik_esm.useShadowDom();
    const routes = formik_esm.useAuthRoutes();
    const { setState: setAuthState, logout } = formik_esm.useAuthActions();
    const isAuthenticated = formik_esm.useIsAuthenticated();
    const { keepSessionAlive } = formik_esm.useAuth(({ keepSessionAlive }) => ({ keepSessionAlive }));
    const user = formik_esm.useAuthUserOrNull();
    const { requestAuthorize } = formik_esm.useLoginActions();
    useIdleTimeout();
    const updateSessionTimer = FronteggApp.react.exports.useCallback(() => {
        timer.current && clearInterval(timer.current);
        if (isAuthenticated) {
            if (keepSessionAlive) {
                const ttl = ((user === null || user === void 0 ? void 0 : user.expiresIn) || 20) * 1000 * 0.8;
                timer.current = setTtlInterval(() => requestAuthorize(), ttl);
            }
            else {
                const ttl = ((user === null || user === void 0 ? void 0 : user.expiresIn) || 20) * 1000;
                timer.current = setTtlInterval(() => logout(), ttl);
            }
        }
    }, [keepSessionAlive, isAuthenticated, logout, requestAuthorize, user === null || user === void 0 ? void 0 : user.expiresIn]);
    if (!builderMode && !previewMode) {
        restApi.ContextHolder.setAccessToken((_a = user === null || user === void 0 ? void 0 : user.accessToken) !== null && _a !== void 0 ? _a : '');
        restApi.ContextHolder.setUser(user);
        restApi.ContextHolder.setContext(contextOptions);
    }
    const onRedirectTo = FronteggApp.react.exports.useCallback((path, opts) => {
        document.dispatchEvent(new CustomEvent('frontegg_onRedirectTo_fired'));
        if (redirectIfFronteggPath(routes, basename, urlStrategy, path, opts)) {
            return;
        }
        else if (onRedirectToProp && !path.startsWith('http')) {
            onRedirectToProp(path, opts);
        }
        else {
            if (opts === null || opts === void 0 ? void 0 : opts.preserveQueryParams) {
                path = `${path}${window.location.search}`;
            }
            if (urlStrategy === 'path' || path.startsWith('http')) {
                window.location.href = path;
            }
            else {
                window.location.href = `${window.location.pathname}#${path}`;
            }
        }
    }, [basename, urlStrategy, routes, onRedirectToProp]);
    FronteggApp.react.exports.useEffect(() => {
        setAuthState({ onRedirectTo });
        restApi.ContextHolder.setOnRedirectTo(onRedirectTo);
    }, [onRedirectTo, setAuthState]);
    FronteggApp.react.exports.useEffect(() => {
        if (hostedLoginBox && framework !== 'nextjs') {
            setAuthState({ isLoading: false });
        }
    }, [framework, setAuthState, hostedLoginBox]);
    FronteggApp.react.exports.useEffect(() => {
        updateSessionTimer();
    }, [updateSessionTimer, isAuthenticated]);
    return null;
};

const dsn = "https://0b39f7899e9e402cac3d7a15c51528bb@o362363.ingest.sentry.io/6234067";
const AppLayout = ({ children }) => {
    const { injector, customStyles } = formik_esm.useShadowDom();
    return FronteggApp.React.createElement(formik_esm.Provider, { context: formik_esm.FronteggStoreContext, store: injector.store },
        FronteggApp.React.createElement(StoreListener, null),
        customStyles && FronteggApp.React.createElement("style", { type: 'text/css', dangerouslySetInnerHTML: { __html: customStyles } }),
        children);
};
const App = ({ children }) => {
    var _a;
    const { isShadowDom, injector } = formik_esm.useShadowDom();
    if ((_a = injector.options) === null || _a === void 0 ? void 0 : _a.tracing) {
        init({
            dsn,
            integrations: [
                new BrowserTracing(),
                new CaptureConsole({
                    levels: ['error'],
                })
            ],
            tracesSampleRate: 1.0,
        });
    }
    const { calculatedTheme, theme, overrides } = formik_esm.initGlobalTheme();
    return FronteggApp.React.createElement(formik_esm.I18nProvider$1, null,
        FronteggApp.React.createElement(formik_esm.GlobalThemeProvider, { theme: calculatedTheme, isShadowDom: isShadowDom, module: formik_esm.FronteggModules.loginBox },
            FronteggApp.React.createElement(formik_esm.ThemeContext.Provider, { value: { theme, overrides } },
                FronteggApp.React.createElement(formik_esm.InnerThemeProvider, { themeOptionKey: 'loginBox' },
                    FronteggApp.React.createElement(AppLayout, null, children)))));
};

const ThemeOptionKeyContext = FronteggApp.react.exports.createContext('');
const useThemeOptionKey = () => FronteggApp.react.exports.useContext(ThemeOptionKeyContext);
var ThemeOptionKeyContext$1 = ThemeOptionKeyContext;

const styled$7 = _default();
const buildLayout = (theme) => {
    var _a, _b;
    const layoutType = (_b = (_a = theme.layout) === null || _a === void 0 ? void 0 : _a.type) !== null && _b !== void 0 ? _b : 'center';
    if (layoutType !== 'center') {
        return {
            flexDirection: layoutType === 'float-left' ? 'row' : 'row-reverse',
            '@media (max-width:1000px)': {
                '& .fe-page-side-element': {
                    display: 'none',
                },
            },
        };
    }
    return {};
};
const RootElementContainer = styled$7(formik_esm.Box)(({ theme }) => {
    var _a, _b, _c, _d, _e;
    const sideElementFlex = ((_b = (_a = theme.layout) === null || _a === void 0 ? void 0 : _a.splitSize) !== null && _b !== void 0 ? _b : 50) / 100;
    const splitContainerStyle = (_e = (_d = (_c = theme.layout) === null || _c === void 0 ? void 0 : _c.splitModeStyles) === null || _d === void 0 ? void 0 : _d.splitContainerStyle) !== null && _e !== void 0 ? _e : {};
    return Object.assign(Object.assign(Object.assign({ position: 'fixed', display: 'flex', flexDirection: 'row', width: '100vw', height: '100vh', top: 0, left: 0 }, theme.rootStyle), { '& .fe-page-side-element': Object.assign({ flex: sideElementFlex * 2, height: '100vh', overflow: 'auto' }, splitContainerStyle) }), buildLayout(theme));
});
const RootElement = ({ children, themeOptionKey: themeOptionKeyProps }) => {
    const themeOptionKey = themeOptionKeyProps !== null && themeOptionKeyProps !== void 0 ? themeOptionKeyProps : useThemeOptionKey();
    return (FronteggApp.React.createElement(formik_esm.InnerThemeProvider, { themeOptionKey: themeOptionKey, withFallback: true },
        FronteggApp.React.createElement(RootElementContainer, { "data-test-id": 'root-element' }, children)));
};
const TransparentRootElement = ({ children, themeOptionKey: themeOptionKeyProps }) => {
    const themeOptionKey = themeOptionKeyProps !== null && themeOptionKeyProps !== void 0 ? themeOptionKeyProps : useThemeOptionKey();
    return (FronteggApp.React.createElement(formik_esm.InnerThemeProvider, { themeOptionKey: themeOptionKey, withFallback: true }, children));
};
var RootElement$1 = RootElement;

const SlotRenderer = ({ themeKey, mount, unmount }) => {
    FronteggApp.react.exports.useEffect(() => {
        mount();
        return unmount;
    }, [mount, unmount]);
    return FronteggApp.React.createElement("slot", { name: themeKey });
};
const UnstyledCustomComponent = (_a) => {
    var { componentKey, componentKeys, children, className } = _a, props = FronteggApp.__rest(_a, ["componentKey", "componentKeys", "children", "className"]);
    const theme = formik_esm.useTheme();
    const t = useGlobalT();
    const component = FronteggApp.react.exports.useMemo(() => {
        // We receive both "componentKeys" and "componentKey" in order not to break the app.
        // If componentKeys are available, they get priority. Inside, we include all component keys that we intend to read, in priority order.
        // For example, for account signup page, we send ['titleAccount', 'title']
        // Now if the user will pass override for both titleAccount and title, we will grab the first one in priority and ignore the rest of them.
        if (componentKeys === null || componentKeys === void 0 ? void 0 : componentKeys.length) {
            return componentKeys.reduce((acc, key) => {
                acc = acc !== null && acc !== void 0 ? acc : getValue(theme, key);
                return acc;
            }, undefined);
        }
        // if componentKeys array is not available/empty, we proceed with the single key, as before
        return getValue(theme, componentKey);
    }, [componentKeys, componentKey]);
    if (component === undefined) {
        if (!children) {
            return null;
        }
        return FronteggApp.React.createElement("div", { className: className }, children);
    }
    if (component === null) {
        return null;
    }
    if (component.type === 'slot') {
        const { themeKey, mount, unmount } = component;
        return FronteggApp.React.createElement("div", { className: className },
            FronteggApp.React.createElement(SlotRenderer, Object.assign({}, { themeKey, mount, unmount })));
    }
    if (typeof component === 'function') {
        const html = component(Object.assign(Object.assign({}, props), { t, className }));
        if (FronteggApp.react.exports.isValidElement(html)) {
            return FronteggApp.React.cloneElement(html);
        }
        if (typeof html === 'string') {
            return FronteggApp.React.createElement("div", { dangerouslySetInnerHTML: { __html: html } });
        }
        else {
            console.error('Unsupported custom element format, html must be a string');
            return null;
        }
    }
    if (typeof component === 'string') {
        return FronteggApp.React.createElement("div", { className: className, dangerouslySetInnerHTML: { __html: component } });
    }
    else {
        console.error('Unsupported custom element format, html must be a string');
        return null;
    }
};
const CustomComponent = formik_esm.styled(UnstyledCustomComponent)(({ theme, componentKey, componentKeys = [] }) => (Object.assign({}, ([componentKey, ...componentKeys.slice().reverse()].reduce((styles, key) => (Object.assign(Object.assign({}, styles), theme[`${key}Style`])), {})))));

const Container$2 = formik_esm.styled(formik_esm.Box)(({ theme }) => {
    var _a;
    return (Object.assign({ textAlign: 'center', color: (_a = theme.poweredByColor) !== null && _a !== void 0 ? _a : '#a9a9ab', marginTop: '3rem', cursor: 'pointer', '> a': {
            color: 'currentColor',
            textDecoration: 'none',
            cursor: 'pointer',
            '&:hover .frontegg-logo': {
                color: '#8f8f8f',
            }
        } }, (theme.poweredByPlacement === 'leftBottomCorner' ? {
        margin: 0,
        [theme.breakpoints.up('sm')]: {
            display: 'flex',
            justifyContent: 'flex-start',
            alignItems: 'center',
            background: 'none',
            position: 'absolute',
            bottom: '1rem',
            left: '1.5rem',
        }
    } : {})));
});
const PowerByFrontegg = (props) => {
    const { whiteLabelMode } = formik_esm.useVendorState(({ whiteLabelMode }) => ({ whiteLabelMode }));
    if (whiteLabelMode !== null && whiteLabelMode !== void 0 ? whiteLabelMode : false) {
        return null;
    }
    return FronteggApp.React.createElement(Container$2, Object.assign({}, props),
        FronteggApp.React.createElement("a", { href: 'https://frontegg.com', target: '_blank', "data-test-id": "powered-by-logo" },
            FronteggApp.React.createElement(formik_esm.SvgIcon, { sx: { width: '165px' }, viewBox: "0 0 165 15", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
                FronteggApp.React.createElement("path", { d: "M0.99778 10.6198H2.56428V7.35027H4.86528C4.95195 7.35027 5.06678 7.34593 5.20978 7.33727C5.35711 7.3286 5.49145 7.3156 5.61278 7.29827C6.41878 7.1726 7.01678 6.83677 7.40678 6.29077C7.80111 5.74043 7.99828 5.0796 7.99828 4.30827C7.99828 3.5326 7.80328 2.87177 7.41328 2.32577C7.02761 1.77543 6.42745 1.43743 5.61278 1.31177C5.49145 1.2901 5.35928 1.2771 5.21628 1.27277C5.07328 1.2641 4.95628 1.25977 4.86528 1.25977H0.99778V10.6198ZM2.56428 5.88777V2.72877H4.80028C4.88695 2.72877 4.98445 2.7331 5.09278 2.74177C5.20111 2.75043 5.30078 2.7656 5.39178 2.78727C5.65178 2.85227 5.85545 2.96927 6.00278 3.13827C6.15445 3.30293 6.26061 3.48927 6.32128 3.69727C6.38628 3.90527 6.41878 4.10893 6.41878 4.30827C6.41878 4.5076 6.38628 4.71127 6.32128 4.91927C6.26061 5.12727 6.15445 5.3136 6.00278 5.47827C5.85545 5.64293 5.65178 5.75777 5.39178 5.82277C5.30078 5.84877 5.20111 5.8661 5.09278 5.87477C4.98445 5.88343 4.88695 5.88777 4.80028 5.88777H2.56428Z", fill: "currentColor" }),
                FronteggApp.React.createElement("path", { d: "M12.5468 10.8148C13.2488 10.8148 13.8619 10.6588 14.3863 10.3468C14.9106 10.0304 15.3179 9.59493 15.6083 9.04027C15.9029 8.48127 16.0503 7.83777 16.0503 7.10977C16.0503 6.3861 15.9051 5.74693 15.6148 5.19227C15.3244 4.63327 14.9171 4.1956 14.3928 3.87927C13.8684 3.56293 13.2531 3.40477 12.5468 3.40477C11.8578 3.40477 11.2511 3.56077 10.7268 3.87277C10.2024 4.18477 9.79292 4.6181 9.49826 5.17277C9.20359 5.72743 9.05626 6.3731 9.05626 7.10977C9.05626 7.83343 9.19926 8.47477 9.48526 9.03377C9.77559 9.58843 10.1829 10.0239 10.7073 10.3403C11.2316 10.6566 11.8448 10.8148 12.5468 10.8148ZM12.5468 9.34577C11.9444 9.34577 11.4873 9.14427 11.1753 8.74127C10.8676 8.33393 10.7138 7.7901 10.7138 7.10977C10.7138 6.44677 10.8611 5.90943 11.1558 5.49777C11.4548 5.08177 11.9184 4.87377 12.5468 4.87377C13.1621 4.87377 13.6236 5.07743 13.9313 5.48477C14.2389 5.88777 14.3928 6.42943 14.3928 7.10977C14.3928 7.76843 14.2389 8.30577 13.9313 8.72177C13.6279 9.13777 13.1664 9.34577 12.5468 9.34577Z", fill: "currentColor" }),
                FronteggApp.React.createElement("path", { d: "M18.9835 10.6198H20.2055L21.7915 5.79027L23.384 10.6198H24.606L26.751 3.59977H25.217L23.839 8.10427L22.4545 3.59977H21.135L19.744 8.10427L18.3725 3.59977L16.8385 3.58677L18.9835 10.6198Z", fill: "currentColor" }),
                FronteggApp.React.createElement("path", { d: "M31.1216 10.8148C31.7976 10.8148 32.4151 10.6414 32.9741 10.2948C33.5375 9.94377 33.9535 9.44977 34.2221 8.81277L32.6751 8.34477C32.3631 9.0121 31.815 9.34577 31.0306 9.34577C30.4976 9.34577 30.0773 9.19193 29.7696 8.88427C29.462 8.57227 29.2778 8.12593 29.2171 7.54527H34.3001C34.3608 6.70027 34.2676 5.96793 34.0206 5.34827C33.7736 4.7286 33.3945 4.24977 32.8831 3.91177C32.3761 3.57377 31.7586 3.40477 31.0306 3.40477C30.3416 3.40477 29.735 3.56077 29.2106 3.87277C28.6863 4.18043 28.2768 4.6181 27.9821 5.18577C27.6875 5.75343 27.5401 6.42077 27.5401 7.18777C27.5401 7.89843 27.6896 8.52677 27.9886 9.07277C28.292 9.61877 28.7123 10.0456 29.2496 10.3533C29.787 10.6609 30.411 10.8148 31.1216 10.8148ZM31.0956 4.77627C31.581 4.77627 31.9536 4.9041 32.2136 5.15977C32.478 5.4111 32.6448 5.81193 32.7141 6.36227H29.2561C29.4425 5.30493 30.0556 4.77627 31.0956 4.77627Z", fill: "currentColor" }),
                FronteggApp.React.createElement("path", { d: "M36.0104 10.6198H37.5834V7.05127C37.5834 6.64393 37.6571 6.2821 37.8044 5.96577C37.9561 5.64943 38.1923 5.4046 38.5129 5.23127C38.7296 5.1056 38.9723 5.03193 39.2409 5.01027C39.5096 4.98427 39.7501 5.0016 39.9624 5.06227V3.59977C39.6461 3.5521 39.3211 3.5586 38.9874 3.61927C38.6538 3.6756 38.3569 3.7926 38.0969 3.97027C37.9496 4.06127 37.8174 4.17177 37.7004 4.30177C37.5834 4.42743 37.4816 4.56827 37.3949 4.72427V3.59977H36.0104V10.6198Z", fill: "currentColor" }),
                FronteggApp.React.createElement("path", { d: "M44.5274 10.8148C45.2034 10.8148 45.8209 10.6414 46.3799 10.2948C46.9432 9.94377 47.3592 9.44977 47.6279 8.81277L46.0809 8.34477C45.7689 9.0121 45.2207 9.34577 44.4364 9.34577C43.9034 9.34577 43.483 9.19193 43.1754 8.88427C42.8677 8.57227 42.6835 8.12593 42.6229 7.54527H47.7059C47.7665 6.70027 47.6734 5.96793 47.4264 5.34827C47.1794 4.7286 46.8002 4.24977 46.2889 3.91177C45.7819 3.57377 45.1644 3.40477 44.4364 3.40477C43.7474 3.40477 43.1407 3.56077 42.6164 3.87277C42.092 4.18043 41.6825 4.6181 41.3879 5.18577C41.0932 5.75343 40.9459 6.42077 40.9459 7.18777C40.9459 7.89843 41.0954 8.52677 41.3944 9.07277C41.6977 9.61877 42.118 10.0456 42.6554 10.3533C43.1927 10.6609 43.8167 10.8148 44.5274 10.8148ZM44.5014 4.77627C44.9867 4.77627 45.3594 4.9041 45.6194 5.15977C45.8837 5.4111 46.0505 5.81193 46.1199 6.36227H42.6619C42.8482 5.30493 43.4614 4.77627 44.5014 4.77627Z", fill: "currentColor" }),
                FronteggApp.React.createElement("path", { d: "M52.2307 10.8148C52.6467 10.8148 53.0215 10.7519 53.3552 10.6263C53.6888 10.5006 53.9813 10.3251 54.2327 10.0998V10.6198H55.6172V1.25977H54.0377V3.94427C53.8037 3.77093 53.5415 3.63877 53.2512 3.54777C52.9608 3.45243 52.6402 3.40477 52.2892 3.40477C51.6262 3.40477 51.0498 3.5651 50.5602 3.88577C50.0748 4.20643 49.6978 4.64627 49.4292 5.20527C49.1605 5.76427 49.0262 6.3991 49.0262 7.10977C49.0262 7.81177 49.1583 8.44227 49.4227 9.00127C49.687 9.56027 50.0597 10.0023 50.5407 10.3273C51.0217 10.6523 51.585 10.8148 52.2307 10.8148ZM52.4712 9.41077C52.0638 9.41077 51.728 9.30893 51.4637 9.10527C51.1993 8.89727 51.0022 8.61993 50.8722 8.27327C50.7465 7.9266 50.6837 7.53877 50.6837 7.10977C50.6837 6.6851 50.7487 6.29943 50.8787 5.95277C51.013 5.60177 51.2145 5.32443 51.4832 5.12077C51.7562 4.91277 52.1028 4.80877 52.5232 4.80877C53.1212 4.80877 53.5545 5.0211 53.8232 5.44577C54.0962 5.87043 54.2327 6.4251 54.2327 7.10977C54.2327 7.7901 54.0962 8.34477 53.8232 8.77377C53.5545 9.19843 53.1038 9.41077 52.4712 9.41077Z", fill: "currentColor" }),
                FronteggApp.React.createElement("path", { d: "M60.5492 10.6198H61.9337V10.0998C62.185 10.3251 62.4775 10.5006 62.8112 10.6263C63.1448 10.7519 63.5197 10.8148 63.9357 10.8148C64.5857 10.8148 65.149 10.6523 65.6257 10.3273C66.1067 10.0023 66.4793 9.56027 66.7437 9.00127C67.008 8.44227 67.1402 7.81177 67.1402 7.10977C67.1402 6.3991 67.0058 5.76427 66.7372 5.20527C66.4728 4.64627 66.0958 4.20643 65.6062 3.88577C65.1165 3.5651 64.5402 3.40477 63.8772 3.40477C63.5262 3.40477 63.2055 3.45243 62.9152 3.54777C62.6248 3.63877 62.3627 3.77093 62.1287 3.94427V1.25977H60.5492V10.6198ZM63.6952 9.41077C63.0668 9.41077 62.6162 9.19843 62.3432 8.77377C62.0702 8.34477 61.9337 7.7901 61.9337 7.10977C61.9337 6.4251 62.068 5.87043 62.3367 5.44577C62.6097 5.0211 63.0452 4.80877 63.6432 4.80877C64.0635 4.80877 64.408 4.91277 64.6767 5.12077C64.9497 5.32443 65.1512 5.60177 65.2812 5.95277C65.4155 6.29943 65.4827 6.6851 65.4827 7.10977C65.4827 7.53877 65.4176 7.9266 65.2877 8.27327C65.162 8.61993 64.967 8.89727 64.7027 9.10527C64.4383 9.30893 64.1025 9.41077 63.6952 9.41077Z", fill: "currentColor" }),
                FronteggApp.React.createElement("path", { d: "M69.2862 13.7398H70.7552L74.6682 3.59977H73.1017L71.1972 8.62427L69.2342 3.59977H67.6027L70.4432 10.5678L69.2862 13.7398Z", fill: "currentColor" }),
                FronteggApp.React.createElement("path", { className: 'frontegg-logo', d: "M100.703 12.0328V7.24279H99.795V5.87242H100.703V5.00749C100.662 4.26672 100.887 3.53554 101.337 2.94505C101.755 2.44161 102.384 2.16132 103.039 2.18719C103.636 2.19392 104.225 2.33479 104.76 2.59932L104.4 3.94337C104.249 3.86598 104.09 3.80578 103.926 3.76393C103.763 3.71814 103.595 3.69361 103.426 3.69095C102.803 3.69095 102.492 4.10787 102.492 4.94169V5.87302H104.197V7.24339H102.492V12.0334L100.703 12.0328Z", fill: "currentColor" }),
                FronteggApp.React.createElement("path", { className: 'frontegg-logo', d: "M110.833 6.60479C110.331 6.60469 109.835 6.71134 109.378 6.91762C108.972 7.09589 108.645 7.41465 108.458 7.81485V12.033H106.669V5.06155H108.311V6.55155C108.53 6.09811 108.852 5.70182 109.251 5.39412C109.598 5.11573 110.028 4.96114 110.473 4.95508C110.571 4.95508 110.644 4.95508 110.693 4.96166C110.74 4.96589 110.787 4.97248 110.833 4.9814V6.60479Z", fill: "currentColor" }),
                FronteggApp.React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", className: 'frontegg-logo', d: "M116.223 12.1668C115.697 12.1748 115.176 12.075 114.69 11.8737C114.255 11.6918 113.862 11.4224 113.535 11.0823C113.22 10.7502 112.973 10.3596 112.808 9.93267C112.471 9.04626 112.471 8.06757 112.808 7.18116C112.972 6.75362 113.22 6.36241 113.535 6.02971C113.862 5.69004 114.255 5.42072 114.69 5.23835C115.176 5.0371 115.698 4.93754 116.224 4.94586C116.749 4.93699 117.269 5.03659 117.753 5.23835C118.618 5.60418 119.295 6.3059 119.628 7.18116C119.966 8.06741 119.966 9.04641 119.628 9.93267C119.465 10.3589 119.22 10.7496 118.908 11.0835C118.584 11.4244 118.192 11.6936 117.757 11.8737C117.271 12.0751 116.749 12.1748 116.223 12.1668ZM114.538 9.40588C114.441 9.13488 114.394 8.84889 114.397 8.56128V8.56069C114.395 8.27551 114.442 7.99208 114.538 7.72327C114.623 7.47895 114.755 7.25304 114.925 7.05753C115.087 6.87362 115.284 6.72427 115.505 6.61848C115.73 6.51154 115.976 6.45693 116.225 6.45877C116.473 6.45708 116.719 6.50933 116.945 6.6119C117.167 6.71388 117.365 6.86123 117.525 7.04437C117.696 7.23953 117.827 7.46528 117.912 7.70951C118.008 7.97835 118.055 8.26176 118.053 8.54693C118.056 8.83665 118.009 9.12474 117.912 9.3981C117.827 9.64247 117.696 9.86839 117.525 10.0638C117.364 10.2467 117.167 10.3938 116.945 10.4957C116.487 10.6993 115.963 10.6993 115.505 10.4957C115.283 10.3938 115.086 10.2467 114.925 10.0638C114.756 9.8704 114.625 9.64726 114.538 9.40588Z", fill: "currentColor" }),
                FronteggApp.React.createElement("path", { className: 'frontegg-logo', d: "M128.892 12.033H127.104V8.12104C127.138 7.69239 127.035 7.26402 126.81 6.89721C126.619 6.64235 126.314 6.49791 125.996 6.5114C125.809 6.51306 125.623 6.54916 125.449 6.61788C125.259 6.69018 125.081 6.79104 124.921 6.91695C124.753 7.04952 124.602 7.2038 124.474 7.37574C124.341 7.55154 124.242 7.74997 124.18 7.96133V12.033H122.392V5.06088H124.007V6.3517C124.27 5.90308 124.66 5.54198 125.128 5.3139C125.642 5.05988 126.21 4.93211 126.783 4.94125C127.154 4.92596 127.523 5.00849 127.851 5.18051C128.116 5.32924 128.336 5.54432 128.491 5.80439C128.648 6.07594 128.754 6.37338 128.805 6.68248C128.863 7.01191 128.892 7.34574 128.892 7.6802V12.033Z", fill: "currentColor" }),
                FronteggApp.React.createElement("path", { className: 'frontegg-logo', d: "M135.939 11.6736C135.65 11.7976 135.353 11.9041 135.051 11.9925C134.694 12.1002 134.323 12.1542 133.95 12.1528C133.714 12.1541 133.478 12.1227 133.25 12.0595C133.039 12.0014 132.844 11.8995 132.676 11.7604C132.505 11.6156 132.37 11.4334 132.282 11.228C132.177 10.9774 132.127 10.7074 132.135 10.4361V6.42843H131.227V5.06105H132.135V2.79883H133.923V5.06105H135.405V6.43142H133.923V9.83731C133.902 10.0344 133.977 10.2297 134.124 10.3631C134.262 10.4664 134.431 10.5201 134.604 10.5156C134.79 10.5159 134.976 10.4846 135.152 10.4229C135.329 10.3631 135.472 10.3075 135.578 10.2632L135.939 11.6736Z", fill: "currentColor" }),
                FronteggApp.React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", className: 'frontegg-logo', d: "M139.902 11.8793C140.385 12.0754 140.903 12.1726 141.424 12.1653V12.1659C142.133 12.1848 142.832 12.0076 143.446 11.6538C143.978 11.3477 144.407 10.8915 144.68 10.3427L143.146 9.91739C143.017 10.2145 142.788 10.4569 142.498 10.6023C142.19 10.7733 141.843 10.8626 141.49 10.8619C141.262 10.8627 141.036 10.8222 140.823 10.7422C140.392 10.582 140.038 10.2631 139.835 9.851C139.724 9.62154 139.656 9.37353 139.635 9.11945H145.04C145.06 9.03204 145.071 8.94289 145.074 8.85328C145.08 8.7468 145.08 8.63615 145.08 8.5207C145.082 8.05725 144.998 7.59747 144.833 7.16409C144.674 6.73753 144.429 6.34793 144.113 6.01922C143.787 5.68396 143.396 5.41713 142.965 5.23444C142.482 5.03272 141.961 4.93313 141.437 4.94194C140.908 4.934 140.384 5.03352 139.895 5.23444C139.456 5.4168 139.059 5.68601 138.727 6.0258C138.407 6.35869 138.158 6.75256 137.994 7.18383C137.823 7.63193 137.737 8.10772 137.74 8.5871C137.738 9.0563 137.826 9.52154 138.001 9.95747C138.169 10.3842 138.42 10.7732 138.741 11.1017C139.072 11.4362 139.466 11.7007 139.902 11.8793ZM142.658 6.70579C143.007 7.03386 143.215 7.48408 143.239 7.96192L139.609 7.96311C139.623 7.71871 139.684 7.47929 139.789 7.25789C139.885 7.05351 140.019 6.86859 140.182 6.71237C140.343 6.56109 140.531 6.44136 140.736 6.35946C140.951 6.27456 141.18 6.2317 141.411 6.23325C141.872 6.22281 142.32 6.39235 142.658 6.70579Z", fill: "currentColor" }),
                FronteggApp.React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", className: 'frontegg-logo', d: "M148.972 11.794C149.37 11.983 149.806 12.0786 150.246 12.0734C150.716 12.0758 151.179 11.9639 151.595 11.7474C152.003 11.5395 152.341 11.2183 152.57 10.8226V11.6977C152.577 11.9992 152.519 12.2986 152.402 12.5764C152.3 12.8125 152.144 13.0217 151.948 13.1877C151.752 13.3502 151.525 13.4704 151.28 13.5406C151.023 13.6167 150.756 13.6548 150.487 13.6537C150.038 13.6566 149.593 13.5613 149.185 13.3744C148.794 13.1982 148.449 12.9341 148.178 12.6027L147.204 13.5472C147.566 13.9992 148.024 14.3651 148.545 14.6185C149.156 14.8894 149.819 15.0188 150.487 14.9971C151.012 15.0023 151.534 14.9263 152.035 14.7716C152.482 14.6337 152.899 14.4125 153.263 14.1197C153.608 13.8396 153.884 13.4859 154.073 13.0848C154.269 12.6503 154.367 12.1779 154.359 11.7013V5.0618H152.799V6.28383C152.546 5.88329 152.202 5.54862 151.793 5.30765C151.356 5.0567 150.858 4.93029 150.353 4.94217C149.457 4.92843 148.6 5.31368 148.017 5.99313C147.727 6.33103 147.501 6.71851 147.35 7.1368C147.187 7.58916 147.105 8.06667 147.11 8.54725C147.107 9.00935 147.184 9.46847 147.338 9.90446C147.479 10.3155 147.697 10.6968 147.978 11.029C148.251 11.3515 148.59 11.6123 148.972 11.794ZM151.422 10.5568C151.242 10.6193 151.052 10.6509 150.862 10.6501V10.6495C150.597 10.652 150.335 10.5975 150.094 10.4898C149.862 10.386 149.653 10.2367 149.48 10.0508C149.304 9.86096 149.166 9.63974 149.073 9.39878C148.973 9.14442 148.923 8.87337 148.925 8.60024C148.925 8.32915 148.968 8.05974 149.053 7.8023C149.133 7.55354 149.257 7.32127 149.42 7.11682C149.579 6.91932 149.776 6.75643 150 6.6383C150.233 6.51725 150.492 6.4556 150.755 6.45885C151.142 6.46357 151.517 6.59445 151.822 6.8315C152.161 7.08146 152.421 7.4232 152.571 7.81606V9.47893C152.505 9.64276 152.415 9.7955 152.302 9.93173C152.188 10.0725 152.056 10.1977 151.909 10.3044C151.76 10.4117 151.596 10.4968 151.422 10.5568Z", fill: "currentColor" }),
                FronteggApp.React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", className: 'frontegg-logo', d: "M158.615 11.794C159.013 11.983 159.449 12.0786 159.889 12.0734C160.359 12.0758 160.822 11.9639 161.238 11.7474C161.646 11.5395 161.984 11.2183 162.212 10.8226V11.6977C162.219 11.9992 162.162 12.2986 162.044 12.5764C161.943 12.8125 161.787 13.0217 161.59 13.1877C161.395 13.3502 161.168 13.4704 160.923 13.5406C160.666 13.6167 160.398 13.6548 160.13 13.6537C159.681 13.6566 159.236 13.5613 158.828 13.3744C158.437 13.1982 158.092 12.9341 157.821 12.6027L156.846 13.5472C157.208 13.9992 157.667 14.3651 158.188 14.6185C158.798 14.8894 159.462 15.0188 160.13 14.9971C160.654 15.0023 161.176 14.9263 161.677 14.7716C162.125 14.6337 162.542 14.4125 162.906 14.1197C163.25 13.8396 163.527 13.4859 163.716 13.0848C163.912 12.6503 164.01 12.1779 164.002 11.7013V5.0618H162.442V6.28383C162.189 5.88329 161.844 5.54862 161.436 5.30765C160.999 5.0567 160.501 4.93029 159.996 4.94217C159.099 4.92843 158.243 5.31368 157.66 5.99313C157.37 6.33103 157.144 6.71851 156.992 7.1368C156.829 7.58916 156.748 8.06667 156.752 8.54725C156.749 9.00935 156.827 9.46847 156.98 9.90446C157.122 10.3155 157.339 10.6968 157.62 11.029C157.894 11.3515 158.233 11.6123 158.615 11.794ZM161.065 10.5568C160.885 10.6193 160.695 10.6509 160.504 10.6501V10.6495C160.24 10.652 159.978 10.5975 159.736 10.4898C159.504 10.386 159.295 10.2367 159.122 10.0508C158.947 9.86096 158.809 9.63974 158.716 9.39878C158.616 9.14442 158.566 8.87337 158.568 8.60024C158.567 8.32915 158.611 8.05974 158.696 7.8023C158.776 7.55354 158.9 7.32127 159.063 7.11682C159.221 6.91932 159.418 6.75643 159.643 6.6383C159.875 6.51725 160.135 6.4556 160.397 6.45885C160.785 6.46357 161.159 6.59445 161.465 6.8315C161.804 7.08146 162.063 7.4232 162.213 7.81606V9.47893C162.148 9.64276 162.057 9.7955 161.945 9.93173C161.83 10.0725 161.698 10.1977 161.551 10.3044C161.402 10.4117 161.238 10.4968 161.065 10.5568Z", fill: "currentColor" }),
                FronteggApp.React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", className: 'frontegg-logo', d: "M86.1318 0.640696C87.6679 -0.45273 89.204 -0.117165 90.6248 1.42248V1.42488C92.0457 2.96632 93.6202 5.97444 93.0801 9.1638C92.9701 9.85244 92.7363 10.5156 92.3901 11.1216C91.7109 12.2647 90.5934 13.0824 89.2958 13.3856C87.8565 13.7535 86.3296 13.5362 85.0512 12.7814C84.8891 12.6788 84.7336 12.5661 84.5856 12.4441C83.4536 11.445 82.7714 10.0348 82.6919 8.52975C82.6292 7.69245 82.691 6.85051 82.8755 6.03126C83.043 5.27862 83.2952 4.54723 83.6273 3.85099C84.1776 2.58766 85.0391 1.4834 86.1318 0.640696ZM84.9288 4.97281C85.1046 4.34774 85.725 2.52696 87.1897 1.61119C87.2628 1.56631 87.3063 1.48596 87.3039 1.40042C87.3014 1.31487 87.2534 1.23712 87.1779 1.19645C87.1023 1.15578 87.0108 1.15837 86.9377 1.20324C86.0757 1.77919 85.3928 2.58446 84.9666 3.52767C84.7608 3.95072 84.5929 4.39108 84.465 4.84361C84.447 4.90759 84.4564 4.97615 84.4912 5.03287C84.5259 5.0896 84.5827 5.12938 84.648 5.14269C84.7719 5.16878 84.8948 5.09442 84.9288 4.97281Z", fill: "currentColor" }),
                FronteggApp.React.createElement("path", { className: 'frontegg-logo', d: "M89.0883 14.5244C90.9056 15.3547 93.0387 15.0798 94.5845 13.8162C97.1862 11.6497 97.9068 7.22397 97.9068 7.22397C97.9068 7.22397 98.3665 4.93124 97.5204 3.60812C96.6744 2.28501 94.5845 2.29637 92.6722 2.95015C93.5268 4.68805 93.9974 6.58848 94.0523 8.52316C94.0281 11.4408 91.9581 13.9432 89.0895 14.5226", fill: "currentColor" }))));
};

const CompanyPlaceholder = () => {
    return FronteggApp.React.createElement("svg", { width: "161", height: "32", viewBox: "0 0 161 32", fill: "none", xmlns: "http://www.w3.org/2000/svg" },
        FronteggApp.React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M113.765 8.66072C112.013 8.66072 111.262 10.1626 111.262 11.5643L111.287 17.6719H107.857V0H111.212V7.78464H111.287C111.862 6.58316 112.964 5.70706 114.866 5.70706C117.795 5.70706 119.297 7.73458 119.297 10.4129V17.6719H115.842V11.0136C115.842 9.61188 115.166 8.66072 113.765 8.66072ZM55.9935 4.86374e-05H59.4227V17.6719H55.9935V4.86374e-05ZM9.66134 17.6713H6.1069V11.739L0.5 1.15086H4.32974L7.10814 6.70771C7.44154 7.36408 7.70987 8.05153 7.90918 8.76023H7.98422C8.17326 8.05172 8.43325 7.36408 8.76021 6.70771L11.5136 1.15086H15.2432L9.66134 11.6638V17.6713ZM158.385 27.4094L158.475 27.3043C159.035 27.2597 159.598 27.2597 160.157 27.3043H158.966C158.966 27.4368 157.474 28.7016 156.423 29.5922L156.423 29.5926L156.422 29.5928C155.886 30.0472 155.465 30.404 155.416 30.4632C154.661 30.5241 153.749 30.5251 152.803 30.526C151.65 30.5272 150.446 30.5284 149.409 30.6384C149.612 30.6529 149.438 30.658 149.209 30.6647C148.885 30.674 148.452 30.6866 148.818 30.7335H147.627C148.003 30.733 148.378 30.6978 148.748 30.6284C147.021 30.6116 145.201 30.6173 143.418 30.6229H143.417H143.416H143.416H143.415H143.415H143.414H143.414H143.413H143.413H143.412H143.412H143.411C142.535 30.6257 141.667 30.6284 140.823 30.6284C140.022 30.6177 139.221 30.678 138.43 30.8086L138.501 30.7335H136.954C137.057 30.7631 137.084 30.7989 137.111 30.8338C137.155 30.8932 137.198 30.9499 137.614 30.9688C137.264 31.0065 136.91 31.0165 136.558 30.9988C136.743 30.9838 137.139 30.9087 136.808 30.9087C136.198 30.9062 136.106 30.9217 135.977 30.9436C135.852 30.9647 135.693 30.9917 134.996 31.0139C134.999 31.0111 135.033 31.0052 135.08 30.9971C135.289 30.9607 135.75 30.8805 134.801 30.8437C132.992 30.8091 125.911 30.8733 120.126 30.9259H120.125H120.125L120.125 30.9259H120.125H120.124L120.124 30.9259L120.124 30.9259L120.123 30.9259L120.122 30.9259L120.122 30.9259H120.122C116.751 30.9565 113.821 30.9831 112.631 30.9838C112.722 30.9714 112.873 30.9028 113.022 30.8348C113.172 30.7668 113.32 30.6995 113.405 30.6897L111.973 30.7786L112.754 30.8737C111.828 30.9668 108.533 31.057 105.437 31.1416L105.437 31.1416H105.437C102.875 31.2117 100.45 31.2781 99.6175 31.3393H100.118C98.6766 31.4444 97.6354 31.4444 95.9039 31.4444L96.9742 31.3994C96.2042 31.2813 95.4235 31.2493 94.6464 31.3042L95.2921 31.3493C94.485 31.4381 93.7713 31.4286 92.8013 31.4156L92.8009 31.4156H92.8008H92.8007C92.4052 31.4103 91.9669 31.4044 91.4624 31.4044L92.1283 31.4394H90.7365C91.2939 31.3996 90.9371 31.3785 90.5095 31.3532C90.2381 31.3372 89.9382 31.3195 89.8254 31.2942C90.4061 31.4344 88.6639 31.4344 88.1633 31.4344C88.0343 31.3979 87.6497 31.4193 87.2777 31.4401C86.8844 31.4621 86.5051 31.4833 86.4562 31.4344C85.9872 31.4604 86.2717 31.5129 86.4697 31.5263C85.879 31.5056 85.3251 31.5365 84.6382 31.5749L84.638 31.5749C84.0144 31.6097 83.2811 31.6507 82.3111 31.6646C80.8646 31.6626 80.5019 31.6494 80.325 31.6429L80.2784 31.6413C80.2618 31.6407 80.2464 31.6403 80.231 31.6399C80.128 31.6378 80.0247 31.6415 79.551 31.6585L79.5504 31.6585L79.5501 31.6585L79.55 31.6585L79.5498 31.6585C79.2037 31.6709 78.6602 31.6904 77.7755 31.7198L77.315 31.6547L77.0496 31.7648C76.7018 31.6704 76.1135 31.6611 75.5651 31.6523C75.0084 31.6435 74.4928 31.6353 74.3113 31.5395C74.1217 31.5676 73.9257 31.5661 73.676 31.5643C73.3915 31.5622 73.0374 31.5596 72.5441 31.5996C72.7823 31.6838 73.2467 31.6922 73.6824 31.7001C73.9974 31.7057 74.2974 31.7112 74.4865 31.7448C71.633 31.8019 60.7341 31.7892 55.0464 31.7825H55.0461H55.0459H55.0454H55.0448L55.0403 31.7825C53.7557 31.781 52.7376 31.7798 52.1388 31.7798C52.6695 31.7648 52.5644 31.6997 52.0637 31.6697L50.8172 31.7148C50.8717 31.7257 50.9514 31.7326 51.0213 31.7387C51.144 31.7494 51.2369 31.7575 51.1126 31.7798C50.6362 31.7528 50.1583 31.7729 49.6858 31.8399C49.7359 31.7598 48.8898 31.7598 48.8898 31.7598C48.6426 31.8042 48.1018 31.7932 47.5077 31.7812H47.5077H47.5077C46.6946 31.7648 45.7818 31.7463 45.3855 31.8649C44.5072 31.8849 44.4044 31.8562 44.2836 31.8224C44.1628 31.7886 44.0241 31.7498 43.0727 31.7498L42.9525 31.89C42.7923 31.8749 32.7999 31.935 33.0903 32.0001C32.8401 31.9339 32.583 31.897 32.3243 31.89C31.428 31.9129 30.5421 31.9229 29.6327 31.9331H29.6325C28.7592 31.9429 27.8643 31.953 26.9177 31.975C26.9555 31.972 26.993 31.9695 27.0274 31.9673H27.0274C27.1612 31.9586 27.2484 31.9529 27.1329 31.925C22.8657 31.9783 18.7162 31.9606 14.5484 31.9428H14.5484H14.5484H14.5483H14.5483H14.5483H14.5483H14.5483H14.5483H14.5482H14.5482H14.5482H14.5482L14.5473 31.9428C12.4567 31.9339 10.3616 31.925 8.24459 31.925C7.62166 31.9224 7.58008 31.8875 7.54076 31.8545C7.50423 31.8238 7.46965 31.7948 6.97306 31.7948C6.4717 31.7719 5.91181 31.8103 5.43433 31.8432C5.28724 31.8533 5.14797 31.8628 5.02063 31.8699C5.07251 31.8766 5.14564 31.8811 5.21273 31.8852C5.34634 31.8933 5.45598 31.9 5.326 31.92C4.99084 31.885 4.58073 31.885 4.16054 31.885H4.15958C4.21024 31.879 4.26625 31.8729 4.32306 31.8666H4.32308C4.60306 31.8357 4.90256 31.8027 4.67651 31.7878C4.53787 31.788 4.38391 31.7858 4.21464 31.7798H3.3836L3.44868 31.7047C-0.776536 31.1591 2.53752 28.4657 2.53752 28.4657H2.83794L4.9055 28.676C7.12199 28.5822 9.57473 28.6186 11.6681 28.6496C12.5913 28.6633 13.4446 28.676 14.1769 28.676C14.4532 28.672 14.8487 28.6705 15.3079 28.6687H15.3079H15.3079H15.3079H15.308H15.308H15.308C16.5791 28.6638 18.3382 28.6571 19.4084 28.5909L19.3383 28.6659C20.4283 28.6472 21.773 28.5872 22.8857 28.5376L22.8858 28.5376C23.5516 28.5079 24.1343 28.4819 24.5297 28.4707L24.5047 28.5008C25.2005 28.4908 27.0378 28.3956 26.8175 28.2555C27.993 28.3524 29.1731 28.3808 30.3519 28.3406H30.0215C31.2901 28.3042 35.1261 28.3029 38.817 28.3016C42.2339 28.3005 45.5263 28.2994 46.5419 28.2705L46.3467 28.3055C47.2384 28.2632 48.2294 28.2565 49.2313 28.2498H49.2314C50.4793 28.2415 51.744 28.2331 52.8547 28.1553C56.5943 28.2104 72.7193 28.2104 76.9295 28.1103C78.7417 28.0805 78.829 28.0508 78.895 28.0283C78.9622 28.0054 79.0072 27.9901 80.8343 27.9901C81.3499 27.9901 81.5752 27.9301 80.9144 27.895C81.2882 27.9013 81.7003 27.9027 82.1249 27.9041C83.0481 27.9071 84.0308 27.9103 84.8092 27.9651C89.843 27.8555 98.2731 27.7858 105.376 27.727C108.658 27.6999 111.656 27.675 113.905 27.6497H113.72C115.267 27.6365 118.319 27.6018 121.878 27.5613L121.887 27.5612L121.892 27.5611L121.898 27.5611L121.9 27.561L121.903 27.561C129.082 27.4794 138.313 27.3744 141.419 27.3744L142.355 27.2792C142.856 27.3075 143.34 27.3081 143.873 27.3087C144.379 27.3093 144.929 27.31 145.579 27.3343C146.21 27.3208 146.038 27.2546 145.756 27.2415C146.291 27.2526 146.843 27.243 147.343 27.2344L147.343 27.2344C147.905 27.2246 148.401 27.216 148.733 27.2392L148.538 27.2693C149.437 27.3088 150.148 27.2727 150.877 27.2357C151.626 27.1976 152.395 27.1586 153.409 27.1992C154.232 27.2159 155.056 27.1908 155.877 27.1241C156.404 27.1424 156.401 27.1718 156.398 27.2006C156.395 27.2268 156.392 27.2526 156.788 27.2693C157.497 27.1987 158.21 27.187 158.921 27.2342C157.935 27.2492 156.818 27.2742 156.883 27.3643C157.47 27.357 157.546 27.3781 157.613 27.3965C157.684 27.416 157.744 27.4325 158.385 27.4094ZM145.659 27.2392L145.756 27.2415C145.725 27.24 145.692 27.2392 145.659 27.2392ZM86.4697 31.5263L86.523 31.5283L86.5514 31.5295C86.5391 31.5295 86.5254 31.5292 86.5107 31.5286L86.4927 31.5277L86.4697 31.5263ZM112.584 30.9838C112.597 30.9865 112.613 30.9863 112.631 30.9838L112.584 30.9838ZM5.10314 31.7798H5.61133C5.64248 31.7531 5.56783 31.7571 5.38739 31.7667C5.3114 31.7707 5.21665 31.7757 5.10314 31.7798ZM20.0243 17.8233C23.7539 17.8233 26.232 15.3202 26.232 11.7658C26.232 8.21139 23.7289 5.70831 20.0243 5.70831C16.3197 5.70831 13.7916 8.21139 13.7916 11.7658C13.7916 15.3202 16.2697 17.8233 20.0243 17.8233ZM20.0243 8.51176C21.7014 8.51176 22.7526 9.86343 22.7526 11.7658C22.7526 13.6681 21.7014 15.0198 20.0243 15.0198C18.3472 15.0198 17.2709 13.6932 17.2709 11.7658C17.2709 9.8384 18.3222 8.51176 20.0243 8.51176ZM34.8647 17.2262C34.2064 17.6591 33.4261 17.8683 32.6396 17.8227C29.711 17.8227 28.2091 15.7952 28.2091 13.1169V5.85795H31.6634V12.5161C31.6634 13.9179 32.3643 14.8691 33.741 14.8691C35.2929 14.8691 36.0689 13.3422 36.0689 11.9655V5.85795H39.4981V17.6725L36.7196 17.7726C36.527 17.0006 36.4014 16.2134 36.3442 15.4198H36.2941C36.0242 16.1599 35.5229 16.7934 34.8647 17.2262ZM45.6057 11.9649C45.6057 9.98746 46.7321 8.9612 48.0337 8.9612C48.518 8.95606 48.9914 9.10508 49.3854 9.38671L50.2865 6.08264C49.7335 5.84415 49.1365 5.72477 48.5343 5.73223C46.7571 5.73223 45.831 6.88362 45.3805 8.38547H45.2803C45.2397 7.50419 45.0969 6.63062 44.8548 5.78228L42.1765 5.88238V17.697H45.6057V11.9649ZM67.733 17.8233C71.4626 17.8233 73.9406 15.3202 73.9406 11.7658C73.9406 8.21139 71.4376 5.70831 67.733 5.70831C64.0284 5.70831 61.5003 8.21139 61.5003 11.7658C61.5003 15.3202 63.9784 17.8233 67.733 17.8233ZM67.733 8.51176C69.4101 8.51176 70.4613 9.86343 70.4613 11.7658C70.4613 13.6681 69.4101 15.0198 67.733 15.0198C66.0559 15.0198 64.9796 13.6932 64.9796 11.7658C64.9796 9.8384 66.0209 8.51176 67.733 8.51176ZM87.6078 19.0999C87.6078 20.9772 86.2311 22.9296 81.1498 22.9296C76.8195 22.9296 74.8671 21.6781 74.8671 19.8759C74.8671 18.6994 75.618 17.8984 76.8445 17.4979C76.4399 17.2822 76.1009 16.9615 75.8631 16.5695C75.6252 16.1775 75.4974 15.7286 75.4929 15.2702C75.4998 14.7682 75.6694 14.2821 75.9764 13.8848C76.2833 13.4876 76.711 13.2008 77.1949 13.0675C76.7783 12.6883 76.4486 12.2236 76.2283 11.7052C76.0079 11.1868 75.9022 10.6268 75.9184 10.0638C75.9184 7.48558 77.9959 5.70835 81.1498 5.70835C82.2261 5.68567 83.2916 5.92628 84.2537 6.40923C85.0547 5.95867 85.3801 4.83227 85.3801 3.58072L87.9582 4.25655C87.9647 4.98466 87.7265 5.69386 87.2816 6.27033C86.8368 6.84679 86.2112 7.25716 85.5053 7.43552C86.14 8.16176 86.4793 9.09954 86.4564 10.0638C86.4564 12.642 84.3538 14.3941 81.1749 14.3941C80.4359 14.4077 79.6999 14.2977 78.9972 14.0687C78.4465 14.1939 78.1712 14.4191 78.1712 14.7946C78.1712 15.3953 78.6718 15.5956 80.0735 15.5956H82.7268C85.6054 15.5956 87.6078 16.6969 87.6078 19.0999ZM83.3025 10.0888C83.3276 8.9874 82.4765 8.18645 81.2249 8.18645C79.9734 8.18645 79.1974 8.88727 79.1474 10.0137C79.0973 11.1401 79.8482 11.916 81.1498 11.916C82.4514 11.916 83.2775 11.1901 83.3025 10.0888ZM82.4014 18.1988H80.1737V18.1738C78.4715 18.1738 77.8958 18.6243 77.8958 19.3252C77.8958 20.1512 78.6968 20.5768 81.1498 20.5768C83.6029 20.5768 84.4539 20.1011 84.4539 19.2751C84.4539 18.4491 83.8031 18.1988 82.4014 18.1988ZM94.5561 17.8233C98.2857 17.8233 100.764 15.3202 100.764 11.7658C100.764 8.21139 98.2857 5.70831 94.5561 5.70831C90.8265 5.70831 88.3234 8.21139 88.3234 11.7658C88.3234 15.3202 90.7865 17.8233 94.5561 17.8233ZM94.5561 8.51176C96.2332 8.51176 97.2845 9.86343 97.2845 11.7658C97.2845 13.6681 96.2332 15.0198 94.5561 15.0198C92.879 15.0198 91.8027 13.6932 91.8027 11.7658C91.8027 9.8384 92.839 8.51176 94.5561 8.51176ZM127.632 17.8233C130.185 17.8233 131.912 16.8221 132.713 15.7457L131.086 13.8684C130.711 14.3086 130.242 14.6586 129.713 14.8926C129.185 15.1266 128.61 15.2385 128.032 15.2201C126.08 15.2201 124.979 14.1187 124.678 12.5418H132.638C132.709 12.1284 132.742 11.7095 132.738 11.2902C132.738 8.06122 130.736 5.70831 127.306 5.70831C123.652 5.70831 121.269 8.23642 121.269 11.7658C121.269 15.2951 123.652 17.8233 127.632 17.8233ZM127.306 8.31156C128.733 8.31156 129.584 9.36281 129.609 10.7645H124.678C124.929 9.18759 125.955 8.31156 127.306 8.31156ZM140.748 8.96116C139.442 8.96116 138.315 9.98743 138.315 11.9649V17.697H134.886V5.88234L137.564 5.78224C137.807 6.63058 137.949 7.50415 137.99 8.38544H138.09C138.541 6.88358 139.467 5.73219 141.249 5.73219C141.851 5.72518 142.448 5.84454 143.001 6.0826L142.1 9.38667C141.706 9.10598 141.233 8.95706 140.748 8.96116ZM149.734 17.8233C152.287 17.8233 154.014 16.8221 154.815 15.7457L153.188 13.8684C152.814 14.3086 152.344 14.6586 151.816 14.8926C151.287 15.1266 150.713 15.2385 150.135 15.2201C148.177 15.2201 147.076 14.1187 146.781 12.5418H154.74C154.811 12.1284 154.845 11.7095 154.841 11.2902C154.841 8.06122 152.838 5.70831 149.409 5.70831C145.754 5.70831 143.371 8.23642 143.371 11.7658C143.371 15.2951 145.754 17.8233 149.734 17.8233ZM149.409 8.31156C150.836 8.31156 151.687 9.36281 151.712 10.7645H146.781C147.031 9.18759 148.052 8.31156 149.409 8.31156ZM159.6 17.4925C159.279 17.7071 158.901 17.8216 158.515 17.8216C157.998 17.8203 157.502 17.6141 157.136 17.2483C156.77 16.8824 156.564 16.3866 156.563 15.8692C156.563 15.483 156.677 15.1055 156.892 14.7845C157.106 14.4634 157.411 14.2131 157.768 14.0654C158.125 13.9176 158.517 13.8789 158.896 13.9543C159.275 14.0296 159.622 14.2156 159.896 14.4886C160.169 14.7617 160.355 15.1095 160.43 15.4883C160.505 15.867 160.467 16.2596 160.319 16.6163C160.171 16.9731 159.921 17.278 159.6 17.4925Z", fill: "#b7b7bb" }));
};
var CompanyPlaceholder$1 = CompanyPlaceholder;

const loginBoxStyler = formik_esm.createStyled();
const Container$1 = loginBoxStyler(formik_esm.Box)(({ theme }) => {
    var _a, _b, _c;
    return (Object.assign({ color: '#a9a9ab', marginTop: '.5rem', marginBottom: '2rem', width: '100%', textAlign: (_b = (_a = theme.logo) === null || _a === void 0 ? void 0 : _a.alignment) !== null && _b !== void 0 ? _b : 'center', height: '50px', '& .MuiCompanyLogo-img': {
            maxWidth: '100%',
            maxHeight: '100%',
        } }, (_c = theme.logo) === null || _c === void 0 ? void 0 : _c.style));
});
const CompanyLogo = (props) => {
    var _a, _b;
    const { logo } = formik_esm.useTheme();
    let component;
    if ((_b = (_a = logo === null || logo === void 0 ? void 0 : logo.image) === null || _a === void 0 ? void 0 : _a.startsWith) === null || _b === void 0 ? void 0 : _b.call(_a, 'http')) {
        component = FronteggApp.React.createElement("img", { className: "MuiCompanyLogo-img", src: logo === null || logo === void 0 ? void 0 : logo.image, alt: "company-logo", "data-test-id": 'company-logo' });
    }
    else {
        component = FronteggApp.React.createElement(UnstyledCustomComponent, { componentKey: "logo.image" },
            FronteggApp.React.createElement(CompanyPlaceholder$1, null));
    }
    return FronteggApp.React.createElement(Container$1, Object.assign({}, props), component);
};

const styled$6 = formik_esm.createStyled();
const BoxCustomComponents$1 = CustomComponent;
const BoxElementContainer = styled$6(formik_esm.Card)(({ theme: { spacing, palette, boxStyle } }) => {
    return (Object.assign({ overflow: 'auto', maxWidth: '100%', boxSizing: 'border-box', width: '480px', padding: spacing(8), border: 'none', borderRadius: '9px', backgroundCard: palette.common.white }, boxStyle));
});
const BoxElement = ({ children, themeOptionKey: themeOptionKeyProps }) => {
    const themeOptionKey = themeOptionKeyProps !== null && themeOptionKeyProps !== void 0 ? themeOptionKeyProps : useThemeOptionKey();
    const { poweredByPlacement, logo } = formik_esm.useTheme();
    return FronteggApp.React.createElement(BoxElementContainer, null,
        (logo === undefined || (logo === null || logo === void 0 ? void 0 : logo.placement) === undefined || logo.placement == 'box') && FronteggApp.React.createElement(CompanyLogo, null),
        FronteggApp.React.createElement(BoxCustomComponents$1, { componentKey: 'boxHeader', className: `fe-${themeOptionKey}-box-header` }),
        children,
        FronteggApp.React.createElement(BoxCustomComponents$1, { componentKey: 'boxFooter', className: `fe-${themeOptionKey}-box-title` }),
        (!poweredByPlacement || poweredByPlacement === 'box') && FronteggApp.React.createElement(PowerByFrontegg, null));
};
var BoxElement$1 = BoxElement;

const styled$5 = _default();
const Logo = styled$5(formik_esm.Box)(({ theme, image, itemNumber, vertical }) => {
    var _a, _b, _c;
    return (Object.assign({ height: '100%', width: '100%', backgroundSize: 'contain', backgroundRepeat: 'no-repeat', backgroundImage: `url(${image})`, backgroundPosition: [0, 3].includes(itemNumber) && !vertical ? 'left' : 'center' }, (_c = (_b = (_a = theme.layout) === null || _a === void 0 ? void 0 : _a.splitModeStyles) === null || _b === void 0 ? void 0 : _b.logos) === null || _c === void 0 ? void 0 : _c.logoStyle));
});
const LogosContainer = styled$5(formik_esm.Grid)(({ theme }) => {
    var _a, _b, _c;
    return (Object.assign({ alignItems: 'center', justifyContent: 'space-between', rowGap: '60px' }, (_c = (_b = (_a = theme.layout) === null || _a === void 0 ? void 0 : _a.splitModeStyles) === null || _b === void 0 ? void 0 : _b.logos) === null || _c === void 0 ? void 0 : _c.logosContainerStyle));
});
const LogoContainer = styled$5(formik_esm.Grid)(({ theme }) => ({
    display: 'flex',
    width: '100%',
    maxHeight: '3rem',
    height: '3rem',
    justifyContent: 'center',
}));
const LogosComponent = ({ logos, layout = 'vertical' }) => {
    if (!logos) {
        return null;
    }
    const logosArray = FronteggApp.react.exports.useMemo(() => Object.values(logos)
        .map((logo) => ({ id: uuid.v4(), logo }))
        .filter(({ logo }) => !!logo), [logos]);
    const vertical = layout === 'vertical';
    const shouldRenderEmptyItem = logosArray.length < 3 && !(logosArray.length > 3)
        ? true
        : logosArray.length > 3 && logosArray.length < 6
            ? true
            : false;
    return (FronteggApp.React.createElement(LogosContainer, { container: true, columnGap: !vertical ? '35px' : 0 },
        logosArray.map(({ id, logo }, idx) => (FronteggApp.React.createElement(formik_esm.Grid, { key: id, xs: vertical ? 6 : 3, item: true },
            FronteggApp.React.createElement(LogoContainer, null,
                FronteggApp.React.createElement(Logo, { image: logo !== null && logo !== void 0 ? logo : '', itemNumber: idx, vertical: vertical }))))),
        !vertical && shouldRenderEmptyItem && FronteggApp.React.createElement(formik_esm.Grid, { key: 'empty-item', xs: vertical ? 6 : 3, item: true })));
};

const styled$4 = formik_esm.createStyled();
const Icon = styled$4(formik_esm.CheckCircleFilledIcon)(({ theme }) => {
    var _a, _b, _c;
    return (Object.assign({ marginRight: theme.spacing(5), color: theme.palette.primary.main }, (_c = (_b = (_a = theme.layout) === null || _a === void 0 ? void 0 : _a.splitModeStyles) === null || _b === void 0 ? void 0 : _b.values) === null || _c === void 0 ? void 0 : _c.valuesIconStyle));
});
const Value = styled$4(formik_esm.Box)(({ theme }) => {
    var _a, _b, _c;
    return (Object.assign({}, (_c = (_b = (_a = theme.layout) === null || _a === void 0 ? void 0 : _a.splitModeStyles) === null || _b === void 0 ? void 0 : _b.values) === null || _c === void 0 ? void 0 : _c.valuesTextStyle));
});
const ValuesContainer = styled$4(formik_esm.Box)({
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    flexDirection: 'column',
});
const ValuesComponent = ({ t }) => {
    const values = t('valuesComponent', { returnObjects: true });
    const isValuesEmpty = typeof values === 'string';
    const preparedValues = FronteggApp.react.exports.useMemo(() => (isValuesEmpty ? [] : Object.values(values).filter((value) => !!value)), [values, isValuesEmpty]);
    if (!preparedValues.length) {
        return null;
    }
    return (FronteggApp.React.createElement(ValuesContainer, null, preparedValues.map((value, index) => {
        const isLastItem = index === preparedValues.length - 1;
        return (FronteggApp.React.createElement(formik_esm.Box, { key: value, width: '100%', display: 'flex', mb: isLastItem ? 0 : 4, alignItems: 'center' },
            FronteggApp.React.createElement(Icon, null),
            FronteggApp.React.createElement(Value, null, value)));
    })));
};

const styled$3 = formik_esm.createStyled();
const TestimonialsContainer = styled$3(formik_esm.Box)(({ theme }) => {
    var _a, _b, _c;
    return (Object.assign({ marginBottom: theme.spacing(10) }, (_c = (_b = (_a = theme.layout) === null || _a === void 0 ? void 0 : _a.splitModeStyles) === null || _b === void 0 ? void 0 : _b.testimonials) === null || _c === void 0 ? void 0 : _c.testimonialsContainerStyle));
});
const Label = styled$3((props) => FronteggApp.React.createElement(formik_esm.Typography$1, Object.assign({}, props, { variant: 'testimonialTitle' })))(({ theme }) => {
    var _a, _b, _c;
    return (Object.assign({}, (_c = (_b = (_a = theme.layout) === null || _a === void 0 ? void 0 : _a.splitModeStyles) === null || _b === void 0 ? void 0 : _b.testimonials) === null || _c === void 0 ? void 0 : _c.testimonialsTitleStyle));
});
const SubTitle = styled$3((props) => FronteggApp.React.createElement(formik_esm.Typography$1, Object.assign({}, props, { variant: 'testimonialSubtitle' })))(({ theme }) => {
    var _a, _b, _c;
    return (Object.assign({}, (_c = (_b = (_a = theme.layout) === null || _a === void 0 ? void 0 : _a.splitModeStyles) === null || _b === void 0 ? void 0 : _b.testimonials) === null || _c === void 0 ? void 0 : _c.testtomonialsSubtitleStyle));
});
const QuoteLeft = styled$3(formik_esm.QuotesIcon)(({ theme }) => {
    var _a, _b, _c;
    return (Object.assign(Object.assign({}, (_c = (_b = (_a = theme.layout) === null || _a === void 0 ? void 0 : _a.splitModeStyles) === null || _b === void 0 ? void 0 : _b.testimonials) === null || _c === void 0 ? void 0 : _c.testimonialsQuotesStyle), { marginRight: theme.spacing(4) }));
});
const QuoteRight = styled$3(formik_esm.QuotesIcon)(({ theme }) => {
    var _a, _b, _c;
    return (Object.assign(Object.assign({}, (_c = (_b = (_a = theme.layout) === null || _a === void 0 ? void 0 : _a.splitModeStyles) === null || _b === void 0 ? void 0 : _b.testimonials) === null || _c === void 0 ? void 0 : _c.testimonialsQuotesStyle), { marginLeft: theme.spacing(4) }));
});
const Description$1 = styled$3((props) => FronteggApp.React.createElement(formik_esm.Typography$1, Object.assign({}, props, { variant: 'testimonialDescription' })))(({ theme }) => {
    var _a, _b, _c;
    return (Object.assign({ width: '100%' }, (_c = (_b = (_a = theme.layout) === null || _a === void 0 ? void 0 : _a.splitModeStyles) === null || _b === void 0 ? void 0 : _b.testimonials) === null || _c === void 0 ? void 0 : _c.testimonialsTextStyle));
});
const TestimonialsComponent = ({ testimonials, t }) => {
    var _a, _b, _c, _d, _e, _f;
    const { layout } = formik_esm.useTheme();
    const testimonialsObject = t('testimonialComponent', {
        returnObjects: true,
    });
    if (typeof testimonialsObject === 'string') {
        return null;
    }
    const preparedTestimonials = FronteggApp.react.exports.useMemo(() => Object.keys(testimonialsObject)
        .map((key) => {
        return Object.assign(Object.assign({}, testimonialsObject[key]), { image: testimonials === null || testimonials === void 0 ? void 0 : testimonials[key] });
    })
        .filter((item) => item.label && item.text), [testimonialsObject, testimonials]);
    const indicatorPropsStyles = (_b = (_a = layout === null || layout === void 0 ? void 0 : layout.splitModeStyles) === null || _a === void 0 ? void 0 : _a.testimonials) === null || _b === void 0 ? void 0 : _b.testimonialsIndicatorStyle;
    const indicatorActivePropsStyles = (_d = (_c = layout === null || layout === void 0 ? void 0 : layout.splitModeStyles) === null || _c === void 0 ? void 0 : _c.testimonials) === null || _d === void 0 ? void 0 : _d.testimonialsActiveIndicatorStyle;
    const indicatorContainerPropsStyles = (_f = (_e = layout === null || layout === void 0 ? void 0 : layout.splitModeStyles) === null || _e === void 0 ? void 0 : _e.testimonials) === null || _f === void 0 ? void 0 : _f.testimonialsIndicatorContainerStyle;
    return (FronteggApp.React.createElement(TestimonialsContainer, null, !!preparedTestimonials.length && (FronteggApp.React.createElement(formik_esm.Carousel, { duration: 750, navButtonsAlwaysInvisible: true, indicatorIconButtonProps: { style: indicatorPropsStyles }, indicatorContainerProps: {
            style: Object.assign(Object.assign({}, indicatorContainerPropsStyles), (preparedTestimonials.length <= 1 && { display: 'none' })),
        }, activeIndicatorIconButtonProps: { style: indicatorActivePropsStyles } }, preparedTestimonials.map(({ label, subtitle, text, image }) => {
        return (FronteggApp.React.createElement(formik_esm.Box, { key: label, textAlign: 'center' },
            FronteggApp.React.createElement(formik_esm.Box, { mb: 8 },
                FronteggApp.React.createElement(formik_esm.Box, null,
                    image && (FronteggApp.React.createElement(formik_esm.Box, { display: 'flex', justifyContent: 'center' },
                        FronteggApp.React.createElement(formik_esm.Box, { mb: 3, borderRadius: '50%', height: '80px', width: '80px', border: '2px solid #fff', sx: {
                                background: `url(${image})`,
                                backgroundRepeat: 'no-repeat',
                                backgroundSize: 'contain',
                                backgroundPosition: 'center',
                            } }))),
                    FronteggApp.React.createElement(formik_esm.Box, null,
                        FronteggApp.React.createElement(Label, null, label),
                        FronteggApp.React.createElement(SubTitle, null, subtitle)))),
            FronteggApp.React.createElement(formik_esm.Box, { display: 'flex', width: '100%' },
                FronteggApp.React.createElement(QuoteLeft, null),
                FronteggApp.React.createElement(Description$1, null, text),
                FronteggApp.React.createElement(QuoteRight, null))));
    })))));
};

const styled$2 = _default();
const TitleDescriptionContainer = styled$2(formik_esm.Box)(({ theme }) => {
    var _a, _b, _c;
    return (Object.assign({ display: 'flex', alignItems: 'center', justifyContent: 'center', flexDirection: 'column', marginBottom: '2.5rem' }, (_c = (_b = (_a = theme.layout) === null || _a === void 0 ? void 0 : _a.splitModeStyles) === null || _b === void 0 ? void 0 : _b.titleDescription) === null || _c === void 0 ? void 0 : _c.titleDescriptionContainerStyle));
});
const Title = styled$2((props) => FronteggApp.React.createElement(formik_esm.Typography$1, Object.assign({}, props, { variant: 'h1' })))(({ theme }) => {
    var _a, _b, _c;
    return (Object.assign({ width: '100%' }, ((_c = (_b = (_a = theme.layout) === null || _a === void 0 ? void 0 : _a.splitModeStyles) === null || _b === void 0 ? void 0 : _b.titleDescription) === null || _c === void 0 ? void 0 : _c.titleDescriptionTitleStyle)));
});
const CompanyName = styled$2('span')(({ theme }) => {
    var _a, _b, _c;
    return (Object.assign({}, ((_c = (_b = (_a = theme.layout) === null || _a === void 0 ? void 0 : _a.splitModeStyles) === null || _b === void 0 ? void 0 : _b.titleDescription) === null || _c === void 0 ? void 0 : _c.titleDescriptionCompanyNameStyle)));
});
const Description = styled$2((props) => FronteggApp.React.createElement(formik_esm.Typography$1, Object.assign({}, props, { variant: 'description' })))(({ theme }) => {
    var _a, _b, _c;
    return (Object.assign({ width: '100%' }, (_c = (_b = (_a = theme.layout) === null || _a === void 0 ? void 0 : _a.splitModeStyles) === null || _b === void 0 ? void 0 : _b.titleDescription) === null || _c === void 0 ? void 0 : _c.titleDescriptionDescriptionStyle));
});
const TitleDescriptionComponent = ({ t }) => {
    const titleDescriptionComponent = t('titleDescriptionComponent', {
        returnObjects: true,
    });
    if (typeof titleDescriptionComponent === 'string') {
        return null;
    }
    const { titleBeforeCompanyName, titleAfterCompanyName, description, companyName } = titleDescriptionComponent;
    const titleBeforeCompanyNamePresent = !titleBeforeCompanyName.includes('titleBeforeCompanyName');
    const titleAfterCompanyNamePresent = !titleAfterCompanyName.includes('titleAfterCompanyName');
    const companyNamePresent = !companyName.includes('companyName') && !!companyName;
    const descriptionPresent = !description.includes('description') && !!description;
    return (FronteggApp.React.createElement(TitleDescriptionContainer, null,
        FronteggApp.React.createElement(formik_esm.Box, { mb: descriptionPresent ? 4 : 0, display: 'flex', flexWrap: 'wrap', width: '100%' },
            FronteggApp.React.createElement(Title, null,
                titleBeforeCompanyNamePresent && titleBeforeCompanyName,
                companyNamePresent && FronteggApp.React.createElement(CompanyName, null,
                    "\u00A0",
                    companyName),
                "\u00A0",
                titleAfterCompanyNamePresent && titleAfterCompanyName)),
        descriptionPresent && FronteggApp.React.createElement(Description, null, description)));
};

const styled$1 = _default();
const SideElementsDivider = styled$1(formik_esm.Divider)(({ theme, showdivider }) => {
    var _a, _b;
    return (Object.assign({ width: showdivider ? '100%' : 0, margin: theme.spacing(16, 0) }, (_b = (_a = theme.layout) === null || _a === void 0 ? void 0 : _a.splitModeStyles) === null || _b === void 0 ? void 0 : _b.dividerStyle));
});
const SideElementsComponent = ({ themeOptionKey: themeOptionKeyProps }) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x;
    const { layout } = formik_esm.useTheme();
    const localizationKey = themeOptionKeyProps === 'signup' ? 'splitSignUp' : 'splitLogin';
    const t = useT(`${themeOptionKeyProps}.${[localizationKey]}`);
    const twoSideElementsActive = !!((_b = (_a = layout === null || layout === void 0 ? void 0 : layout.splitModeElements) === null || _a === void 0 ? void 0 : _a.activeElements) === null || _b === void 0 ? void 0 : _b.element1) && !!((_d = (_c = layout === null || layout === void 0 ? void 0 : layout.splitModeElements) === null || _c === void 0 ? void 0 : _c.activeElements) === null || _d === void 0 ? void 0 : _d.element2);
    const showTitle = !!((_f = (_e = layout === null || layout === void 0 ? void 0 : layout.splitModeElements) === null || _e === void 0 ? void 0 : _e.activeElements) === null || _f === void 0 ? void 0 : _f.titleDescription);
    const splitModeElements = FronteggApp.react.exports.useMemo(() => {
        var _a, _b, _c, _d, _e;
        return ({
            logos: (FronteggApp.React.createElement(LogosComponent, { layout: twoSideElementsActive || showTitle ? 'horizontal' : (_b = (_a = layout === null || layout === void 0 ? void 0 : layout.splitModeElements) === null || _a === void 0 ? void 0 : _a.logos) === null || _b === void 0 ? void 0 : _b.layout, logos: (_d = (_c = layout === null || layout === void 0 ? void 0 : layout.splitModeElements) === null || _c === void 0 ? void 0 : _c.logos) === null || _d === void 0 ? void 0 : _d.logos })),
            values: FronteggApp.React.createElement(ValuesComponent, { t: t }),
            testimonials: FronteggApp.React.createElement(TestimonialsComponent, { t: t, testimonials: (_e = layout === null || layout === void 0 ? void 0 : layout.splitModeElements) === null || _e === void 0 ? void 0 : _e.testimonials }),
            titleDescription: FronteggApp.React.createElement(TitleDescriptionComponent, { t: t }),
        });
    }, [
        twoSideElementsActive,
        showTitle,
        (_h = (_g = layout === null || layout === void 0 ? void 0 : layout.splitModeElements) === null || _g === void 0 ? void 0 : _g.logos) === null || _h === void 0 ? void 0 : _h.layout,
        (_k = (_j = layout === null || layout === void 0 ? void 0 : layout.splitModeElements) === null || _j === void 0 ? void 0 : _j.logos) === null || _k === void 0 ? void 0 : _k.logos,
        (_l = layout === null || layout === void 0 ? void 0 : layout.splitModeElements) === null || _l === void 0 ? void 0 : _l.testimonials,
        t,
    ]);
    const showDivider = (_o = (_m = layout === null || layout === void 0 ? void 0 : layout.splitModeElements) === null || _m === void 0 ? void 0 : _m.showDivider) !== null && _o !== void 0 ? _o : true;
    const showTitleDivider = !!((_p = layout === null || layout === void 0 ? void 0 : layout.splitModeElements) === null || _p === void 0 ? void 0 : _p.showTitleDivider);
    if (((layout === null || layout === void 0 ? void 0 : layout.type) !== 'float-left' && (layout === null || layout === void 0 ? void 0 : layout.type) !== 'float-right') || !!(layout === null || layout === void 0 ? void 0 : layout.sideElement)) {
        return FronteggApp.React.createElement(CustomComponent, { componentKey: 'layout.sideElement', className: 'fe-page-side-element' });
    }
    return (FronteggApp.React.createElement(formik_esm.Box, { className: 'fe-page-side-element', display: 'grid', justifyItems: 'center', alignItems: 'center' },
        FronteggApp.React.createElement(formik_esm.Box, { minWidth: '70%', maxWidth: '70%', py: 10 },
            showTitle && splitModeElements['titleDescription'],
            showTitle && showTitleDivider && FronteggApp.React.createElement(SideElementsDivider, { showdivider: showTitleDivider ? 'true' : undefined }),
            ((_r = (_q = layout === null || layout === void 0 ? void 0 : layout.splitModeElements) === null || _q === void 0 ? void 0 : _q.activeElements) === null || _r === void 0 ? void 0 : _r.element1) &&
                splitModeElements[(_t = (_s = layout === null || layout === void 0 ? void 0 : layout.splitModeElements) === null || _s === void 0 ? void 0 : _s.activeElements) === null || _t === void 0 ? void 0 : _t.element1],
            twoSideElementsActive && FronteggApp.React.createElement(SideElementsDivider, { showdivider: showDivider ? 'true' : undefined }),
            ((_v = (_u = layout.splitModeElements) === null || _u === void 0 ? void 0 : _u.activeElements) === null || _v === void 0 ? void 0 : _v.element2) &&
                splitModeElements[(_x = (_w = layout.splitModeElements) === null || _w === void 0 ? void 0 : _w.activeElements) === null || _x === void 0 ? void 0 : _x.element2])));
};

const styled = formik_esm.createStyled();
const BoxCustomComponents = CustomComponent;
const PageElementContainer = styled(formik_esm.Box)(({ theme }) => ({
    flex: 1,
    height: '100vh',
    overflow: 'auto',
    position: 'relative',
}));
const Container = styled(formik_esm.Box)(({ theme: { pageStyle } }) => (Object.assign({ display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center', minHeight: '100vh', padding: '2rem 0', boxSizing: 'border-box' }, pageStyle)));
const PageElement = ({ children, themeOptionKey: themeOptionKeyProps }) => {
    const themeOptionKey = themeOptionKeyProps !== null && themeOptionKeyProps !== void 0 ? themeOptionKeyProps : useThemeOptionKey();
    const { poweredByPlacement, logo } = formik_esm.useTheme();
    return FronteggApp.React.createElement(FronteggApp.React.Fragment, null,
        FronteggApp.React.createElement(PageElementContainer, { className: 'fe-page-container-element' },
            FronteggApp.React.createElement(Container, null,
                (logo === null || logo === void 0 ? void 0 : logo.placement) === 'page' && FronteggApp.React.createElement(CompanyLogo, null),
                FronteggApp.React.createElement(BoxCustomComponents, { componentKey: 'pageHeader', className: `fe-${themeOptionKey}-page-header` }),
                children,
                FronteggApp.React.createElement(BoxCustomComponents, { componentKey: 'pageFooter', className: `fe-${themeOptionKey}-page-footer` }),
                (poweredByPlacement === 'page' || poweredByPlacement === 'leftBottomCorner') && FronteggApp.React.createElement(PowerByFrontegg, null))),
        FronteggApp.React.createElement(SideElementsComponent, { themeOptionKey: themeOptionKey }));
};
var PageElement$1 = PageElement;

const wrapPage = (Component, themeOptionKey) => () => {
    return FronteggApp.React.createElement(RootElement$1, { themeOptionKey: themeOptionKey },
        FronteggApp.React.createElement(PageElement$1, { themeOptionKey: themeOptionKey },
            FronteggApp.React.createElement(BoxElement$1, { themeOptionKey: themeOptionKey },
                FronteggApp.React.createElement(Component, null))));
};
const wrapPageWithoutBox = (Component, themeOptionKey) => () => {
    return FronteggApp.React.createElement(RootElement$1, { themeOptionKey: themeOptionKey },
        FronteggApp.React.createElement(PageElement$1, { themeOptionKey: themeOptionKey },
            FronteggApp.React.createElement(Component, null)));
};
const wrapPageContext = (Component, themeOptionKey) => () => {
    return FronteggApp.React.createElement(ThemeOptionKeyContext$1.Provider, { value: themeOptionKey },
        FronteggApp.React.createElement(TransparentRootElement, null,
            FronteggApp.React.createElement(Component, null)));
};

const TenantInvitationFailed = ({ t, variant }) => {
    const { resetLoginState } = formik_esm.useAuthActions();
    const routes = formik_esm.useAuthRoutes();
    const { inviteTokenError } = formik_esm.useLoginState(({ inviteTokenError }) => ({ inviteTokenError }));
    const onRedirectTo = formik_esm.useOnRedirectTo();
    const backPath = FronteggApp.react.exports.useMemo(() => variant === 'signup' ? routes.signUpUrl : routes.loginUrl, [variant]);
    return FronteggApp.React.createElement(FronteggApp.React.Fragment, null,
        FronteggApp.React.createElement(formik_esm.LoginMessage, { title: t('failedJoinTenantTitle'), description: inviteTokenError || '', testId: "tenant-invitation-failed" },
            FronteggApp.React.createElement(formik_esm.Link, { sx: { mt: 8 }, className: 'fe-back-to-login-btn', "data-test-id": 'back-to-login-btn', onClick: () => {
                    resetLoginState();
                    onRedirectTo(backPath, { preserveQueryParams: false });
                } }, t('failedJoinTenantBackButton'))));
};

const TitleComponent = formik_esm.styled(UnstyledCustomComponent)(({ isThumbnailMode, theme, componentKey, componentKeys = [] }) => (Object.assign(Object.assign({ transition: 'all 0.3s ease-in-out', fontStyle: 'normal', fontWeight: 'bold', marginBottom: '2rem', fontSize: isThumbnailMode ? '1.25rem' : '1.5rem', opacity: isThumbnailMode ? 0.5 : 1, lineHeight: '2.5rem', textAlign: 'center' }, (theme[`boxTitleStyle`])), ([componentKey, ...componentKeys.slice().reverse()].reduce((styles, key) => (Object.assign(Object.assign({}, styles), theme[`${key}Style`])), {})))));
const BoxTitle = ({ isThumbnailMode, componentKey, title, componentKeys }) => {
    return FronteggApp.React.createElement(TitleComponent, { isThumbnailMode: isThumbnailMode, componentKey: componentKey, componentKeys: componentKeys, className: `fe-${componentKey}`, title: title }, title);
};
const MessageComponent = formik_esm.styled(UnstyledCustomComponent)(({ theme, componentKey, componentKeys = [], textAlignCenter }) => (Object.assign(Object.assign({ fontStyle: 'normal', fontWeight: 400, fontSize: '1rem', marginTop: '0.5rem', marginBottom: '1.5rem', lineHeight: '1.5rem', textAlign: `${textAlignCenter ? 'center' : 'inherit'}`, color: '#7A7D93' }, (theme[`boxMessageStyle`])), ([componentKey, ...componentKeys.slice().reverse()].reduce((styles, key) => (Object.assign(Object.assign({}, styles), theme[`${key}Style`])), {})))));
const BoxMessage = ({ componentKey, message, componentKeys, textAlignCenter }) => {
    return FronteggApp.React.createElement(MessageComponent, { componentKey: componentKey, componentKeys: componentKeys, className: `fe-${componentKey}`, message: message, textAlignCenter: textAlignCenter }, message);
};

const loginStyler = formik_esm.createStyled();
const LoginPageTitle = BoxTitle;
const LoginPageMessage = BoxMessage;
const SignupMessageComponent = CustomComponent;
const ResendOTCComponent = UnstyledCustomComponent;
const LoginIconComponent = CustomComponent;

const loaderStyler = formik_esm.createStyled();
const CenterContent = loaderStyler(formik_esm.Box)(({ theme }) => {
    return ({
        background: '#FFFFFF',
        position: 'fixed',
        top: '0',
        left: '0',
        width: '100vw',
        height: '100vh',
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        zIndex: 100000,
    });
});
const getUri$1 = (urlStrategy) => {
    if (urlStrategy === 'path') {
        return (window !== null && window !== void 0 ? window : document).location.pathname;
    }
    else {
        return ((window !== null && window !== void 0 ? window : document).location.hash || '#').substring(1);
    }
};
const PageLoader = () => {
    var _a, _b;
    const { customLoader } = formik_esm.useShadowDom();
    const theme = formik_esm.useTheme();
    const { loginUrl, logoutUrl, activateUrl, acceptInvitationUrl, forgetPasswordUrl, resetPasswordUrl, } = formik_esm.useAuthRoutes();
    const { urlStrategy } = formik_esm.useShadowDom();
    const pathname = getUri$1(urlStrategy);
    FronteggApp.react.exports.useEffect(() => {
        document.body.classList.add('frontegg-loading');
        (typeof customLoader === 'function') && (customLoader === null || customLoader === void 0 ? void 0 : customLoader(true));
        return () => {
            document.body.classList.remove('frontegg-loading');
            (typeof customLoader === 'function') && (customLoader === null || customLoader === void 0 ? void 0 : customLoader(false));
        };
    }, [customLoader]);
    const isAuthRoute = FronteggApp.react.exports.useMemo(() => {
        const routeValue = [loginUrl, logoutUrl, activateUrl, acceptInvitationUrl, forgetPasswordUrl, resetPasswordUrl];
        return routeValue.includes(pathname);
    }, [
        pathname,
        loginUrl,
        logoutUrl,
        activateUrl,
        acceptInvitationUrl,
        forgetPasswordUrl,
        resetPasswordUrl
    ]);
    if (customLoader) {
        return null;
    }
    return FronteggApp.React.createElement(CenterContent, { sx: (isAuthRoute ? Object.assign(Object.assign({}, theme.rootStyle), (_a = theme.loader) === null || _a === void 0 ? void 0 : _a.containerStyle) : Object.assign({}, (_b = theme.loader) === null || _b === void 0 ? void 0 : _b.containerStyle)) },
        FronteggApp.React.createElement(formik_esm.Loader$1, { "data-test-id": "page-loader" }));
};

var LoginStrategyID;
(function (LoginStrategyID) {
    LoginStrategyID["Internal"] = "internal";
    LoginStrategyID["UsbKey"] = "usb-key";
    LoginStrategyID["Main"] = "main";
    LoginStrategyID["Android"] = "android";
    LoginStrategyID["Sms"] = "sms";
})(LoginStrategyID || (LoginStrategyID = {}));
const LoginCarouselContext = FronteggApp.react.exports.createContext({});
const useLoginCarouselContext = () => FronteggApp.react.exports.useContext(LoginCarouselContext);
const useShowThumbnail = (loginStrategyId) => {
    const { items, activeIndex } = useLoginCarouselContext();
    const isActiveInCarousel = activeIndex === (items === null || items === void 0 ? void 0 : items.findIndex(({ id }) => loginStrategyId === id));
    return !isActiveInCarousel;
};

const LoginIconContainer = formik_esm.styled((_a) => {
    var props = FronteggApp.__rest(_a, ["isThumbnailMode", "iconSize"]);
    return FronteggApp.React.createElement(formik_esm.Box, Object.assign({}, props));
})(({ isThumbnailMode, iconSize, theme }) => ({
    transition: 'all 0.3s ease-in-out',
    display: 'flex',
    justifyContent: 'center',
    marginBottom: isThumbnailMode ? 0 : '1.5rem',
    marginTop: isThumbnailMode ? '1rem' : 0,
    svg: {
        color: 'transparent',
        transition: 'all 0.3s ease-in-out',
        width: isThumbnailMode ? '64px' : `${iconSize !== null && iconSize !== void 0 ? iconSize : 150}px`,
        height: isThumbnailMode ? '64px' : `${iconSize !== null && iconSize !== void 0 ? iconSize : 150}px`,
        opacity: isThumbnailMode ? 0.5 : 1,
        '.custom-fill': {
            fill: theme.palette.primary.main
        },
        '.custom-stroke': {
            stroke: theme.palette.primary.main
        },
    }
}));

const RecaptchaContext = FronteggApp.react.exports.createContext({});
const RecaptchaProvider = ({ children, action }) => {
    var _a;
    const recaptchaRef = FronteggApp.react.exports.useRef(null);
    const [onTokenLoad, setOnTokenLoad] = FronteggApp.react.exports.useState(() => (token) => { });
    const recaptcha = useRecaptcha({ action, recaptchaRef, onTokenLoad });
    const loadNewToken = FronteggApp.react.exports.useCallback((callback) => {
        var _a;
        if (callback) {
            setOnTokenLoad(() => (token) => {
                callback(token);
                setOnTokenLoad(() => (token) => { });
            });
        }
        (_a = recaptchaRef === null || recaptchaRef === void 0 ? void 0 : recaptchaRef.current) === null || _a === void 0 ? void 0 : _a.execute();
    }, [setOnTokenLoad, recaptchaRef]);
    FronteggApp.react.exports.useEffect(() => {
        return () => {
            const recaptchaElement = document.getElementsByClassName('grecaptcha-badge')[0];
            if (recaptchaElement) {
                recaptchaElement.style.visibility = 'hidden';
            }
        };
    }, []);
    return (FronteggApp.React.createElement(RecaptchaContext.Provider, { value: { loadNewToken, recaptchaRef, token: (_a = recaptcha === null || recaptcha === void 0 ? void 0 : recaptcha.token) !== null && _a !== void 0 ? _a : '' } },
        children,
        FronteggApp.React.createElement(formik_esm.Box, { position: 'absolute' }, recaptcha === null || recaptcha === void 0 ? void 0 : recaptcha.component)));
};
const useRecaptchaContext = () => FronteggApp.react.exports.useContext(RecaptchaContext);

const LoginErrorMessage = formik_esm.styled(formik_esm.Alert$1)(({ theme }) => ({
    padding: '0.5rem 1rem',
    marginBottom: theme.spacing(2),
}));
LoginErrorMessage.defaultProps = {
    className: 'fe-alert-error',
    severity: 'error',
};

const StyledContainer$3 = loginStyler(formik_esm.Box)(({ theme }) => {
    var _a;
    return (Object.assign({}, (_a = theme.disclaimer) === null || _a === void 0 ? void 0 : _a.disclaimerContainerStyle));
});
const StyledDisclaimerText$1 = loginStyler(formik_esm.Typography$1)(({ theme }) => {
    var _a;
    return (Object.assign({ marginTop: '2rem', textAlign: 'center' }, (_a = theme.disclaimer) === null || _a === void 0 ? void 0 : _a.textStyle));
});
const StyledDisclaimerTermsLink$1 = loginStyler(formik_esm.Link)(({ theme }) => {
    var _a, _b;
    return (Object.assign({}, (_b = (_a = theme.disclaimer) === null || _a === void 0 ? void 0 : _a.terms) === null || _b === void 0 ? void 0 : _b.linkStyle));
});
const StyledDisclaimerPrivacyLink$1 = loginStyler(formik_esm.Link)(({ theme }) => {
    var _a, _b;
    return (Object.assign({}, (_b = (_a = theme.disclaimer) === null || _a === void 0 ? void 0 : _a.privacy) === null || _b === void 0 ? void 0 : _b.linkStyle));
});
const DisclaimerInfo = () => {
    const { disclaimer } = formik_esm.useTheme();
    const t = useContextT('loginBox.login');
    const showTerms = FronteggApp.react.exports.useMemo(() => { var _a; return (_a = disclaimer === null || disclaimer === void 0 ? void 0 : disclaimer.terms) === null || _a === void 0 ? void 0 : _a.enabled; }, [disclaimer]);
    const showPrivacy = FronteggApp.react.exports.useMemo(() => { var _a; return (_a = disclaimer === null || disclaimer === void 0 ? void 0 : disclaimer.privacy) === null || _a === void 0 ? void 0 : _a.enabled; }, [disclaimer]);
    if (!showTerms && !showPrivacy) {
        return null;
    }
    return (FronteggApp.React.createElement(StyledContainer$3, null,
        FronteggApp.React.createElement(StyledDisclaimerText$1, { variant: 'body2', "data-test-id": 'login-disclaimer-text' },
            t('disclaimerText'),
            ' ',
            showTerms && (FronteggApp.React.createElement(StyledDisclaimerTermsLink$1, { href: t('termsLink'), target: '_blank', "data-test-id": 'login-terms-link' }, t('termsLinkText'))),
            showTerms && showPrivacy && ` ${t('termsAndPrivacyConjunctionText')} `,
            showPrivacy && (FronteggApp.React.createElement(StyledDisclaimerPrivacyLink$1, { href: t('privacyLink'), target: '_blank', "data-test-id": 'login-privacy-link' }, t('privacyLinkText'))))));
};

const LoginWithWebAuthnForm = ({ onMainAuthenticationRequired, loginStrategyId, buttonText, transports, authenticatorAttachment }) => {
    const { webAuthnPrelogin, webAuthnPostLogin, webAuthnCreateNewDeviceSession, webAuthnVerifyNewDeviceSession, afterAuthNavigation, resetLoginState } = formik_esm.useLoginActions();
    const { loading, error } = formik_esm.useLoginState();
    const { recaptchaRef, token, loadNewToken } = useRecaptchaContext();
    const user = formik_esm.useAuthUserOrNull();
    const handleRegisterNewLogin = FronteggApp.react.exports.useCallback((user) => {
        const createNewDeviceCallback = (response) => FronteggApp.__awaiter(void 0, void 0, void 0, function* () {
            if (!response)
                return;
            const publicKey = Object.assign(Object.assign({}, response), { authenticatorSelection: Object.assign(Object.assign({}, response.authenticatorSelection), { authenticatorAttachment }) });
            const result = yield navigator.credentials.create({ publicKey });
            if (!result)
                return;
            const verifyNewDeviceSessionCallback = (success) => {
                if (!success)
                    return;
                localStorage.setItem(`${user.email}-${loginStrategyId}`, 'true');
                localStorage.setItem(`${user.email}-preferred-login-method`, loginStrategyId);
                resetLoginState();
                afterAuthNavigation();
            };
            webAuthnVerifyNewDeviceSession({ publicKey: result, callback: verifyNewDeviceSessionCallback });
        });
        webAuthnCreateNewDeviceSession({ callback: createNewDeviceCallback });
    }, [webAuthnCreateNewDeviceSession, webAuthnVerifyNewDeviceSession, resetLoginState]);
    const handleLoginUser = FronteggApp.react.exports.useCallback((email) => FronteggApp.__awaiter(void 0, void 0, void 0, function* () {
        const preloginCallback = (response) => FronteggApp.__awaiter(void 0, void 0, void 0, function* () {
            var _a;
            if (!response)
                return;
            response.allowCredentials = (_a = response.allowCredentials) === null || _a === void 0 ? void 0 : _a.map((credential) => (Object.assign(Object.assign({}, credential), { transports })));
            const publicKey = response;
            let result;
            try {
                result = yield navigator.credentials.get({ publicKey });
                if (!result) {
                    loadNewToken();
                    return;
                }
            }
            catch (e) {
                loadNewToken();
                console.log(e);
                return;
            }
            const postloginCallback = (success) => {
                if (!success) {
                    loadNewToken();
                    return;
                }
                localStorage.setItem(`${email}-${loginStrategyId}`, 'true');
                localStorage.setItem(`${email}-preferred-login-method`, loginStrategyId);
                resetLoginState();
            };
            if (recaptchaRef === null || recaptchaRef === void 0 ? void 0 : recaptchaRef.current) {
                loadNewToken((recaptchaToken) => webAuthnPostLogin({ publicKey: result, recaptchaToken, callback: postloginCallback }));
            }
            else {
                webAuthnPostLogin({ publicKey: result, callback: postloginCallback });
            }
        });
        webAuthnPrelogin({ email, recaptchaToken: token, callback: preloginCallback });
    }), [webAuthnPrelogin, webAuthnPostLogin, token]);
    const handleSubmit = FronteggApp.react.exports.useCallback(() => new Promise((resolve) => {
        const email = localStorage.getItem('email');
        const usedStrategy = localStorage.getItem(`${email}-${loginStrategyId}`);
        if (email && usedStrategy) {
            handleLoginUser(email);
        }
        else if (user) {
            handleRegisterNewLogin(user);
        }
        else {
            onMainAuthenticationRequired === null || onMainAuthenticationRequired === void 0 ? void 0 : onMainAuthenticationRequired();
        }
    }), [handleLoginUser, handleRegisterNewLogin, onMainAuthenticationRequired, user]);
    const { disclaimer } = formik_esm.useTheme();
    return FronteggApp.React.createElement(FronteggApp.React.Fragment, null,
        error && FronteggApp.React.createElement(LoginErrorMessage, null, error),
        FronteggApp.React.createElement(formik_esm.Button$1, { sx: { mt: 4 }, fullWidth: true, loading: loading, color: "primary", type: "submit", onClick: handleSubmit }, buttonText),
        disclaimer && (!disclaimer.placement || disclaimer.placement === 'box') && FronteggApp.React.createElement(DisclaimerInfo, null));
};

const LoginWithWebAuthn = (props) => {
    const { titleComponentKey, messageComponentKey, loginStrategyId, title, message, iconComponentKey, defaultIcon } = props;
    const isThumbnailMode = useShowThumbnail(loginStrategyId);
    return FronteggApp.React.createElement(BoxElement$1, null,
        FronteggApp.React.createElement(LoginPageTitle, { isThumbnailMode: isThumbnailMode, componentKey: titleComponentKey, title: title }),
        FronteggApp.React.createElement(formik_esm.Collapse$1, { in: !isThumbnailMode, appear: false, timeout: 300 },
            FronteggApp.React.createElement(LoginPageMessage, { componentKey: messageComponentKey, message: message, textAlignCenter: true })),
        FronteggApp.React.createElement(LoginIconContainer, { isThumbnailMode: isThumbnailMode },
            FronteggApp.React.createElement(LoginIconComponent, { componentKey: iconComponentKey }, defaultIcon)),
        FronteggApp.React.createElement(formik_esm.Collapse$1, { in: !isThumbnailMode, appear: false, timeout: 300 },
            FronteggApp.React.createElement(LoginWithWebAuthnForm, Object.assign({}, props))));
};

const LoginWithTouchID = ({ onMainAuthenticationRequired }) => {
    const t = useT('login');
    return FronteggApp.React.createElement(LoginWithWebAuthn, { onMainAuthenticationRequired: onMainAuthenticationRequired, loginStrategyId: LoginStrategyID.Internal, title: t('oneTouchLoginTitle'), message: t('oneTouchLoginMessage'), buttonText: t('oneTouchLoginButton'), transports: ['internal'], defaultIcon: FronteggApp.React.createElement(formik_esm.OneTouchIcon, null), authenticatorAttachment: 'platform', iconComponentKey: 'touchIdCardIcon', titleComponentKey: 'touchIdTitle', messageComponentKey: 'touchIdMessage' });
};

const LoginWithUsbKey = ({ onMainAuthenticationRequired }) => {
    const t = useT('login');
    return FronteggApp.React.createElement(LoginWithWebAuthn, { onMainAuthenticationRequired: onMainAuthenticationRequired, title: t('usbLoginTitle'), message: t('usbLoginMessage'), buttonText: t('usbLoginButton'), transports: ['usb'], defaultIcon: FronteggApp.React.createElement(formik_esm.UsbIcon, null), loginStrategyId: LoginStrategyID.UsbKey, authenticatorAttachment: 'cross-platform', iconComponentKey: 'usbKeyCardIcon', titleComponentKey: 'usbKeyTitle', messageComponentKey: 'usbKeyMessage' });
};

const LoginWithAndroid = ({ onMainAuthenticationRequired }) => {
    const t = useT('login');
    return FronteggApp.React.createElement(LoginWithWebAuthn, { onMainAuthenticationRequired: onMainAuthenticationRequired, title: t('androidLoginTitle'), message: t('androidLoginMessage'), buttonText: t('androidLoginButton'), transports: ['ble', 'nfc', 'cable'], defaultIcon: FronteggApp.React.createElement(formik_esm.QrIcon, null), loginStrategyId: LoginStrategyID.Android, authenticatorAttachment: 'cross-platform', iconComponentKey: 'androidCardIcon', titleComponentKey: 'androidTitle', messageComponentKey: 'androidMessage' });
};

const FromWrapper = (props) => {
    const { initialValues, validationSchema, onSubmit, children, enableReinitialize, validateOnBlur } = props;
    const [formError, setFormError] = FronteggApp.react.exports.useState(null);
    const formikProps = {
        onSubmit: (values, formikHelpers) => FronteggApp.__awaiter(void 0, void 0, void 0, function* () {
            setFormError(null);
            try {
                yield onSubmit(values, formikHelpers);
            }
            catch (e) {
                setFormError(e.message);
            }
        }),
        enableReinitialize,
        initialValues,
        validationSchema,
        validateOnBlur,
    };
    return FronteggApp.React.createElement(formik_esm.Formik, Object.assign({}, formikProps), props => {
        const canSubmit = !props.isSubmitting && props.isValid && props.dirty;
        return FronteggApp.React.createElement(formik_esm.Form, { autoComplete: 'on' }, children === null || children === void 0 ? void 0 : children(Object.assign(Object.assign({}, props), { canSubmit, formError })));
    });
};

var SocialLoginsActions;
(function (SocialLoginsActions) {
    SocialLoginsActions["Login"] = "login";
    SocialLoginsActions["SignUp"] = "signUp";
    SocialLoginsActions["Activation"] = "activation";
})(SocialLoginsActions || (SocialLoginsActions = {}));
var SocialLoginDisplayMode;
(function (SocialLoginDisplayMode) {
    SocialLoginDisplayMode["STACK"] = "stack";
    SocialLoginDisplayMode["EVENTUALLY"] = "eventually";
})(SocialLoginDisplayMode || (SocialLoginDisplayMode = {}));
var SocialLoginLocation;
(function (SocialLoginLocation) {
    SocialLoginLocation["BOTTOM"] = "bottom";
    SocialLoginLocation["TOP"] = "top";
})(SocialLoginLocation || (SocialLoginLocation = {}));

const SocialLoginsContext = FronteggApp.react.exports.createContext({ action: SocialLoginsActions.Login });

const FRONTEGG_CODE_VERIFIER = 'FRONTEGG_CODE_VERIFIER';
const FRONTEGG_INVITATION_TOKEN = 'fe-invitation-token';
const FRONTEGG_ORIGIN_URL = 'FRONTEGG_ORIGIN_URL';

const SocialLogins = (props) => {
    const { firstLoad, socialLoginsConfigV2, error } = formik_esm.useSocialLoginState(({ firstLoad, socialLoginsConfigV2, error }) => ({
        firstLoad,
        socialLoginsConfigV2,
        error,
    }));
    const { loadSocialLoginsConfigurationV2 } = formik_esm.useSocialLoginActions();
    FronteggApp.react.exports.useEffect(() => {
        if (firstLoad) {
            loadSocialLoginsConfigurationV2();
        }
    }, [loadSocialLoginsConfigurationV2, firstLoad]);
    FronteggApp.react.exports.useEffect(() => {
        const url = new URL(window.location.href);
        const invitationToken = url.searchParams.get('invitationToken');
        localStorage.setItem(FRONTEGG_ORIGIN_URL, window.location.href);
        if (invitationToken) {
            localStorage.setItem(FRONTEGG_INVITATION_TOKEN, invitationToken);
        }
        return () => {
            localStorage.removeItem(FRONTEGG_ORIGIN_URL);
            localStorage.removeItem(FRONTEGG_INVITATION_TOKEN);
        };
    }, [window.location.search]);
    if (!(socialLoginsConfigV2 === null || socialLoginsConfigV2 === void 0 ? void 0 : socialLoginsConfigV2.some(({ active }) => active))) {
        return null;
    }
    let component = FronteggApp.React.createElement(SocialLoginsContext.Provider, { value: { action: props.action } }, props.children);
    if (error) {
        component = FronteggApp.React.createElement("div", { className: "fe-error-message" }, error);
    }
    if (firstLoad) {
        component = FronteggApp.React.createElement(formik_esm.Loader$1, null);
    }
    return FronteggApp.React.createElement(formik_esm.Box, { textAlign: "center", mt: 4 }, component);
};

const socialLoginStyler = formik_esm.createStyled();
const SocialLoginCustomComponent = CustomComponent;

const DividerWrapper = socialLoginStyler(formik_esm.Box)(({ theme }) => (Object.assign({ width: '100%', display: 'flex', flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between', color: '#CDD3DF', '& > div:first-of-type': {
        height: '1px',
        backgroundColor: 'currentColor',
        flex: 1,
        marginRight: '1rem',
    }, '& > div:last-of-type': {
        height: '1px',
        backgroundColor: 'currentColor',
        flex: 1,
        marginLeft: '1rem',
    } }, theme.dividerStyle)));
const DividerText = socialLoginStyler(formik_esm.Box)(({ theme }) => (Object.assign({ marginBottom: '0.5rem', marginTop: '0.5rem', fontStyle: 'normal', fontWeight: 800, lineHeight: '1rem', display: 'flex', alignItems: 'center', textAlign: 'center', color: '#99A0AF' }, theme.dividerTextStyle)));
const SocialLoginDivider = ({ children, testId }) => {
    return (FronteggApp.React.createElement(SocialLoginCustomComponent, { componentKey: 'divider', className: 'fe-social-login-divider', text: children },
        FronteggApp.React.createElement(DividerWrapper, { "data-test-id": testId },
            FronteggApp.React.createElement("div", null),
            FronteggApp.React.createElement(DividerText, null, children),
            FronteggApp.React.createElement("div", null))));
};

const createSocialLoginState = (state) => JSON.stringify(state);
const useRedirectUri = () => {
    const routes = formik_esm.useAuthRoutes();
    const { basename = '/', urlStrategy } = formik_esm.useShadowDom();
    const calculatedBasename = basename.endsWith('/') ? basename.substring(0, basename.length - 1) : '';
    return FronteggApp.react.exports.useMemo(() => `${window.location.origin}${urlStrategy === 'path' ? '' : '#'}${calculatedBasename}${routes.socialLoginCallbackUrl}`, [routes.socialLoginCallbackUrl, calculatedBasename, urlStrategy]);
};
const useRedirectUrl = (urlCreator, socialLoginType) => {
    const { action } = useSocialLoginContext();
    const { socialLoginsConfigV2 } = formik_esm.useSocialLoginState(({ socialLoginsConfigV2 }) => ({ socialLoginsConfigV2 }));
    const config = FronteggApp.react.exports.useMemo(() => socialLoginsConfigV2 === null || socialLoginsConfigV2 === void 0 ? void 0 : socialLoginsConfigV2.find(({ type }) => type.toLowerCase() === socialLoginType.toLowerCase()), [socialLoginsConfigV2, socialLoginType]);
    const redirectUri = useRedirectUri();
    const redirectUrl = FronteggApp.react.exports.useMemo(() => {
        var _a;
        if (config) {
            if (config.customised) {
                return urlCreator(Object.assign(Object.assign({}, config), { redirectUrl: redirectUri, state: createSocialLoginState({ provider: socialLoginType, action }) }));
            }
            else {
                return (_a = `${config.authorizationUrl}${window.location.search}`) !== null && _a !== void 0 ? _a : undefined;
            }
        }
    }, [config, redirectUri, socialLoginType, action, urlCreator]);
    if (!(config === null || config === void 0 ? void 0 : config.active) || !redirectUrl) {
        return null;
    }
    return redirectUrl;
};
const useSocialLoginContext = () => {
    const context = FronteggApp.react.exports.useContext(SocialLoginsContext);
    if (!context) {
        throw new Error('Social Login compound component cannot be rendered outside SocialLogins component');
    }
    return context;
};
const useSocialLoginMainButton = (activeProviders) => {
    var _a, _b;
    const { socialLogins } = formik_esm.useTheme();
    let mainSocialLoginProvider = ((_a = socialLogins === null || socialLogins === void 0 ? void 0 : socialLogins.socialLoginsLayout) === null || _a === void 0 ? void 0 : _a.mode) === SocialLoginDisplayMode.STACK && ((_b = socialLogins === null || socialLogins === void 0 ? void 0 : socialLogins.socialLoginsLayout) === null || _b === void 0 ? void 0 : _b.mainButton);
    const shouldUseDefaultMainButton = !mainSocialLoginProvider || !activeProviders.some(({ type }) => type === mainSocialLoginProvider);
    if (shouldUseDefaultMainButton) {
        mainSocialLoginProvider = activeProviders[0].type;
    }
    return mainSocialLoginProvider;
};
const useSocialLoginsIconsOnly = (provider, isMainButton) => {
    var _a;
    let { iconsOnly, socialLoginsLayout } = formik_esm.useTheme();
    const { socialLoginsConfigV2 } = formik_esm.useSocialLoginState(({ socialLoginsConfigV2 }) => ({ socialLoginsConfigV2 }));
    const isStackLayout = (socialLoginsLayout === null || socialLoginsLayout === void 0 ? void 0 : socialLoginsLayout.mode) === SocialLoginDisplayMode.STACK;
    const INACTIVE_PROVIDERS = ['gitlab', 'linkedin'];
    const count = (_a = (socialLoginsConfigV2 !== null && socialLoginsConfigV2 !== void 0 ? socialLoginsConfigV2 : [])) === null || _a === void 0 ? void 0 : _a.filter(({ active, type }) => active && !INACTIVE_PROVIDERS.includes(type)).length;
    if (iconsOnly && !isStackLayout)
        return true;
    if (isStackLayout && !isMainButton && count > 1)
        return true;
    // default is by count, if iconsOnly = false will force to render with icons also if count > 3
    return !isStackLayout && count > 3;
};
const useIsMoreThenOneProvider = () => {
    const { socialLoginsConfigV2 } = formik_esm.useSocialLoginState(({ socialLoginsConfigV2 }) => ({ socialLoginsConfigV2 }));
    const activeProvidersLength = socialLoginsConfigV2 === null || socialLoginsConfigV2 === void 0 ? void 0 : socialLoginsConfigV2.filter(({ active }) => active).length;
    return !!activeProvidersLength && activeProvidersLength > 1;
};

const enhancedSocialButtonStyle = (style) => {
    if (!style || typeof style !== 'object') {
        return {};
    }
    const { base, hover, active, focus, icon } = style;
    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, base), (icon ? { '& svg path': icon } : {})), (hover ? { '&:hover:not(.Mui-disabled)': hover } : {})), (focus ? { '&:focus:not(.Mui-disabled)': focus } : {})), (active ? { '&:active:not(.Mui-disabled)': active } : {}));
};
const SocialLoginButton = socialLoginStyler(formik_esm.Button$1)(({ theme }) => ({
    '&.MuiButton-root': {
        margin: '0.5rem',
        flex: 'inherit',
        '&.MuiButton-containedSecondary': Object.assign({}, enhancedSocialButtonStyle(theme.buttonStyle)),
    },
}));
const StackedSocialLoginButton = socialLoginStyler(SocialLoginButton)(({ theme }) => {
    var _a;
    const isMoreThenOneProvider = useIsMoreThenOneProvider();
    return ({
        '&.MuiButton-root.MuiButton-containedSecondary': Object.assign({}, (((_a = theme === null || theme === void 0 ? void 0 : theme.socialLoginsLayout) === null || _a === void 0 ? void 0 : _a.mode) === SocialLoginDisplayMode.STACK && isMoreThenOneProvider ? {
            'svg': {
                width: '1.5rem',
                height: '1.5rem',
            },
            minWidth: 0,
            background: 'none',
            border: 'none',
            margin: 0,
            padding: '0.5rem',
            boxShadow: 'none',
            display: 'flex',
            alignItems: 'baseline',
            fontSize: 'inherit',
        } : {}))
    });
});
const MainSocialLoginButton = socialLoginStyler(SocialLoginButton)(({ theme }) => {
    var _a, _b;
    return ({
        '&.MuiButton-root': {
            margin: 0,
            flex: 'initial',
        },
        '&.MuiButton-root.MuiButton-containedSecondary': Object.assign({ width: '15rem' }, (((_a = theme === null || theme === void 0 ? void 0 : theme.socialLoginsLayout) === null || _a === void 0 ? void 0 : _a.mode) === SocialLoginDisplayMode.STACK ? enhancedSocialButtonStyle(((_b = theme === null || theme === void 0 ? void 0 : theme.socialLoginsLayout) === null || _b === void 0 ? void 0 : _b.mainButtonStyle) || {}) : {})),
    });
});

const FacebookIcon = (props) => {
    return (FronteggApp.React.createElement("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 1365 1365", fill: "white" }, props),
        FronteggApp.React.createElement("g", { xmlns: "http://www.w3.org/2000/svg", transform: "matrix(1.3333333,0,0,-1.3333333,0,1365.3333)", id: "g10" },
            FronteggApp.React.createElement("g", { transform: "scale(0.1)", id: "g12" },
                FronteggApp.React.createElement("path", { fill: "#4267B2", d: "m 10240,5120 c 0,2827.7 -2292.3,5120 -5120,5120 C 2292.3,10240 0,7947.7 0,5120 0,2564.46 1872.31,446.301 4320,62.1992 V 3640 H 3020 v 1480 h 1300 v 1128 c 0,1283.2 764.38,1992 1933.9,1992 560.17,0 1146.1,-100 1146.1,-100 V 6880 H 6754.38 C 6118.35,6880 5920,6485.33 5920,6080.43 V 5120 H 7340 L 7113,3640 H 5920 V 62.1992 C 8367.69,446.301 10240,2564.46 10240,5120" })))));
};
const GoogleIcon = (props) => {
    return (FronteggApp.React.createElement("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 48 48", fill: "none" }, props),
        FronteggApp.React.createElement("path", { fill: "#FFC107", d: "M43.611,20.083H42V20H24v8h11.303c-1.649,4.657-6.08,8-11.303,8c-6.627,0-12-5.373-12-12c0-6.627,5.373-12,12-12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C12.955,4,4,12.955,4,24c0,11.045,8.955,20,20,20c11.045,0,20-8.955,20-20C44,22.659,43.862,21.35,43.611,20.083z" }),
        FronteggApp.React.createElement("path", { fill: "#FF3D00", d: "M6.306,14.691l6.571,4.819C14.655,15.108,18.961,12,24,12c3.059,0,5.842,1.154,7.961,3.039l5.657-5.657C34.046,6.053,29.268,4,24,4C16.318,4,9.656,8.337,6.306,14.691z" }),
        FronteggApp.React.createElement("path", { fill: "#4CAF50", d: "M24,44c5.166,0,9.86-1.977,13.409-5.192l-6.19-5.238C29.211,35.091,26.715,36,24,36c-5.202,0-9.619-3.317-11.283-7.946l-6.522,5.025C9.505,39.556,16.227,44,24,44z" }),
        FronteggApp.React.createElement("path", { fill: "#1976D2", d: "M43.611,20.083H42V20H24v8h11.303c-0.792,2.237-2.231,4.166-4.087,5.571c0.001-0.001,0.002-0.001,0.003-0.002l6.19,5.238C36.971,39.205,44,34,44,24C44,22.659,43.862,21.35,43.611,20.083z" })));
};
const GithubIcon = (props) => {
    return (FronteggApp.React.createElement("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 17 16", fill: "none" }, props),
        FronteggApp.React.createElement("path", { fillRule: "evenodd", clipRule: "evenodd", d: "M8.50001 -0.0010302C6.55044 -0.00301169 4.66389 0.689346 3.17843 1.95197C1.69296 3.2146 0.705689 4.96496 0.39354 6.88938C0.0813902 8.81379 0.464767 10.7865 1.47496 12.4539C2.48515 14.1213 4.05613 15.3745 5.90637 15.9889C6.3143 16.0644 6.46539 15.8076 6.46539 15.591C6.46539 15.3745 6.46539 14.8809 6.46539 14.196C4.18399 14.6996 3.70051 13.0981 3.70051 13.0981C3.54849 12.6018 3.22554 12.1753 2.78896 11.8945C2.04864 11.3908 2.84939 11.3908 2.84939 11.3908C3.10891 11.4275 3.35668 11.5227 3.57394 11.6693C3.7912 11.8159 3.97227 12.01 4.10341 12.2369C4.21484 12.439 4.36507 12.617 4.54548 12.7609C4.7259 12.9047 4.93294 13.0115 5.15474 13.0752C5.37653 13.1388 5.6087 13.158 5.83794 13.1317C6.06717 13.1054 6.28896 13.0341 6.49056 12.9219C6.52217 12.5076 6.70078 12.1182 6.99418 11.824C5.17108 11.6175 3.25732 10.9124 3.25732 7.76982C3.24481 6.95546 3.54594 6.16747 4.09837 5.569C3.85183 4.861 3.8806 4.08618 4.17895 3.3984C4.17895 3.3984 4.86891 3.17681 6.43516 4.23945C7.78012 3.87017 9.19974 3.87017 10.5447 4.23945C12.111 3.17681 12.7959 3.3984 12.7959 3.3984C13.0974 4.0852 13.1279 4.8606 12.8815 5.569C13.4339 6.16747 13.7351 6.95546 13.7225 7.76982C13.7225 10.9225 11.8038 11.6124 9.97561 11.7988C10.1716 11.9958 10.323 12.2327 10.4195 12.4934C10.5159 12.7541 10.5552 13.0324 10.5346 13.3096C10.5346 14.4075 10.5346 15.2939 10.5346 15.5608C10.5346 15.8277 10.6807 16.0342 11.0987 15.9587C12.9431 15.3385 14.5072 14.0833 15.5121 12.417C16.517 10.7507 16.8973 8.78157 16.5852 6.86089C16.273 4.94021 15.2887 3.19286 13.8079 1.93051C12.327 0.668166 10.4459 -0.027091 8.50001 -0.03125V-0.0010302Z", fill: "#231E1B" })));
};
const MicrosoftIcon = (props) => {
    return (FronteggApp.React.createElement("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 16 16", fill: "none" }, props),
        FronteggApp.React.createElement("path", { d: "M7.60384 7.60256H0.00128174V0H7.60384V7.60256Z", fill: "#F1511B" }),
        FronteggApp.React.createElement("path", { d: "M15.9987 7.60256H8.39552V0H15.9981V7.60256H15.9987Z", fill: "#80CC28" }),
        FronteggApp.React.createElement("path", { d: "M7.60384 16.001H0.00128174V8.39844H7.60384V16.001Z", fill: "#00ADEF" }),
        FronteggApp.React.createElement("path", { d: "M15.9987 16.001H8.39552V8.39844H15.9981V16.001H15.9987Z", fill: "#FBBC09" })));
};

const createGoogleUrl = ({ clientId, redirectUrl, state }) => {
    const searchParams = new URLSearchParams({
        redirect_uri: redirectUrl,
        response_type: 'code',
        include_granted_scopes: 'true',
        scope: 'https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email',
        state,
    });
    if (clientId) {
        searchParams.set('client_id', clientId);
    }
    const url = new URL('https://accounts.google.com/o/oauth2/v2/auth');
    url.search = searchParams.toString();
    return url.toString();
};
const SocialButton$3 = socialLoginStyler(StackedSocialLoginButton)(({ theme }) => {
    var _a, _b;
    const isMoreThenOneProvider = useIsMoreThenOneProvider();
    return ({
        '&.MuiButton-root.MuiButton-containedSecondary': Object.assign({}, enhancedSocialButtonStyle(((_a = theme === null || theme === void 0 ? void 0 : theme.socialLoginsLayout) === null || _a === void 0 ? void 0 : _a.mode) === SocialLoginDisplayMode.STACK && isMoreThenOneProvider ? (_b = theme === null || theme === void 0 ? void 0 : theme.socialLoginsLayout) === null || _b === void 0 ? void 0 : _b.stackedButtonsStyle : theme.googleButtonStyle)),
    });
});
const GoogleLoginButton = ({ isMainButton = false }) => {
    const onRedirectTo = formik_esm.useOnRedirectTo();
    const redirectUrl = useRedirectUrl(createGoogleUrl, restApi.SocialLoginProviders.Google);
    const iconsOnly = useSocialLoginsIconsOnly(restApi.SocialLoginProviders.Google, isMainButton);
    const handleClick = FronteggApp.react.exports.useCallback(() => {
        onRedirectTo(redirectUrl, { refresh: true });
    }, [redirectUrl, onRedirectTo]);
    const icon = FronteggApp.React.createElement(SocialLoginCustomComponent, { componentKey: "googleIcon", className: "fe-social-login-google-icon" },
        FronteggApp.React.createElement(GoogleIcon, null));
    if (redirectUrl) {
        return isMainButton ?
            FronteggApp.React.createElement(MainSocialLoginButton, { onClick: handleClick, color: "secondary", startIcon: icon, children: iconsOnly ? undefined : 'Continue with Google', "data-test-id": "google-main-btn" }) :
            FronteggApp.React.createElement(SocialButton$3, { onClick: handleClick, color: "secondary", startIcon: icon, children: iconsOnly ? undefined : 'Google', "data-test-id": "google-btn" });
    }
    return null;
};
var GoogleLoginButton$1 = GoogleLoginButton;

const createGithubUrl = ({ clientId, redirectUrl, state }) => {
    const searchParams = new URLSearchParams({
        redirect_uri: redirectUrl,
        scope: 'read:user user:email',
        state,
    });
    if (clientId) {
        searchParams.set('client_id', clientId);
    }
    const url = new URL('https://github.com/login/oauth/authorize');
    url.search = searchParams.toString();
    return url.toString();
};
const SocialButton$2 = socialLoginStyler(StackedSocialLoginButton)(({ theme }) => {
    var _a, _b;
    const isMoreThenOneProvider = useIsMoreThenOneProvider();
    return ({
        '&.MuiButton-root.MuiButton-containedSecondary': Object.assign({}, enhancedSocialButtonStyle(((_a = theme === null || theme === void 0 ? void 0 : theme.socialLoginsLayout) === null || _a === void 0 ? void 0 : _a.mode) === SocialLoginDisplayMode.STACK && isMoreThenOneProvider ? (_b = theme === null || theme === void 0 ? void 0 : theme.socialLoginsLayout) === null || _b === void 0 ? void 0 : _b.stackedButtonsStyle : theme.githubButtonStyle)),
    });
});
const GithubLoginButton = ({ isMainButton = false }) => {
    const onRedirectTo = formik_esm.useOnRedirectTo();
    const redirectUrl = useRedirectUrl(createGithubUrl, restApi.SocialLoginProviders.Github);
    const iconsOnly = useSocialLoginsIconsOnly(restApi.SocialLoginProviders.Github, isMainButton);
    const handleClick = FronteggApp.react.exports.useCallback(() => {
        onRedirectTo(redirectUrl, { refresh: true });
    }, [redirectUrl, onRedirectTo]);
    const icon = FronteggApp.React.createElement(SocialLoginCustomComponent, { componentKey: "githubIcon", className: "fe-social-login-github-icon" },
        FronteggApp.React.createElement(GithubIcon, null));
    if (redirectUrl) {
        return isMainButton ?
            FronteggApp.React.createElement(MainSocialLoginButton, { onClick: handleClick, color: "secondary", startIcon: icon, children: iconsOnly ? undefined : 'Continue with Github', "data-test-id": "github-main-btn" }) :
            FronteggApp.React.createElement(SocialButton$2, { onClick: handleClick, color: "secondary", startIcon: icon, children: iconsOnly ? undefined : 'Github', "data-test-id": "github-btn" });
    }
    return null;
};
var GithubLoginButton$1 = GithubLoginButton;

const codeVerifier = `${uuid.v4()}${uuid.v4()}`;
const createMicrosoftUrl = ({ clientId, redirectUrl, state }) => {
    localStorage.setItem(FRONTEGG_CODE_VERIFIER, codeVerifier);
    const searchParams = new URLSearchParams({
        response_type: 'code',
        redirect_uri: redirectUrl,
        response_mode: 'query',
        scope: 'openid profile email',
        code_challenge: codeVerifier,
        state,
        code_challenge_type: 'S256',
    });
    if (clientId) {
        searchParams.set('client_id', clientId);
    }
    const url = new URL('https://login.microsoftonline.com/common/oauth2/v2.0/authorize');
    url.search = searchParams.toString();
    return url.toString();
};
const SocialButton$1 = socialLoginStyler(StackedSocialLoginButton)(({ theme }) => {
    var _a, _b;
    const isMoreThenOneProvider = useIsMoreThenOneProvider();
    return ({
        '&.MuiButton-root.MuiButton-containedSecondary': Object.assign({}, enhancedSocialButtonStyle(((_a = theme === null || theme === void 0 ? void 0 : theme.socialLoginsLayout) === null || _a === void 0 ? void 0 : _a.mode) === SocialLoginDisplayMode.STACK && isMoreThenOneProvider ? (_b = theme === null || theme === void 0 ? void 0 : theme.socialLoginsLayout) === null || _b === void 0 ? void 0 : _b.stackedButtonsStyle : theme.microsoftButtonStyle)),
    });
});
const MicrosoftLoginButton = ({ isMainButton = false }) => {
    const onRedirectTo = formik_esm.useOnRedirectTo();
    const redirectUrl = useRedirectUrl(createMicrosoftUrl, restApi.SocialLoginProviders.Microsoft);
    const iconsOnly = useSocialLoginsIconsOnly(restApi.SocialLoginProviders.Microsoft, isMainButton);
    const handleClick = FronteggApp.react.exports.useCallback(() => {
        onRedirectTo(redirectUrl, { refresh: true });
    }, [redirectUrl, onRedirectTo]);
    const icon = FronteggApp.React.createElement(SocialLoginCustomComponent, { componentKey: "microsoftIcon", className: "fe-social-login-microsoft-icon" },
        FronteggApp.React.createElement(MicrosoftIcon, null));
    if (redirectUrl) {
        return isMainButton ?
            FronteggApp.React.createElement(MainSocialLoginButton, { onClick: handleClick, color: "secondary", startIcon: icon, children: iconsOnly ? undefined : 'Continue with Microsoft', "data-test-id": "microsoft-main-btn" }) :
            FronteggApp.React.createElement(SocialButton$1, { onClick: handleClick, color: "secondary", startIcon: icon, children: iconsOnly ? undefined : 'Microsoft', "data-test-id": "microsoft-btn" });
    }
    return null;
};
var MicrosoftLoginButton$1 = MicrosoftLoginButton;

const createFacebookUrl = ({ clientId, redirectUrl, state }) => {
    const searchParams = new URLSearchParams({
        scope: 'email',
        redirect_uri: redirectUrl,
        response_type: 'code',
        state,
    });
    if (clientId) {
        searchParams.set('client_id', clientId);
    }
    const url = new URL('https://www.facebook.com/v10.0/dialog/oauth');
    url.search = searchParams.toString();
    return url.toString();
};
const SocialButton = socialLoginStyler(StackedSocialLoginButton)(({ theme }) => {
    var _a, _b;
    const isMoreThenOneProvider = useIsMoreThenOneProvider();
    return ({
        '&.MuiButton-root.MuiButton-containedSecondary': Object.assign({}, enhancedSocialButtonStyle(((_a = theme === null || theme === void 0 ? void 0 : theme.socialLoginsLayout) === null || _a === void 0 ? void 0 : _a.mode) === SocialLoginDisplayMode.STACK && isMoreThenOneProvider ? (_b = theme === null || theme === void 0 ? void 0 : theme.socialLoginsLayout) === null || _b === void 0 ? void 0 : _b.stackedButtonsStyle : theme.facebookButtonStyle)),
    });
});
const FacebookLoginButton = ({ isMainButton = false }) => {
    const onRedirectTo = formik_esm.useOnRedirectTo();
    const redirectUrl = useRedirectUrl(createFacebookUrl, restApi.SocialLoginProviders.Facebook);
    const iconsOnly = useSocialLoginsIconsOnly(restApi.SocialLoginProviders.Facebook, isMainButton);
    const handleClick = FronteggApp.react.exports.useCallback(() => {
        onRedirectTo(redirectUrl, { refresh: true });
    }, [redirectUrl, onRedirectTo]);
    const icon = FronteggApp.React.createElement(SocialLoginCustomComponent, { componentKey: "facebookIcon", className: "fe-social-login-facebook-icon" },
        FronteggApp.React.createElement(FacebookIcon, null));
    if (redirectUrl) {
        return isMainButton ?
            FronteggApp.React.createElement(MainSocialLoginButton, { onClick: handleClick, color: "secondary", startIcon: icon, children: iconsOnly ? undefined : 'Continue with Facebook', "data-test-id": "facebook-main-btn" }) :
            FronteggApp.React.createElement(SocialButton, { onClick: handleClick, color: "secondary", startIcon: icon, children: iconsOnly ? undefined : 'Facebook', "data-test-id": "facebook-btn" });
    }
    return null;
};
var FacebookLoginButton$1 = FacebookLoginButton;

const mapActionToStyle = {
    [SocialLoginsActions.Login]: 'login',
    [SocialLoginsActions.SignUp]: 'signup',
    [SocialLoginsActions.Activation]: 'activateAccount',
};
const SocialLoginsContainer = socialLoginStyler((_a) => {
    var props = FronteggApp.__rest(_a, ["action", "theme"]);
    return FronteggApp.React.createElement(formik_esm.Box, Object.assign({}, props));
})(({ theme, action }) => {
    var _a, _b, _c, _d, _e, _f, _g;
    return (Object.assign({ display: 'flex', flexGrow: 1, flexDirection: 'row', marginLeft: '-0.5rem', marginRight: '-0.5rem', justifyContent: 'center', marginTop: '0.5rem' }, (formik_esm.cjs((_c = (_b = (_a = theme === null || theme === void 0 ? void 0 : theme.loginBox) === null || _a === void 0 ? void 0 : _a.socialLogins) === null || _b === void 0 ? void 0 : _b.conatinerStyle) !== null && _c !== void 0 ? _c : {}, (_g = (_f = (_e = (_d = theme === null || theme === void 0 ? void 0 : theme.loginBox) === null || _d === void 0 ? void 0 : _d[mapActionToStyle[action]]) === null || _e === void 0 ? void 0 : _e.socialLogins) === null || _f === void 0 ? void 0 : _f.containerStyle) !== null && _g !== void 0 ? _g : {}))));
});
const SocialLoginsContainerForStackedMode = socialLoginStyler((_a) => {
    var props = FronteggApp.__rest(_a, ["action", "theme"]);
    return FronteggApp.React.createElement(formik_esm.Box, Object.assign({}, props));
})(({ theme, action }) => {
    var _a, _b, _c, _d, _e, _f, _g;
    return (Object.assign({ display: 'flex', flexGrow: 1, flexDirection: 'row', justifyContent: 'space-between', marginTop: '1.5rem', marginBottom: '1rem' }, (formik_esm.cjs((_c = (_b = (_a = theme === null || theme === void 0 ? void 0 : theme.loginBox) === null || _a === void 0 ? void 0 : _a.socialLogins) === null || _b === void 0 ? void 0 : _b.conatinerStyle) !== null && _c !== void 0 ? _c : {}, (_g = (_f = (_e = (_d = theme === null || theme === void 0 ? void 0 : theme.loginBox) === null || _d === void 0 ? void 0 : _d[mapActionToStyle[action]]) === null || _e === void 0 ? void 0 : _e.socialLogins) === null || _f === void 0 ? void 0 : _f.containerStyle) !== null && _g !== void 0 ? _g : {}))));
});
const SocialLoginsStackedContainer = socialLoginStyler(formik_esm.Box)(({ theme }) => {
    var _a, _b;
    return (Object.assign({ display: 'flex', alignItems: 'center', margin: 0 }, (((_a = theme === null || theme === void 0 ? void 0 : theme.socialLoginsLayout) === null || _a === void 0 ? void 0 : _a.mode) === SocialLoginDisplayMode.STACK ? (_b = theme === null || theme === void 0 ? void 0 : theme.socialLoginsLayout) === null || _b === void 0 ? void 0 : _b.stackedContainerStyle : {})));
});
const mapSocialProviderToComponent = [
    { socialProvider: restApi.SocialLoginProviders.Google, button: (isMainButton, index) => FronteggApp.React.createElement(GoogleLoginButton$1, { isMainButton: isMainButton, key: index }) },
    { socialProvider: restApi.SocialLoginProviders.Microsoft, button: (isMainButton, index) => FronteggApp.React.createElement(MicrosoftLoginButton$1, { isMainButton: isMainButton, key: index }) },
    { socialProvider: restApi.SocialLoginProviders.Facebook, button: (isMainButton, index) => FronteggApp.React.createElement(FacebookLoginButton$1, { isMainButton: isMainButton, key: index }) },
    { socialProvider: restApi.SocialLoginProviders.Github, button: (isMainButton, index) => FronteggApp.React.createElement(GithubLoginButton$1, { isMainButton: isMainButton, key: index }) },
];
const SocialLoginsStackModeButtons = ({ testId, dividerText, withSocialDivider = true, action }) => {
    const { socialLoginsConfigV2 } = formik_esm.useSocialLoginState(({ socialLoginsConfigV2 }) => ({ socialLoginsConfigV2 }));
    const activeProviders = socialLoginsConfigV2 === null || socialLoginsConfigV2 === void 0 ? void 0 : socialLoginsConfigV2.filter(({ active }) => active);
    if (!(activeProviders === null || activeProviders === void 0 ? void 0 : activeProviders.length)) {
        return null;
    }
    const mainSocialLoginProvider = useSocialLoginMainButton(activeProviders);
    const mainSocialLoginButton = mapSocialProviderToComponent.find((item) => item.socialProvider === mainSocialLoginProvider);
    const stackedSocialLoginsButtons = mapSocialProviderToComponent.filter(item => item.socialProvider !== mainSocialLoginProvider);
    return (FronteggApp.React.createElement(FronteggApp.React.Fragment, null,
        FronteggApp.React.createElement(SocialLoginTopDivider, { withSocialDivider: withSocialDivider, dividerText: dividerText, socialLoginLocation: SocialLoginLocation.BOTTOM }),
        FronteggApp.React.createElement(SocialLoginsContainerForStackedMode, { "data-test-id": testId, action: action }, mainSocialLoginButton === null || mainSocialLoginButton === void 0 ? void 0 :
            mainSocialLoginButton.button(true),
            FronteggApp.React.createElement(SocialLoginsStackedContainer, null, stackedSocialLoginsButtons.map((item, index) => item.button(false, index)))),
        FronteggApp.React.createElement(SocialLoginBottomDivider, { withSocialDivider: withSocialDivider, dividerText: dividerText, socialLoginLocation: SocialLoginLocation.TOP })));
};
const SocialLoginsButtonsContainer = ({ testId, dividerText, withSocialDivider = true, action }) => {
    var _a;
    const { socialLogins } = formik_esm.useTheme();
    const isStackDisplayMode = ((_a = socialLogins === null || socialLogins === void 0 ? void 0 : socialLogins.socialLoginsLayout) === null || _a === void 0 ? void 0 : _a.mode) === SocialLoginDisplayMode.STACK;
    const { socialLoginsConfigV2 } = formik_esm.useSocialLoginState(({ socialLoginsConfigV2 }) => ({ socialLoginsConfigV2 }));
    const activeProviders = socialLoginsConfigV2 === null || socialLoginsConfigV2 === void 0 ? void 0 : socialLoginsConfigV2.filter(({ active }) => active);
    if (!(activeProviders === null || activeProviders === void 0 ? void 0 : activeProviders.length)) {
        return null;
    }
    if (isStackDisplayMode && activeProviders.length > 1) {
        return (FronteggApp.React.createElement(SocialLoginsStackModeButtons, { dividerText: dividerText, withSocialDivider: withSocialDivider, action: action, testId: testId }));
    }
    return (FronteggApp.React.createElement(FronteggApp.React.Fragment, null,
        FronteggApp.React.createElement(SocialLoginTopDivider, { withSocialDivider: withSocialDivider, dividerText: dividerText, socialLoginLocation: SocialLoginLocation.BOTTOM }),
        FronteggApp.React.createElement(SocialLoginsContainer, { "data-test-id": testId, action: action },
            FronteggApp.React.createElement(GoogleLoginButton$1, null),
            FronteggApp.React.createElement(GithubLoginButton$1, null),
            FronteggApp.React.createElement(MicrosoftLoginButton$1, null),
            FronteggApp.React.createElement(FacebookLoginButton$1, null)),
        FronteggApp.React.createElement(SocialLoginBottomDivider, { withSocialDivider: withSocialDivider, dividerText: dividerText, socialLoginLocation: SocialLoginLocation.TOP })));
};
const SocialLoginsWithWrapper = ({ testId, action, dividerText, withSocialDivider = true }) => {
    return (FronteggApp.React.createElement(formik_esm.InnerThemeProvider, { themeOptionKey: "socialLogins" },
        FronteggApp.React.createElement(SocialLogins, { action: action },
            FronteggApp.React.createElement(SocialLoginsButtonsContainer, { dividerText: dividerText, withSocialDivider: withSocialDivider, action: action, testId: testId }))));
};
const SocialLoginTopDivider = ({ withSocialDivider, dividerText, socialLoginLocation }) => {
    var _a, _b;
    const { socialLogins } = formik_esm.useTheme();
    const socialLoginsLayout = (_b = (_a = socialLogins === null || socialLogins === void 0 ? void 0 : socialLogins.socialLoginsLayout) === null || _a === void 0 ? void 0 : _a.placement) !== null && _b !== void 0 ? _b : SocialLoginLocation.BOTTOM;
    return withSocialDivider && socialLoginsLayout === socialLoginLocation ? FronteggApp.React.createElement(SocialLoginDivider, { children: dividerText, testId: 'top-social-divider' }) : null;
};
const SocialLoginBottomDivider = ({ withSocialDivider, dividerText }) => {
    var _a, _b;
    const { socialLogins } = formik_esm.useTheme();
    const socialLoginsLayout = (_b = (_a = socialLogins === null || socialLogins === void 0 ? void 0 : socialLogins.socialLoginsLayout) === null || _a === void 0 ? void 0 : _a.placement) !== null && _b !== void 0 ? _b : SocialLoginLocation.BOTTOM;
    return withSocialDivider && socialLoginsLayout === SocialLoginLocation.TOP ? FronteggApp.React.createElement(SocialLoginDivider, { children: dividerText, testId: 'bottom-social-divider' }) : null;
};
const SocialLoginsLogin = ({ dividerText, withSocialDivider = true }) => {
    return FronteggApp.React.createElement(SocialLoginsWithWrapper, { action: SocialLoginsActions.Login, withSocialDivider: withSocialDivider, dividerText: dividerText });
};
const SocialLoginsActivation = ({ dividerText, withSocialDivider = true }) => {
    return FronteggApp.React.createElement(SocialLoginsWithWrapper, { action: SocialLoginsActions.Activation, withSocialDivider: withSocialDivider, dividerText: dividerText });
};
const SocialLoginsSignUp = ({ testId, dividerText, withSocialDivider = true }) => {
    return FronteggApp.React.createElement(SocialLoginsWithWrapper, { action: SocialLoginsActions.SignUp, withSocialDivider: withSocialDivider, dividerText: dividerText, testId: testId });
};

const PageWrapper = ({ children }) => FronteggApp.React.createElement(RootElement$1, null,
    FronteggApp.React.createElement(PageElement$1, null,
        FronteggApp.React.createElement(BoxElement$1, null, children)));
var PageWrapper$1 = PageWrapper;

const BackToLoginLink = formik_esm.styled(formik_esm.Link)(({ theme }) => (Object.assign({}, theme['backToLoginStyle'])));
const BackToLoginMessage = (_a) => {
    var { children } = _a, rest = FronteggApp.__rest(_a, ["children"]);
    return FronteggApp.React.createElement(BackToLoginLink, Object.assign({}, rest), children);
};
var BackToLoginMessage$1 = BackToLoginMessage;

const SocialLoginsSuccess$1 = () => {
    const onRedirectTo = formik_esm.useOnRedirectTo();
    const socialLoginsState = formik_esm.useSocialLoginState();
    const { resetSocialLoginsState, setSocialLoginError, loginViaSocialLogin } = formik_esm.useSocialLoginActions();
    const routes = formik_esm.useAuthRoutes();
    const t = useT('socialLogins');
    const redirectUri = useRedirectUri();
    const { events } = formik_esm.useShadowDom();
    FronteggApp.react.exports.useEffect(() => {
        const params = new URLSearchParams(window.location.search);
        const devCreds = params.get('customised') === 'false';
        const error = t('failedInvalidCallbackUrl');
        const state = params.get('state');
        const code = params.get('code');
        if (!state || !code) {
            setSocialLoginError({ error });
            return;
        }
        let provider;
        if (devCreds) {
            provider = params.get('provider');
        }
        else {
            let parsedState;
            try {
                parsedState = JSON.parse(state);
            }
            catch (e) {
                setSocialLoginError({ error });
                return;
            }
            provider = parsedState.provider;
        }
        if (!provider) {
            setSocialLoginError({ error });
            return;
        }
        const payload = {
            code, provider, state,
        };
        if (!devCreds) {
            payload.redirectUri = redirectUri;
        }
        const codeVerifier = localStorage.getItem(FRONTEGG_CODE_VERIFIER);
        const invitationToken = localStorage.getItem(FRONTEGG_INVITATION_TOKEN);
        localStorage.removeItem(FRONTEGG_CODE_VERIFIER);
        localStorage.removeItem(FRONTEGG_INVITATION_TOKEN);
        if (invitationToken) {
            payload.invitationToken = invitationToken;
        }
        if (codeVerifier) {
            payload.codeVerifier = codeVerifier;
        }
        const fronteggOriginUrl = localStorage.getItem(FRONTEGG_ORIGIN_URL);
        const loginViaSocialLoginPayload = Object.assign(Object.assign({}, payload), { events });
        if (fronteggOriginUrl) {
            loginViaSocialLoginPayload['url'] = new URL(fronteggOriginUrl);
        }
        loginViaSocialLogin(loginViaSocialLoginPayload);
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    if (!socialLoginsState.error || socialLoginsState.firstLoad || socialLoginsState.loading) {
        return FronteggApp.React.createElement(PageLoader, null);
    }
    return (FronteggApp.React.createElement(PageWrapper$1, null,
        FronteggApp.React.createElement(formik_esm.LoginMessage, { title: t('invalidTitle'), description: socialLoginsState.error, testId: 'social-login-failure' },
            FronteggApp.React.createElement(BackToLoginMessage$1, { sx: { mt: 8 }, onClick: () => {
                    resetSocialLoginsState();
                    onRedirectTo(routes.loginUrl);
                } }, t('failedBackToLogin')))));
};

const SocialLoginsSuccess = wrapPageContext(SocialLoginsSuccess$1, 'login');

const validateEmail = (invalidMessage, requiredMessage) => create().email(invalidMessage).required(requiredMessage);
const validatePassword = (minLength, invalidMinLengthMessage, requiredMessage) => create().min(minLength, invalidMinLengthMessage).required(requiredMessage);

const inputStyleKeys = [
    'padding',
    'padding-left',
    'padding-right',
    'padding-top',
    'padding-bottom',
    'margin',
    'margin-left',
    'margin-right',
    'margin-top',
    'margin-bottom',
    'height',
    'background',
    'box-sizing',
    'color',
    'outline',
    'cursor',
    'display',
    'font',
    'letter-spacing',
    'line-height',
    'text-align',
    'text-transform',
    'word-break',
    'word-spacing',
    'writing-mode',
];
const RenderSlottedInput = FronteggApp.react.exports.forwardRef((props, ref) => {
    const hiddenInputRef = FronteggApp.react.exports.useRef();
    const slottedInputRef = FronteggApp.react.exports.useRef();
    const { submitForm } = formik_esm.useFormikContext();
    FronteggApp.react.exports.useEffect(() => {
        const interval = setInterval(() => {
            if (hiddenInputRef.current && slottedInputRef.current) {
                const input = slottedInputRef.current;
                const styleLoader = window.getComputedStyle(hiddenInputRef.current);
                for (let i = 0; i < inputStyleKeys.length; i++) {
                    const key = inputStyleKeys[i];
                    const value = styleLoader[key];
                    input.style.setProperty(key, value);
                }
                input.style.setProperty('width', '100%');
                if (input.getAttribute('name') === 'password') {
                    input.style.setProperty('min-width', 'calc(100% + 0.5rem)');
                }
                else {
                    input.style.setProperty('min-width', '100%');
                }
                input.style.setProperty('border', 'none');
                input.style.setProperty('outline', 'none');
                input.style.setProperty('flex', '1');
                input.style.setProperty('opacity', '1');
            }
        }, 50);
        return () => {
            clearInterval(interval);
        };
    }, []);
    const handleSubmit = FronteggApp.react.exports.useCallback((e) => {
        e.preventDefault();
        if (e.keyCode === 13 || e.code === 'Enter') {
            e.target.blur();
            submitForm();
        }
    }, [submitForm]);
    return (FronteggApp.React.createElement(FronteggApp.React.Fragment, null,
        FronteggApp.React.createElement(formik_esm.Input$1, { inputRef: hiddenInputRef, tabIndex: -1, style: { position: 'fixed', top: -10000, left: -10000, zIndex: -1 } }),
        FronteggApp.React.createElement(formik_esm.RenderAsSlot, { name: `slotted-input-${props.name}`, containerStyle: { width: 'calc(100% - 32px)', display: 'flex', flexDirection: 'row' } },
            FronteggApp.React.createElement("input", Object.assign({ style: { opacity: 0 }, "data-test-id": `input-${props.name}`, ref: (r) => {
                    slottedInputRef.current = r;
                    ref === null || ref === void 0 ? void 0 : ref(r);
                } }, props, { onKeyUp: handleSubmit })))));
});
const EmailField$3 = ({ shouldBackToLoginIfEmailChanged }) => {
    const t = useT('login');
    const { iframeRendering } = formik_esm.useShadowDom();
    const { submitCount } = formik_esm.useFormikContext();
    const [fieldProps, { error }] = formik_esm.useField('email');
    const { resetForm } = formik_esm.useFormikContext();
    const { setLoginState } = formik_esm.useLoginActions();
    const backToPreLogin = FronteggApp.react.exports.useCallback(() => setLoginState({ step: reduxStore.LoginStep.preLogin }), [setLoginState]);
    const onFocus = FronteggApp.react.exports.useCallback(() => {
        if (shouldBackToLoginIfEmailChanged) {
            backToPreLogin();
            resetForm({
                values: {
                    email: fieldProps.value,
                    password: '',
                },
            });
        }
    }, [backToPreLogin, fieldProps, resetForm, shouldBackToLoginIfEmailChanged]);
    return (FronteggApp.React.createElement(formik_esm.Input$1, Object.assign({ label: t('emailInputLabel') }, fieldProps, { inputComponent: iframeRendering ? undefined : RenderSlottedInput, 
        // onMouseDown={shouldBackToLoginIfEmailChanged ? onFocus : undefined}
        // disabled={shouldBackToLoginIfEmailChanged || submitCount > 0}
        autoFocus: true, onFocus: onFocus, onChange: fieldProps.onChange, error: !!error && (fieldProps.value !== '' || submitCount > 0), placeholder: t('emailInputPlaceholder'), errorMessage: error, autoComplete: 'email', "data-test-id": 'email-box' })));
};
const InputButton = loginStyler(formik_esm.Link)(({ theme }) => ({
    '&.MuiLink-root': {
        color: theme.typography.label.color,
    },
}));
const PasswordField$3 = ({ shouldDisplayPassword, inputRef }) => {
    const t = useT('login');
    const { values: { email }, } = formik_esm.useFormikContext();
    const [fieldProps, { error, touched }] = formik_esm.useField('password');
    const { setForgotPasswordState } = formik_esm.useForgotPasswordActions();
    const { resetLoginState } = formik_esm.useLoginActions();
    const onRedirectTo = formik_esm.useOnRedirectTo();
    const routes = formik_esm.useAuthRoutes();
    const { iframeRendering } = formik_esm.useShadowDom();
    const onForgetPasswordClick = FronteggApp.react.exports.useCallback(() => {
        setForgotPasswordState({ email });
        resetLoginState();
        onRedirectTo(routes.forgetPasswordUrl);
    }, [setForgotPasswordState, resetLoginState, onRedirectTo, routes, email]);
    // TODO: changed testId from forgotPassBtn to forgot-password-btn
    const labelButton = (FronteggApp.React.createElement(InputButton, { onClick: onForgetPasswordClick, "data-test-id": 'forgot-password-btn' }, t('forgotPassword')));
    return (FronteggApp.React.createElement(FronteggApp.React.Fragment, null,
        FronteggApp.React.createElement(formik_esm.InputPassword$1, Object.assign({ label: t('passwordInputLabel') }, fieldProps, { inputRef: inputRef, inputComponent: iframeRendering ? undefined : RenderSlottedInput, disabled: false, error: !!error && touched, errorMessage: error, button: labelButton, type: 'password', name: 'password', tabIndex: shouldDisplayPassword ? undefined : -1, autoComplete: 'current-password', placeholder: t('passwordInputPlaceholder'), "data-test-id": 'password-box' }))));
};
const LoginSignupSwitch = loginStyler(formik_esm.Typography$1)(({ theme }) => (Object.assign(Object.assign({ marginBottom: '0.75rem', textAlign: 'center', color: 'inherit', fontWeight: 'normal' }, theme.signupMessageStyle), { position: 'unset !important' })));
const SignUpMessage = () => {
    const t = useT('login');
    const onRedirectTo = formik_esm.useOnRedirectTo();
    const routes = formik_esm.useAuthRoutes();
    const { policy, loading } = formik_esm.useSecurityPolicyState(({ publicPolicy }) => publicPolicy);
    const redirectToSignUp = FronteggApp.react.exports.useCallback(() => {
        onRedirectTo(routes.signUpUrl + window.location.search);
    }, [onRedirectTo, routes.signUpUrl]);
    if (loading || !(policy === null || policy === void 0 ? void 0 : policy.allowSignups)) {
        return null;
    }
    const props = {
        goToSignupMessage: t('signUpMessage'),
        goToSignupButtonText: t('signUpLink'),
        goToSignup: redirectToSignUp,
    };
    return (FronteggApp.React.createElement(SignupMessageComponent, Object.assign({ componentKey: 'signupMessage' }, props),
        FronteggApp.React.createElement(LoginSignupSwitch, { variant: 'subtitle1', position: 'unset' },
            props.goToSignupMessage,
            ' ',
            FronteggApp.React.createElement(formik_esm.Link, { onClick: props.goToSignup, "data-test-id": 'redirect-to-signup' }, props.goToSignupButtonText))));
};
const LoginWithPasswordForm = () => {
    var _a, _b;
    const t = useT('login');
    const { isSSOAuth } = formik_esm.useAuth(({ isSSOAuth }) => ({ isSSOAuth }));
    const { loading, step, error } = formik_esm.useLoginState();
    const { login, preLogin, passwordlessPreLogin, setLoginState } = formik_esm.useLoginActions();
    const [submitedEmailValue, setSubmitedEmailValue] = FronteggApp.react.exports.useState('');
    const { publicPolicy: { policy, error: policyError } } = formik_esm.useSecurityPolicyState();
    const { invitationToken } = useVerifyInviteToken();
    const [policyLocalError, setPolicyLocalError] = FronteggApp.react.exports.useState(false);
    const passwordRef = FronteggApp.react.exports.useRef(null);
    const { token: recaptchaToken, loadNewToken } = useRecaptchaContext();
    const shouldDisplayPassword = FronteggApp.react.exports.useMemo(() => (!isSSOAuth || step === reduxStore.LoginStep.loginWithPassword) &&
        (policy === null || policy === void 0 ? void 0 : policy.authStrategy) === reduxStore.AuthStrategyEnum.EmailAndPassword, [policy === null || policy === void 0 ? void 0 : policy.authStrategy, isSSOAuth, step]);
    const shouldDisplayOnlySocialLogins = FronteggApp.react.exports.useMemo(() => !isSSOAuth && (policy === null || policy === void 0 ? void 0 : policy.authStrategy) === reduxStore.AuthStrategyEnum.NoLocalAuthentication, [policy === null || policy === void 0 ? void 0 : policy.authStrategy, isSSOAuth, step]);
    const shouldBackToLoginIfEmailChanged = isSSOAuth && shouldDisplayPassword;
    const validationSchema = {
        email: validateEmail(t('emailMustBeValid'), t('emailIsRequired')),
        password: shouldDisplayPassword ? validatePassword(6, t('passwordMustBeCharacters', { length: 6 }), t('passwordIsRequired')) : undefined,
    };
    FronteggApp.react.exports.useEffect(() => {
        var _a, _b;
        if (isSSOAuth && shouldDisplayPassword) {
            (_b = (_a = passwordRef.current) === null || _a === void 0 ? void 0 : _a.focus) === null || _b === void 0 ? void 0 : _b.call(_a);
        }
    }, [shouldDisplayPassword, isSSOAuth]);
    const initialValues = FronteggApp.react.exports.useMemo(() => ({ email: '', password: '' }), []);
    const formikProps = {
        onSubmit: (values) => new Promise((resolve) => {
            const { email, password } = values;
            setSubmitedEmailValue(email);
            if (!policy || !policy.authStrategy) {
                setPolicyLocalError(true);
            }
            else {
                localStorage.setItem(`${email}-preferred-login-method`, LoginStrategyID.Main);
                if (shouldDisplayPassword) {
                    login({ email, password, recaptchaToken, invitationToken });
                }
                else if (isSSOAuth) {
                    preLogin({ email, recaptchaToken, invitationToken });
                }
                else {
                    passwordlessPreLogin({ email, recaptchaToken, type: policy === null || policy === void 0 ? void 0 : policy.authStrategy, invitationToken });
                }
                loadNewToken();
                resolve();
            }
        }),
        initialValues,
        validationSchema: formik_esm.validateSchema(validationSchema),
        enableReinitialize: true,
        validateOnBlur: false,
    };
    const isError = FronteggApp.react.exports.useMemo(() => error || policyError || policyLocalError, [policyError, error, policyLocalError]);
    const { socialLogins, disclaimer } = formik_esm.useTheme$1();
    const socialLoginsLayout = (_b = (_a = socialLogins === null || socialLogins === void 0 ? void 0 : socialLogins.socialLoginsLayout) === null || _a === void 0 ? void 0 : _a.placement) !== null && _b !== void 0 ? _b : SocialLoginLocation.BOTTOM;
    return FronteggApp.React.createElement(FronteggApp.React.Fragment, null,
        socialLoginsLayout === SocialLoginLocation.TOP && FronteggApp.React.createElement(SocialLoginsLogin, { dividerText: t('signInWithSocialLogin'), withSocialDivider: !shouldDisplayOnlySocialLogins }),
        !shouldDisplayOnlySocialLogins && (FronteggApp.React.createElement(FromWrapper, Object.assign({}, formikProps), ({ isValid, values, touched }) => {
            if (error && submitedEmailValue !== (values === null || values === void 0 ? void 0 : values.email)) {
                setLoginState({ error: null });
            }
            return FronteggApp.React.createElement(FronteggApp.React.Fragment, null,
                FronteggApp.React.createElement(EmailField$3, { shouldBackToLoginIfEmailChanged: shouldBackToLoginIfEmailChanged }),
                FronteggApp.React.createElement(formik_esm.Collapse$1, { in: shouldDisplayPassword, appear: false },
                    FronteggApp.React.createElement(PasswordField$3, { shouldDisplayPassword: shouldDisplayPassword, inputRef: passwordRef })),
                isError && FronteggApp.React.createElement(LoginErrorMessage, null, policyError ? t('missingPolicyErrorMessage') : error),
                FronteggApp.React.createElement(formik_esm.Button$1, { sx: { mt: 4 }, disabled: loading || !isValid || !touched, loading: loading, fullWidth: true, color: "primary", "data-test-id": "submit-btn", type: "submit" }, shouldDisplayPassword ? t('login') : t('continue')));
        })),
        socialLoginsLayout === SocialLoginLocation.BOTTOM && FronteggApp.React.createElement(SocialLoginsLogin, { dividerText: t('signInWithSocialLogin'), withSocialDivider: !shouldDisplayOnlySocialLogins }),
        disclaimer && (!disclaimer.placement || disclaimer.placement === 'box') && FronteggApp.React.createElement(DisclaimerInfo, null));
};

const LoginWithPassword = () => {
    const t = useT('login');
    const isThumbnailMode = useShowThumbnail(LoginStrategyID.Main);
    const { signupMessagePlacement } = formik_esm.useTheme$1();
    return FronteggApp.React.createElement(BoxElement$1, null,
        FronteggApp.React.createElement(LoginPageTitle, { isThumbnailMode: isThumbnailMode, componentKey: "title", title: t('title') }),
        (!signupMessagePlacement || signupMessagePlacement === 'box') && FronteggApp.React.createElement(SignUpMessage, null),
        FronteggApp.React.createElement(formik_esm.Collapse$1, { in: !isThumbnailMode, appear: false },
            FronteggApp.React.createElement(LoginWithPasswordForm, null)),
        FronteggApp.React.createElement(formik_esm.Collapse$1, { in: isThumbnailMode, appear: false },
            FronteggApp.React.createElement(LoginIconContainer, { isThumbnailMode: isThumbnailMode, iconSize: 64 },
                FronteggApp.React.createElement(LoginIconComponent, { componentKey: 'loginCardIcon' },
                    FronteggApp.React.createElement(formik_esm.LogInIcon, null)))));
};

const LoginWithQuickSmsForm = ({ onMainAuthenticationRequired }) => {
    const t = useT('login');
    const { error, loading } = formik_esm.useLoginState();
    const { quickSmsPasswordlessPreLogin } = formik_esm.useLoginActions();
    const { token: recaptchaToken, loadNewToken } = useRecaptchaContext();
    const email = localStorage.getItem('email');
    const usedStrategy = localStorage.getItem(`${email}-${LoginStrategyID.Sms}`);
    const handleSubmit = FronteggApp.react.exports.useCallback(() => {
        if (email && usedStrategy) {
            quickSmsPasswordlessPreLogin({ email, recaptchaToken });
            loadNewToken();
        }
        else {
            onMainAuthenticationRequired === null || onMainAuthenticationRequired === void 0 ? void 0 : onMainAuthenticationRequired();
        }
    }, [quickSmsPasswordlessPreLogin, loadNewToken, onMainAuthenticationRequired, recaptchaToken]);
    const { disclaimer } = formik_esm.useTheme();
    return FronteggApp.React.createElement(FronteggApp.React.Fragment, null,
        error && FronteggApp.React.createElement(LoginErrorMessage, null, error),
        FronteggApp.React.createElement(formik_esm.Button$1, { sx: { mt: 4 }, fullWidth: true, loading: loading, color: "primary", type: "submit", onClick: handleSubmit }, t('smsLoginButton')),
        disclaimer && (!disclaimer.placement || disclaimer.placement === 'box') && FronteggApp.React.createElement(DisclaimerInfo, null));
};

const LoginWithQuickSms = ({ onMainAuthenticationRequired }) => {
    const t = useT('login');
    const isThumbnailMode = useShowThumbnail(LoginStrategyID.Sms);
    return FronteggApp.React.createElement(BoxElement$1, null,
        FronteggApp.React.createElement(LoginPageTitle, { isThumbnailMode: isThumbnailMode, componentKey: 'smsPreviewTitle', title: t('smsLoginTitle') }),
        FronteggApp.React.createElement(formik_esm.Collapse$1, { in: !isThumbnailMode },
            FronteggApp.React.createElement(LoginPageMessage, { componentKey: 'smsPreviewMessage', message: t('smsLoginMessage'), textAlignCenter: true })),
        FronteggApp.React.createElement(LoginIconContainer, { isThumbnailMode: isThumbnailMode },
            FronteggApp.React.createElement(LoginIconComponent, { componentKey: 'smsCardIcon' },
                FronteggApp.React.createElement(formik_esm.SmsIcon, null))),
        FronteggApp.React.createElement(formik_esm.Collapse$1, { in: !isThumbnailMode, appear: false, timeout: 300 },
            FronteggApp.React.createElement(LoginWithQuickSmsForm, { onMainAuthenticationRequired: onMainAuthenticationRequired })));
};

const useLoginStrategiesConfig = () => {
    const [isLoading, setIsLoading] = FronteggApp.react.exports.useState(true);
    const [isPlatformAuthenticationAvailable, setIsPlatformAuthenticationAvailable] = FronteggApp.react.exports.useState(true);
    const { policy, loading } = formik_esm.usePublicAuthStrategiesPolicySettings();
    FronteggApp.react.exports.useEffect(() => {
        (() => FronteggApp.__awaiter(void 0, void 0, void 0, function* () {
            if (window.PublicKeyCredential) {
                const available = yield PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable();
                setIsPlatformAuthenticationAvailable(available);
            }
            setIsLoading(false);
        }))();
    }, [setIsLoading, setIsPlatformAuthenticationAvailable]);
    const isPlatformAuthenticationAllowed = !!(policy === null || policy === void 0 ? void 0 : policy.secondaryAuthStrategies.some(({ isActive, strategy }) => isActive && strategy === restApi.SecondaryAuthStrategy.WebAuthnPlatform));
    const isCrossPlatformAuthenticationAllowed = !!(policy === null || policy === void 0 ? void 0 : policy.secondaryAuthStrategies.some(({ isActive, strategy }) => isActive && strategy === restApi.SecondaryAuthStrategy.WebAuthnCrossPlatform));
    const isSmsAuthenticationAllowed = !!(policy === null || policy === void 0 ? void 0 : policy.secondaryAuthStrategies.some(({ isActive, strategy }) => isActive && strategy === restApi.SecondaryAuthStrategy.SmsCode));
    return {
        isSmsAuthenticationAllowed,
        isLoading: isLoading || loading,
        isCrossPlatformAuthenticationAllowed: !!window.PublicKeyCredential && isCrossPlatformAuthenticationAllowed,
        isPlatformAuthenticationAvailable: !!window.PublicKeyCredential && isPlatformAuthenticationAvailable && isPlatformAuthenticationAllowed,
    };
};
const openCarouselAnimationDuration = 1; // seconds
const closeCarouselAnimationDuration = 0.5; // seconds
const useLoginCarousel = () => {
    const [isCarouselOpen, setIsCarouselOpen] = FronteggApp.react.exports.useState(true);
    const { setLoginState } = formik_esm.useLoginActions();
    const { isPlatformAuthenticationAvailable, isSmsAuthenticationAllowed, isCrossPlatformAuthenticationAllowed, isLoading, } = useLoginStrategiesConfig();
    const handleMainAuthenticationRequired = FronteggApp.react.exports.useCallback((loginStrategyId) => {
        setIsCarouselOpen(false);
        setLoginState({ quickLoginToRegister: loginStrategyId });
        localStorage.setItem('register-quick-login', loginStrategyId);
    }, [setIsCarouselOpen, setLoginState]);
    const handleAnimationClose = FronteggApp.react.exports.useCallback(() => {
        setLoginState({ flow: reduxStore.LoginFlow.RegisterQuickLogin });
    }, [setLoginState]);
    const email = localStorage.getItem('email');
    const { layout, breakpoints } = formik_esm.useTheme();
    const twoSideElementsActive = (layout === null || layout === void 0 ? void 0 : layout.type) === 'float-left' || (layout === null || layout === void 0 ? void 0 : layout.type) === 'float-right';
    const shouldDisplayQuickLogins = formik_esm.useMuiMediaQuery(breakpoints.up('sm')) && !twoSideElementsActive;
    const items = FronteggApp.react.exports.useMemo(() => [
        {
            id: LoginStrategyID.Internal,
            component: (FronteggApp.React.createElement(LoginWithTouchID, { onMainAuthenticationRequired: () => handleMainAuthenticationRequired(LoginStrategyID.Internal) })),
            show: isPlatformAuthenticationAvailable && shouldDisplayQuickLogins,
        },
        {
            id: LoginStrategyID.UsbKey,
            component: (FronteggApp.React.createElement(LoginWithUsbKey, { onMainAuthenticationRequired: () => handleMainAuthenticationRequired(LoginStrategyID.UsbKey) })),
            show: isCrossPlatformAuthenticationAllowed && shouldDisplayQuickLogins,
        },
        {
            id: LoginStrategyID.Main,
            component: FronteggApp.React.createElement(LoginWithPassword, null),
            show: true,
        },
        {
            id: LoginStrategyID.Sms,
            component: (FronteggApp.React.createElement(LoginWithQuickSms, { onMainAuthenticationRequired: () => handleMainAuthenticationRequired(LoginStrategyID.Sms) })),
            show: isSmsAuthenticationAllowed && shouldDisplayQuickLogins,
        },
        {
            id: LoginStrategyID.Android,
            component: (FronteggApp.React.createElement(LoginWithAndroid, { onMainAuthenticationRequired: () => handleMainAuthenticationRequired(LoginStrategyID.Android) })),
            show: isCrossPlatformAuthenticationAllowed && shouldDisplayQuickLogins,
        },
    ].filter(({ show }) => show), [
        isPlatformAuthenticationAvailable,
        isCrossPlatformAuthenticationAllowed,
        isSmsAuthenticationAllowed,
        shouldDisplayQuickLogins,
    ]);
    const initialIndex = FronteggApp.react.exports.useMemo(() => {
        var _a;
        const lastLoginStrategy = (_a = localStorage.getItem(`${email}-preferred-login-method`)) !== null && _a !== void 0 ? _a : LoginStrategyID.Main;
        let initialIndex = items.findIndex(({ id }) => id === lastLoginStrategy);
        if (initialIndex === -1) {
            initialIndex = items.findIndex(({ id }) => id === LoginStrategyID.Main);
        }
        return initialIndex;
    }, [items, handleMainAuthenticationRequired]);
    const [activeIndex, setActiveIndex] = FronteggApp.react.exports.useState();
    return {
        items,
        isLoading,
        activeIndex: activeIndex !== null && activeIndex !== void 0 ? activeIndex : initialIndex,
        component: isLoading ? null : (FronteggApp.React.createElement(formik_esm.AnimatedCardCarousel$1, { items: items.map((item) => item.component), onActiveItemChange: (index) => {
                setActiveIndex(index);
                setLoginState({ error: null });
            }, openCarouselAnimationDuration: openCarouselAnimationDuration, closeCarouselAnimationDuration: closeCarouselAnimationDuration, onCloseCarouselAnimationFinish: handleAnimationClose, open: isCarouselOpen, activeIndex: activeIndex !== null && activeIndex !== void 0 ? activeIndex : initialIndex })),
    };
};

const PageTitle = loginStyler(formik_esm.Typography$1)(({ theme }) => (Object.assign({ fontWeight: 'bold', fontSize: '1.8rem', textAlign: 'center' }, theme.pageTitleStyle)));
const PageSubtitle = loginStyler(formik_esm.Typography$1)(({ theme }) => (Object.assign({ fontSize: '1rem', textAlign: 'center' }, theme.pageSubtitleStyle)));
const LoginCarousel = () => {
    const { component: carousel, activeIndex, items, isLoading } = useLoginCarousel();
    const t = useT('login');
    const theme = formik_esm.useTheme();
    const name = localStorage.getItem('name');
    const showTitles = formik_esm.useMuiMediaQuery(theme.breakpoints.up('sm')) && items.length > 1;
    const { pageTitle, pageSubtitle } = FronteggApp.react.exports.useMemo(() => {
        let pageTitle = t('loginWelcomeTitle');
        let pageSubtitle = t('loginWelcomeSubtitleSubtitle');
        if (name) {
            pageTitle += `, ${name}`;
            pageSubtitle = t('loginWelcomeKnownUserSubtitle');
        }
        return { pageTitle, pageSubtitle };
    }, [t]);
    if (isLoading) {
        return null;
    }
    return (FronteggApp.React.createElement(LoginCarouselContext.Provider, { value: { items, activeIndex } },
        showTitles && FronteggApp.React.createElement(formik_esm.Box, { display: 'flex', flexDirection: 'column', rowGap: 2 },
            FronteggApp.React.createElement(PageTitle, null, pageTitle),
            FronteggApp.React.createElement(PageSubtitle, null, pageSubtitle)),
        carousel));
};

const ResendContainer = loginStyler(ResendOTCComponent)(({ theme }) => (Object.assign({ marginTop: '1rem', textAlign: 'center' }, theme.resendOTCStyle)));
const ResendOTCMessage = loginStyler(formik_esm.Typography$1)(({ theme }) => (Object.assign({ color: 'inherit' }, theme.resendOTCMessageStyle)));
const OTCField$1 = () => {
    const [, , { setValue }] = formik_esm.useField('token');
    const { submitForm } = formik_esm.useFormikContext();
    return FronteggApp.React.createElement(formik_esm.Box, { sx: { mb: 4 } },
        FronteggApp.React.createElement(formik_esm.OTCInput$1, { autoFocus: true, length: 6, onChangeOTC: setValue, "data-test-id": 'otc-box', onOTCComplete: submitForm }));
};
const ResendCode = ({ onResendCode }) => {
    const t = useT('login');
    const { resetLoginState } = formik_esm.useLoginActions();
    const { email } = formik_esm.useLoginState();
    const { values: { recaptchaToken } } = formik_esm.useFormikContext();
    const resendOTC = FronteggApp.react.exports.useCallback(() => {
        if (email) {
            onResendCode({ recaptchaToken, email });
        }
        else {
            resetLoginState();
        }
    }, [onResendCode, email, recaptchaToken]);
    const props = {
        haventReceiveOTCMessage: t('otcHaventReceivedCode'),
        resendOTCMessage: t('otcResend'),
        resendOTC,
    };
    return FronteggApp.React.createElement(ResendContainer, Object.assign({ componentKey: 'resendOTC' }, props),
        FronteggApp.React.createElement(ResendOTCMessage, { variant: 'subtitle1' },
            props.haventReceiveOTCMessage,
            " ",
            FronteggApp.React.createElement(formik_esm.Link, { onClick: props.resendOTC, "data-test-id": 'resend-otc-btn' }, props.resendOTCMessage)));
};
const LoginWithOTC = ({ header, onResendCode, onSubmit, loading, error }) => {
    const t = useT('login');
    const { setLoginState } = formik_esm.useLoginActions();
    const recaptchaRef = FronteggApp.React.createRef();
    const { token: recaptchaToken, loadNewToken } = useRecaptchaContext();
    FronteggApp.react.exports.useEffect(() => {
        setLoginState({ error: null });
    }, [setLoginState]);
    const handleResendCode = FronteggApp.react.exports.useCallback(({ recaptchaToken, email }) => {
        onResendCode({ recaptchaToken, email });
        loadNewToken();
    }, [onResendCode, recaptchaRef]);
    return FronteggApp.React.createElement(BoxElement$1, null,
        header,
        FronteggApp.React.createElement(FromWrapper, { initialValues: { token: '', recaptchaToken }, onSubmit: (values) => {
                onSubmit(Object.assign({}, values));
                loadNewToken();
            }, validationSchema: formik_esm.validateSchema({
                token: formik_esm.validateLength(6, t('otcCodeIsRequired'), t('otcInvalidLengthCode'))
            }), enableReinitialize: true }, ({ dirty, isValid }) => FronteggApp.React.createElement(FronteggApp.React.Fragment, null,
            FronteggApp.React.createElement(OTCField$1, null),
            error && FronteggApp.React.createElement(LoginErrorMessage, null, error),
            FronteggApp.React.createElement(formik_esm.Button$1, { disabled: loading || !isValid || !dirty, 
                // TODO the data-test-id was changed from `passwordless-prelogin-success-resend-btn` value to the `passwordless-continue-btn`
                className: 'fe-primary-btn', fullWidth: true, color: 'primary', loading: loading, "data-test-id": 'passwordless-continue-btn' }, t('otcContinue')),
            FronteggApp.React.createElement(ResendCode, { onResendCode: handleResendCode }))));
};

const LoginWithSmsOTC = () => {
    const t = useT('login');
    const { phoneNumber } = formik_esm.useLoginState();
    const { passwordlessPreLogin, passwordlessPostLogin } = formik_esm.useLoginActions();
    const { invitationToken } = useVerifyInviteToken();
    const { loading, error } = formik_esm.useLoginState();
    const onRedirectTo = formik_esm.useOnRedirectTo();
    const routes = formik_esm.useAuthRoutes();
    const handleSubmit = FronteggApp.react.exports.useCallback((values) => {
        passwordlessPostLogin(Object.assign(Object.assign({}, values), { invitationToken, type: reduxStore.AuthStrategyEnum.SmsCode }));
    }, [passwordlessPostLogin]);
    const handleResend = FronteggApp.react.exports.useCallback((values) => {
        passwordlessPreLogin(Object.assign(Object.assign({}, values), { type: reduxStore.AuthStrategyEnum.SmsCode }));
    }, [passwordlessPreLogin]);
    const goToChangePhoneNumber = FronteggApp.react.exports.useCallback(() => {
        onRedirectTo(routes.resetPhoneNumberUrl);
    }, [onRedirectTo, routes.resetPhoneNumberUrl]);
    return FronteggApp.React.createElement(LoginWithOTC, { loading: loading, error: error, onSubmit: handleSubmit, onResendCode: handleResend, header: FronteggApp.React.createElement(FronteggApp.React.Fragment, null,
            FronteggApp.React.createElement(LoginPageTitle, { componentKey: 'otcTitle', title: t('smsOtcTitle') }),
            FronteggApp.React.createElement(LoginPageMessage, { componentKey: 'otcMessage', message: FronteggApp.React.createElement(FronteggApp.React.Fragment, null,
                    t('smsOtcMessage', { phoneNumber }),
                    " ",
                    FronteggApp.React.createElement(formik_esm.Link, { onClick: goToChangePhoneNumber }, t('smsOtcChangePhoneMessage'))) })) });
};

const ReCaptcha = ({ action, fieldName = 'recaptchaToken', recaptchaRef }) => {
    const { setFieldValue } = formik_esm.useFormikContext();
    const recaptcha = useRecaptcha({ action, recaptchaRef });
    const token = recaptcha === null || recaptcha === void 0 ? void 0 : recaptcha.token;
    FronteggApp.react.exports.useEffect(() => {
        token && setFieldValue(fieldName, token, true);
    }, [fieldName, token, setFieldValue]);
    return FronteggApp.React.createElement(FronteggApp.React.Fragment, null, recaptcha === null || recaptcha === void 0 ? void 0 : recaptcha.component);
};

const ONE_DAY_IN_SECONDS$1 = 60 * 60 * 24;
const CodeField$1 = () => {
    const [, , { setValue }] = formik_esm.useField('code');
    const { submitForm, isValid } = formik_esm.useFormikContext();
    return FronteggApp.React.createElement(formik_esm.Box, { mt: 4 },
        FronteggApp.React.createElement(formik_esm.OTCInput$1, { autoFocus: true, length: 6, onChangeOTC: setValue, "data-test-id": 'mfa-code-input', onOTCComplete: submitForm }));
};
const RememberDeviceField = ({ mfaDeviceExpiration }) => {
    const t = useT('login');
    const [rememberDeviceFieldProps] = formik_esm.useField('rememberDevice');
    return (FronteggApp.React.createElement(formik_esm.FormControlLabel, { sx: { pl: 0, pb: 0, pt: 4 }, control: FronteggApp.React.createElement(formik_esm.Checkbox$1, Object.assign({}, rememberDeviceFieldProps, { size: "small" })), label: (FronteggApp.React.createElement(formik_esm.Typography$1, { variant: "body1" }, t('mfaRememberThisDevice', { count: Math.floor(mfaDeviceExpiration / ONE_DAY_IN_SECONDS$1) }))) }));
};
const LoginWithTwoFactor = () => {
    const t = useT('login');
    const { loading, error, mfaToken } = formik_esm.useLoginState();
    const { loginWithMfa, setLoginState } = formik_esm.useLoginActions();
    const { allowRememberMfaDevice, mfaDeviceExpiration } = formik_esm.useLoginState();
    const initialValues = FronteggApp.react.exports.useMemo(() => ({ code: '', rememberDevice: false }), []);
    const validationSchema = FronteggApp.react.exports.useMemo(() => formik_esm.validateSchema({
        code: formik_esm.validateMinLength(6, t('mfaCodeIsRequired'), t('mfaCodeLengthAtLeast6')),
    }), [t]);
    const formikProps = {
        onSubmit: ({ code, rememberDevice }) => new Promise((resolve, reject) => {
            const callback = formik_esm.callbackToPromise(resolve, reject);
            loginWithMfa({ mfaToken: mfaToken || '', value: code, rememberDevice, callback });
        }),
        initialValues,
        validationSchema,
    };
    return FronteggApp.React.createElement(BoxElement$1, null,
        FronteggApp.React.createElement(LoginPageTitle, { componentKey: 'title', title: t('mfaTitle') }),
        FronteggApp.React.createElement(FromWrapper, Object.assign({}, formikProps), ({ isValid, dirty }) => {
            return FronteggApp.React.createElement(FronteggApp.React.Fragment, null,
                FronteggApp.React.createElement(CodeField$1, null),
                error && FronteggApp.React.createElement(LoginErrorMessage, null, error),
                allowRememberMfaDevice && mfaDeviceExpiration && FronteggApp.React.createElement(RememberDeviceField, { mfaDeviceExpiration: mfaDeviceExpiration }),
                FronteggApp.React.createElement(formik_esm.Box, { height: '1px', mb: 4 }),
                FronteggApp.React.createElement(formik_esm.Button$1, { className: 'fe-primary-btn', disabled: loading || !isValid || !dirty, fullWidth: true, color: 'primary', loading: loading, "data-test-id": 'submit-btn' }, t('login')),
                FronteggApp.React.createElement(formik_esm.Typography$1, { variant: 'body1Bold', mt: 4 }, t('disableMultiFactorTitle')),
                FronteggApp.React.createElement(formik_esm.Typography$1, { variant: 'body1', mt: 1 },
                    FronteggApp.React.createElement(formik_esm.Link, { "data-test-id": "disableMfaClickHereButton", onClick: () => {
                            setLoginState({ step: reduxStore.LoginStep.recoverTwoFactor });
                        } }, t('disabledMultiFactorClickHereButton')),
                    " ",
                    t('disableMultiFactorMessage')),
                FronteggApp.React.createElement(ReCaptcha, { action: 'login' }));
        }));
};

const PasswordlessPreLoginSuccessContainer = formik_esm.styled(formik_esm.Box)({
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    '.MuiTypography-root': {
        marginBottom: '1.5rem',
    },
});
const ResendLinkButton = formik_esm.styled(formik_esm.Button$1)({
    width: '22rem',
    marginBottom: '2rem',
    marginTop: '2rem'
});
const MagicLinkPreLoginSuccess = () => {
    const t = useT('login');
    const { email, loading } = formik_esm.useLoginState();
    const { passwordlessPreLogin, resetLoginState } = formik_esm.useLoginActions();
    const { invitationToken } = useVerifyInviteToken();
    const { token: recaptchaToken, loadNewToken } = useRecaptchaContext();
    return FronteggApp.React.createElement(BoxElement$1, null,
        FronteggApp.React.createElement(formik_esm.LoginMessage, { title: t('magicLinkTitle'), description: t(`magicLinkText`, { email }), testId: 'magic-link-success', iconKey: 'magicLinkSent' },
            FronteggApp.React.createElement(FromWrapper, { initialValues: { email, recaptchaToken }, onSubmit: (values) => {
                    passwordlessPreLogin(Object.assign(Object.assign({}, values), { invitationToken, type: reduxStore.AuthStrategyEnum.MagicLink }));
                    loadNewToken();
                }, enableReinitialize: true }, () => FronteggApp.React.createElement(PasswordlessPreLoginSuccessContainer, null,
                FronteggApp.React.createElement(ResendLinkButton, { fullWidth: true, color: 'primary', loading: loading, "data-test-id": 'passwordless-prelogin-success-resend-btn' }, t(`magicLinkResend`)),
                FronteggApp.React.createElement(formik_esm.Link, { onClick: resetLoginState }, t(`backToLogin`))))));
};

const CodeField = () => {
    const t = useT('login');
    const [fieldProps, { error, touched }] = formik_esm.useField('code');
    return FronteggApp.React.createElement(formik_esm.Input$1, Object.assign({ label: t('enterRecoveryCode') }, fieldProps, { error: !!error && touched, errorMessage: error, autoComplete: 'one-time-code', "data-test-id": 'mfa-code-input' }));
};
const RecoverTwoFactor = () => {
    const t = useT('login');
    const { recoverMfa } = formik_esm.useLoginActions();
    const { loading, error, email } = formik_esm.useLoginState();
    const initialValues = FronteggApp.react.exports.useMemo(() => ({ code: '' }), []);
    const validationSchema = FronteggApp.react.exports.useMemo(() => formik_esm.validateSchema({
        code: formik_esm.validateMinLength(8, t('twoFactorCodeIsRequired'), t('twoFactorCodeLengthAtLeast8')),
    }), [t]);
    const formikProps = {
        onSubmit: ({ code }) => new Promise((resolve) => {
            recoverMfa({ email: email !== null && email !== void 0 ? email : '', recoveryCode: code });
            resolve();
        }),
        initialValues,
        validationSchema,
    };
    return FronteggApp.React.createElement(BoxElement$1, null,
        FronteggApp.React.createElement(LoginPageTitle, { componentKey: 'recoverMfaTitle', title: t('recoverMfaTitle') }),
        FronteggApp.React.createElement(FromWrapper, Object.assign({}, formikProps), ({ isValid, dirty }) => {
            return FronteggApp.React.createElement(FronteggApp.React.Fragment, null,
                FronteggApp.React.createElement(CodeField, null),
                error && FronteggApp.React.createElement(LoginErrorMessage, null, error),
                FronteggApp.React.createElement(formik_esm.Button$1, { sx: { mt: 4 }, "data-test-id": 'diableMfaBtn', className: 'fe-primary-btn', disabled: loading || !isValid || !dirty, fullWidth: true, color: 'primary', loading: loading }, t('disabledMultiFactorButton')),
                FronteggApp.React.createElement(ReCaptcha, { action: 'login' }));
        }));
};

const LargeLoader = ({ height }) => {
    return FronteggApp.React.createElement(formik_esm.Grid, { container: true, justifyContent: 'center', alignItems: 'center', height: height !== null && height !== void 0 ? height : 100 },
        FronteggApp.React.createElement(formik_esm.Grid, { item: true },
            FronteggApp.React.createElement(formik_esm.Loader$1, { "data-test-id": "page-loader" })));
};

const RedirectToSSO = () => {
    const t = useT('login');
    return (FronteggApp.React.createElement(BoxElement$1, null,
        FronteggApp.React.createElement(formik_esm.Typography$1, { sx: { marginBottom: 4, width: '100%', textAlign: 'center' }, variant: 'body1Bold' }, t('ssoRedirectToMessage')),
        FronteggApp.React.createElement(LargeLoader, { height: 40 })));
};

const LoginWithEmailOTC = () => {
    const t = useT('login');
    const { email } = formik_esm.useLoginState();
    const { passwordlessPreLogin, passwordlessPostLogin } = formik_esm.useLoginActions();
    const { invitationToken } = useVerifyInviteToken();
    const { loading, error } = formik_esm.useLoginState();
    const { events } = formik_esm.useShadowDom();
    const handleSubmit = FronteggApp.react.exports.useCallback((values) => {
        passwordlessPostLogin(Object.assign(Object.assign({}, values), { invitationToken, type: reduxStore.AuthStrategyEnum.Code, events }));
    }, [passwordlessPostLogin]);
    const handleResend = FronteggApp.react.exports.useCallback((values) => {
        passwordlessPreLogin(Object.assign(Object.assign({}, values), { type: reduxStore.AuthStrategyEnum.Code }));
    }, [passwordlessPreLogin]);
    return FronteggApp.React.createElement(LoginWithOTC, { loading: loading, error: error, onSubmit: handleSubmit, onResendCode: handleResend, header: FronteggApp.React.createElement(FronteggApp.React.Fragment, null,
            FronteggApp.React.createElement(LoginPageTitle, { componentKey: 'otcTitle', title: t('otcTitle') }),
            FronteggApp.React.createElement(LoginPageMessage, { textAlignCenter: true, componentKey: 'otcMessage', message: t(`otcMessage`, { email }) })) });
};

const OTCField = () => {
    const [, , { setValue }] = formik_esm.useField('token');
    const { submitForm } = formik_esm.useFormikContext();
    return FronteggApp.React.createElement(formik_esm.OTCInput$1, { autoFocus: true, length: 6, onChangeOTC: setValue, "data-test-id": 'otc-box', onOTCComplete: submitForm });
};
const LoginWithQuickSmsVerifyOTC = ({ onBack }) => {
    var _a;
    const t = useT('login');
    const { loading, error, changePhoneId, phoneNumber } = formik_esm.useLoginState();
    const { changePhoneNumberWithVerification, quickSmsPasswordlessPreLogin, passwordlessPostLogin, verifyChangePhoneNumber, afterAuthNavigation } = formik_esm.useLoginActions();
    const { token: recaptchaToken, loadNewToken } = useRecaptchaContext();
    const user = formik_esm.useAuthUserOrNull();
    const email = localStorage.getItem('email');
    const usedStrategy = localStorage.getItem(`${email}-${LoginStrategyID.Sms}`);
    const handleSubmit = FronteggApp.react.exports.useCallback((values) => {
        const callback = (success) => {
            if (success) {
                const email = localStorage.getItem('email');
                localStorage.setItem(`${email}-${LoginStrategyID.Sms}`, 'true');
                localStorage.setItem(`${email}-preferred-login-method`, LoginStrategyID.Sms);
                afterAuthNavigation();
            }
        };
        if (email && usedStrategy) {
            passwordlessPostLogin({ token: values.token, type: reduxStore.AuthStrategyEnum.SmsCode, recaptchaToken, callback });
        }
        else if (user) {
            verifyChangePhoneNumber({ code: values.token, changePhoneId: values.changePhoneId, callback });
        }
        loadNewToken();
    }, [email, usedStrategy, afterAuthNavigation, passwordlessPostLogin, recaptchaToken]);
    const handleResendCode = FronteggApp.react.exports.useCallback(() => {
        if (email && usedStrategy) {
            quickSmsPasswordlessPreLogin({ recaptchaToken, email });
            loadNewToken();
        }
        else if (user) {
            changePhoneNumberWithVerification({ phoneNumber: phoneNumber });
        }
    }, [email, loadNewToken, usedStrategy, user, changePhoneNumberWithVerification, phoneNumber]);
    return FronteggApp.React.createElement(BoxElement$1, null,
        onBack && FronteggApp.React.createElement(formik_esm.IconButton, { color: 'inherit', onClick: onBack },
            FronteggApp.React.createElement(ArrowBackIosNew, null)),
        FronteggApp.React.createElement(LoginPageTitle, { componentKey: "smsVerifyCodeTitle", title: t('smsLoginPinTitle') }),
        FronteggApp.React.createElement(LoginPageMessage, { componentKey: 'smsVerifyCodeMessage', message: t('smsLoginPinMessage', { phoneNumber: (_a = user === null || user === void 0 ? void 0 : user.phoneNumber) !== null && _a !== void 0 ? _a : localStorage.getItem(`${email}-phone`) }), textAlignCenter: true }),
        FronteggApp.React.createElement(FromWrapper, { onSubmit: handleSubmit, initialValues: { token: '', changePhoneId }, validationSchema: formik_esm.validateSchema({
                token: formik_esm.validateLength(6, t('otcCodeIsRequired'), t('otcInvalidLengthCode'))
            }), enableReinitialize: true }, ({ isValid }) => FronteggApp.React.createElement(FronteggApp.React.Fragment, null,
            FronteggApp.React.createElement(OTCField, null),
            error && FronteggApp.React.createElement(LoginErrorMessage, null, error),
            FronteggApp.React.createElement(formik_esm.Button$1, { disabled: loading || !isValid, sx: { mt: 4 }, fullWidth: true, loading: loading, color: "primary", type: "submit" }, t('smsLoginPinButton')),
            FronteggApp.React.createElement(formik_esm.Typography$1, { variant: 'subtitle1', textAlign: 'center', mt: 3 },
                FronteggApp.React.createElement(formik_esm.Link, { onClick: handleResendCode, "data-test-id": 'resend-otc-btn' }, t('otcResend'))))));
};

const getLoginComponentByStep = (step) => {
    if ([reduxStore.LoginStep.preLogin, reduxStore.LoginStep.loginWithPassword].includes(step)) {
        return FronteggApp.React.createElement(LoginWithPassword, null);
    }
    else if (step === reduxStore.LoginStep.redirectToSSO) {
        return FronteggApp.React.createElement(RedirectToSSO, null);
    }
    else if (step === reduxStore.LoginStep.loginWithTwoFactor) {
        return FronteggApp.React.createElement(LoginWithTwoFactor, null);
    }
    else if (step === reduxStore.LoginStep.recoverTwoFactor) {
        return FronteggApp.React.createElement(RecoverTwoFactor, null);
    }
    else if (step === reduxStore.LoginStep.magicLinkPreLoginSuccess) {
        return FronteggApp.React.createElement(MagicLinkPreLoginSuccess, null);
    }
    else if (step === reduxStore.LoginStep.loginWithSmsOtc) {
        return FronteggApp.React.createElement(LoginWithSmsOTC, null);
    }
    else if (step === reduxStore.LoginStep.loginWithOtc) {
        return FronteggApp.React.createElement(LoginWithEmailOTC, null);
    }
    else if (step === reduxStore.LoginStep.loginWithQuickSmsOtc) {
        return FronteggApp.React.createElement(LoginWithQuickSmsVerifyOTC, null);
    }
};

const PhoneField$2 = () => {
    const [{ value }, { error, touched }, { setValue, setTouched }] = formik_esm.useField('phoneNumber');
    const { injector } = formik_esm.useShadowDom();
    return FronteggApp.React.createElement(formik_esm.SelectPhoneNumber$1, { container: injector.loginBoxEl, phoneNumber: value, setPhoneNumber: (phone) => setValue(String(phone)), onBlur: () => setTouched(true), error: !!error && touched && value.length > 5, errorMessage: error });
};
const LoginWithQuickSmsChangePhone = () => {
    const t = useT('login');
    const { changePhoneNumberWithVerification } = formik_esm.useLoginActions();
    const { loading, error, phoneNumber } = formik_esm.useLoginState();
    const user = formik_esm.useAuthUserOrNull();
    const validationSchema = FronteggApp.react.exports.useMemo(() => formik_esm.validateSchema({
        phoneNumber: formik_esm.validationPhoneUsingLibphonejs(t('phoneIsRequired'), t('phoneIsInvalid')),
    }), [t]);
    const handleSubmit = FronteggApp.react.exports.useCallback(({ phoneNumber }) => {
        changePhoneNumberWithVerification({ phoneNumber });
        localStorage.setItem(`${user === null || user === void 0 ? void 0 : user.email}-phone`, phoneNumber);
    }, [user, changePhoneNumberWithVerification]);
    return FronteggApp.React.createElement(BoxElement$1, null,
        FronteggApp.React.createElement(LoginPageTitle, { componentKey: 'smsChangePhoneTitle', title: t('smsLoginChangePhoneTitle') }),
        FronteggApp.React.createElement(LoginPageMessage, { componentKey: 'smsChangePhoneMessage', message: t('smsLoginChangePhoneMessage'), textAlignCenter: true }),
        FronteggApp.React.createElement(FromWrapper, { onSubmit: handleSubmit, initialValues: { phoneNumber: phoneNumber !== null && phoneNumber !== void 0 ? phoneNumber : '+1' }, validationSchema: validationSchema }, ({ isValid }) => FronteggApp.React.createElement(FronteggApp.React.Fragment, null,
            FronteggApp.React.createElement(PhoneField$2, null),
            error && FronteggApp.React.createElement(LoginErrorMessage, null, error),
            FronteggApp.React.createElement(formik_esm.Button$1, { disabled: loading || !isValid, sx: { mt: 4 }, fullWidth: true, loading: loading, color: "primary", type: "submit" }, t('smsLoginChangePhoneButton')))));
};

const PopupMainCard = formik_esm.styled(formik_esm.Box)(({ showCard, shouldRunAnimations }) => (showCard ? {
    position: 'absolute',
    opacity: 1,
    transform: 'translateX(-50%)',
    display: 'flex',
    justifyContent: 'center',
    bottom: 0,
    zIndex: 3,
    animation: shouldRunAnimations ? 'pop-up 0.5s ease-in-out 1' : '',
    width: '465px',
    left: '50%',
    'div:first-of-type': {
        maxWidth: '100%',
    },
    "@keyframes pop-up": {
        "0%": {
            transform: 'translateX(-50%)',
            bottom: '-4rem',
            width: '465px',
            opacity: 0,
            zIndex: 3,
        },
        "100%": {
            transform: 'translateX(-50%)',
            bottom: 0,
            width: '465px',
            opacity: 1,
            zIndex: 3
        }
    },
    '> div:first-of-type': {
        minHeight: '420px',
        display: 'flex',
        flexDirection: 'column',
        justifyContent: 'center',
    },
} : {
    position: 'absolute',
    transform: 'translateX(-50%)',
    display: 'flex',
    justifyContent: 'center',
    bottom: '-4rem',
    width: '465px',
    opacity: 0,
    zIndex: -1,
    left: '50%',
    animation: shouldRunAnimations ? 'hide-pop-up 0.4s ease-in-out 1' : '',
    'div:first-of-type': {
        maxWidth: '100%',
    },
    "@keyframes hide-pop-up": {
        "0%": {
            transform: 'translateX(-50%)',
            bottom: 0,
            width: '465px',
            opacity: 1,
            zIndex: 3
        },
        "100%": {
            transform: 'translateX(-50%)',
            bottom: '-4rem',
            width: '465px',
            opacity: 0,
            zIndex: -1,
        }
    }
}));
const RegiterQuickLoginCard = formik_esm.styled(formik_esm.Box)(({ showCard, shouldRunAnimations }) => (showCard ? {
    width: '465px',
    opacity: 1,
    animation: shouldRunAnimations ? 'show 0.4s ease-in-out 1' : '',
    zIndex: 3,
    display: 'flex',
    justifyContent: 'center',
    'div:first-of-type': {
        maxWidth: '100%',
    },
    "@keyframes show": {
        "0%": {
            width: '400px',
            opacity: 0.5,
        },
        "100%": {
            width: '465px',
            opacity: 1,
        }
    }
} : {
    width: '400px',
    opacity: 0.5,
    animation: shouldRunAnimations ? 'go-back 0.5s ease-in-out 1' : '',
    display: 'flex',
    justifyContent: 'center',
    'div:first-of-type': {
        maxWidth: '100%',
    },
    "@keyframes go-back": {
        "0%": {
            width: '465px',
            opacity: 1,
        },
        "100%": {
            width: '400px',
            opacity: 0.5,
        }
    }
}));
const RegisterQuickLoginContainer = formik_esm.styled(formik_esm.Box)({
    position: 'relative',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    minHeight: '35rem',
    width: '100%',
    flexDirection: 'column',
    rowGap: '2.5rem'
});
const RegisterQuickLogin = ({ loginStrategyId }) => {
    const t = useT('login');
    const { step } = formik_esm.useLoginState();
    const user = formik_esm.useAuthUserOrNull();
    const [shouldRunAnimations] = FronteggApp.react.exports.useState(!user);
    const { silentLogout, setState, resetLoginState, setLoginState } = formik_esm.useAuthActions();
    const handleQuickSmsGoBack = FronteggApp.react.exports.useCallback(() => {
        setLoginState({ step: reduxStore.LoginStep.preLogin });
    }, []);
    const mainCard = getLoginComponentByStep(step);
    let component;
    let type = '';
    if (loginStrategyId === LoginStrategyID.Internal) {
        component = FronteggApp.React.createElement(LoginWithTouchID, null);
        type = t('touchId');
    }
    else if (loginStrategyId === LoginStrategyID.Android) {
        component = FronteggApp.React.createElement(LoginWithAndroid, null);
        type = t('android');
    }
    else if (loginStrategyId === LoginStrategyID.UsbKey) {
        component = FronteggApp.React.createElement(LoginWithUsbKey, null);
        type = t('usb');
    }
    else if (loginStrategyId === LoginStrategyID.Sms) {
        type = t('sms');
        component = FronteggApp.React.createElement(LoginWithQuickSms, null);
        if (user) {
            component = FronteggApp.React.createElement(LoginWithQuickSmsChangePhone, null);
        }
        if (step === reduxStore.LoginStep.loginWithQuickSmsOtc) {
            component = FronteggApp.React.createElement(LoginWithQuickSmsVerifyOTC, { onBack: handleQuickSmsGoBack });
        }
    }
    const handleBackToLogin = FronteggApp.react.exports.useCallback(() => {
        setState({ isAuthenticated: false, user: undefined });
        resetLoginState();
        localStorage.removeItem('register-quick-login');
        silentLogout();
    }, [silentLogout, resetLoginState, setState]);
    return FronteggApp.React.createElement(RegisterQuickLoginContainer, null,
        FronteggApp.React.createElement(formik_esm.Box, { display: 'flex', flexDirection: 'column', rowGap: 2 },
            FronteggApp.React.createElement(PageTitle, null, t('registerNewQuickLoginTitle')),
            FronteggApp.React.createElement(PageSubtitle, null, t('registerNewQuickLoginSubtitle', { type }))),
        FronteggApp.React.createElement(formik_esm.Box, { minHeight: '32.5rem', display: 'flex', alignItems: 'center', position: 'relative' },
            FronteggApp.React.createElement(RegiterQuickLoginCard, { showCard: !!user, shouldRunAnimations: shouldRunAnimations }, component),
            FronteggApp.React.createElement(PopupMainCard, { showCard: !user, shouldRunAnimations: shouldRunAnimations }, mainCard)),
        FronteggApp.React.createElement(formik_esm.Box, { onClick: handleBackToLogin, height: '2.5rem' },
            FronteggApp.React.createElement(BackToLoginMessage$1, { variant: 'body1' }, t('backToLogin'))));
};

const MFARecoveryCodeStepForm = () => {
    const t = useT('recoveryMfa');
    const { recoveryCode } = formik_esm.useMfaState(({ recoveryCode }) => ({ recoveryCode }));
    return (FronteggApp.React.createElement(FronteggApp.React.Fragment, null,
        FronteggApp.React.createElement(formik_esm.Box, { mb: 4 },
            FronteggApp.React.createElement(formik_esm.InputCopy$1, { label: t('recoveryCodeLabel'), value: recoveryCode })),
        FronteggApp.React.createElement(formik_esm.Box, { mb: 4 },
            FronteggApp.React.createElement(formik_esm.Alert$1, { color: "warning" },
                FronteggApp.React.createElement(formik_esm.Typography$1, { variant: "subtitle2" }, t('copyAndSaveCode'))))));
};
const MFARecoveryCodeStep = () => {
    const t = useT('recoveryMfa');
    const { step } = formik_esm.useMfaState(({ step }) => ({ step }));
    const { setState } = formik_esm.useAuthActions();
    const onRedirectTo = formik_esm.useOnRedirectTo();
    const routes = formik_esm.useAuthRoutes();
    const loginState = formik_esm.useLoginState();
    const handleContinue = FronteggApp.react.exports.useCallback(() => {
        setState({ isAuthenticated: true, loginState: Object.assign(Object.assign({}, loginState), { step: reduxStore.LoginStep.success }) });
        if (loginState.flow === reduxStore.LoginFlow.Login) {
            const { loginUrl, logoutUrl, socialLoginCallbackUrl, activateUrl } = routes;
            let authenticatedUrl = routes.authenticatedUrl;
            const afterAuthRedirect = window.localStorage.getItem('FRONTEGG_AFTER_AUTH_REDIRECT_URL');
            if (afterAuthRedirect && ![loginUrl, logoutUrl, socialLoginCallbackUrl, activateUrl].includes(afterAuthRedirect)) {
                authenticatedUrl = afterAuthRedirect;
            }
            window.localStorage.removeItem('FRONTEGG_AFTER_AUTH_REDIRECT_URL');
            const url = new URL(window === null || window === void 0 ? void 0 : window.location.href);
            const redirectUrl = url.searchParams.get('redirectUrl') || authenticatedUrl;
            onRedirectTo(redirectUrl, { refresh: redirectUrl.startsWith('http') });
        }
    }, [setState, onRedirectTo, routes, loginState]);
    if (step !== reduxStore.MFAStep.recoveryCode) {
        return null;
    }
    return (FronteggApp.React.createElement(BoxElement$1, null,
        FronteggApp.React.createElement(formik_esm.Typography$1, { variant: "subtitle1", mb: 2 }, t('title')),
        FronteggApp.React.createElement(MFARecoveryCodeStepForm, null),
        FronteggApp.React.createElement(formik_esm.Box, { textAlign: 'right' },
            FronteggApp.React.createElement(formik_esm.Button$1, { "data-test-id": "continueBtn", className: 'fe-primary-btn', color: "primary", onClick: handleContinue }, t('continueButton')))));
};

const ONE_DAY_IN_SECONDS = 60 * 60 * 24;
var MFAStep;
(function (MFAStep) {
    MFAStep["verify"] = "verify";
    MFAStep["recoveryCode"] = "recoveryCode";
})(MFAStep || (MFAStep = {}));
const GoogleAuthenticatorLink = FronteggApp.react.exports.memo(() => {
    return (FronteggApp.React.createElement(formik_esm.Link, { href: "https://www.google.com/search?q=google+authenticator", target: "_blank" }, "Google Authenticator"));
});
const MFAVerifyStepForm = () => {
    const t = useT('login');
    const { loading, qrCode, error: stateError } = formik_esm.useMfaState();
    const { enrollMfa } = formik_esm.useMfaActions();
    const [tokenFieldProps, { error: tokenError }] = formik_esm.useField('token');
    const [rememberDeviceFieldProps] = formik_esm.useField('rememberDevice');
    const { allowRememberMfaDevice, mfaDeviceExpiration } = formik_esm.useLoginState();
    FronteggApp.react.exports.useEffect(() => {
        if (!qrCode) {
            enrollMfa();
        }
    }, [qrCode, enrollMfa]);
    return (FronteggApp.React.createElement(FronteggApp.React.Fragment, null,
        FronteggApp.React.createElement(formik_esm.Typography$1, { variant: "body1" },
            t('forceMfaScanQueryDescription1'),
            " ",
            FronteggApp.React.createElement(GoogleAuthenticatorLink, null),
            " ",
            t('forceMfaScanQueryDescription2')),
        FronteggApp.React.createElement(formik_esm.Box, { margin: "2rem auto", textAlign: 'center' }, loading && !qrCode ? FronteggApp.React.createElement(formik_esm.Loader$1, { center: true }) : FronteggApp.React.createElement("img", { alt: "Multi-factor QR", src: qrCode !== null && qrCode !== void 0 ? qrCode : '' })),
        FronteggApp.React.createElement(formik_esm.Input$1, Object.assign({ "data-test-id": "6DigitsBox" }, tokenFieldProps, { autoFocus: true, inputMode: "numeric", label: t('mfaInputLabel'), error: !!tokenError || !!stateError, errorMessage: tokenError || stateError, autoComplete: "one-time-code", placeholder: t('forceMfaInputPlaceholder') })),
        allowRememberMfaDevice && mfaDeviceExpiration && (FronteggApp.React.createElement(formik_esm.FormControlLabel, { "data-test-id": "forceMfaRememberThisDevice", sx: { pl: 0, pb: 4, pt: 4 }, control: FronteggApp.React.createElement(formik_esm.Checkbox$1, Object.assign({}, rememberDeviceFieldProps, { size: "small" })), label: (FronteggApp.React.createElement(formik_esm.Typography$1, { variant: "body1" }, t('forceMfaRememberThisDevice', { count: Math.floor(mfaDeviceExpiration / ONE_DAY_IN_SECONDS) }))) }))));
};
const ForceEnrollMfa = () => {
    const t = useT('login');
    const { step, loading, recoveryCode, mfaToken } = formik_esm.useMfaState();
    const { setMfaState, verifyMfaAfterForce } = formik_esm.useMfaActions();
    const recoveryCodeRef = FronteggApp.react.exports.useRef('');
    FronteggApp.react.exports.useEffect(() => {
        recoveryCodeRef.current = recoveryCode !== null && recoveryCode !== void 0 ? recoveryCode : '';
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    if (step === MFAStep.recoveryCode) {
        return FronteggApp.React.createElement(MFARecoveryCodeStep, null);
    }
    return (FronteggApp.React.createElement(BoxElement$1, null,
        FronteggApp.React.createElement(FromWrapper, { validationSchema: formik_esm.validateSchema({
                token: formik_esm.validateTwoFactorCode(t('mfaCodeLengthAtLeast6'), t('mfaCodeIsRequired')),
            }), initialValues: { token: '', rememberDevice: false }, onSubmit: ({ token, rememberDevice }, { setSubmitting }) => FronteggApp.__awaiter(void 0, void 0, void 0, function* () {
                verifyMfaAfterForce({
                    mfaToken: mfaToken || '',
                    value: token,
                    rememberDevice,
                    callback: (success) => {
                        if (success) {
                            setMfaState({ recoveryCode });
                        }
                        setSubmitting(false);
                    },
                });
            }) }, ({ isValid, dirty }) => {
            return (FronteggApp.React.createElement(formik_esm.Box, null,
                FronteggApp.React.createElement(formik_esm.Typography$1, { variant: "subtitle1", mb: 4 }, t('forceMfaMessage')),
                FronteggApp.React.createElement(MFAVerifyStepForm, null),
                FronteggApp.React.createElement(formik_esm.Box, { className: "fe-dialog__footer" },
                    FronteggApp.React.createElement(formik_esm.Grid, { container: true },
                        FronteggApp.React.createElement(formik_esm.Grid, { xs: true, item: true, className: "fe-text-align-end" },
                            FronteggApp.React.createElement(formik_esm.Button$1, { className: 'fe-primary-btn', disabled: !isValid || !dirty, type: "submit", size: "large", fullWidth: true, color: "primary", loading: loading, "data-test-id": "sumbit-btn" }, t('forceMfaVerifyButton')))))));
        })));
};

const LoginContainer = loginStyler(formik_esm.Box)(({ theme }) => (Object.assign({}, theme.containerStyle)));
const loginCarouselSteps = [
    reduxStore.LoginStep.preLogin,
    reduxStore.LoginStep.loginWithPassword,
];
const LoginPage$1 = () => {
    const t = useT('login');
    const { isLoading, isAuthenticated, user } = formik_esm.useAuth(({ isLoading, isAuthenticated, user }) => ({ isLoading, isAuthenticated, user }));
    const { flow, step, inviteTokenError, quickLoginToRegister } = formik_esm.useLoginState();
    const { resetLoginState } = formik_esm.useLoginActions();
    const { authOptions: { includeQueryParam } = {} } = formik_esm.useShadowDom();
    const onRedirectTo = formik_esm.useOnRedirectTo();
    const routes = formik_esm.useAuthRoutes();
    FronteggApp.react.exports.useEffect(() => {
        // only after first mount and redirected by saga
        const timeout = setTimeout(() => {
            var _a;
            if (!isLoading && isAuthenticated && window.location.pathname.endsWith(routes.loginUrl) && flow === reduxStore.LoginFlow.Login) {
                const url = new URL(window.location.href);
                let redirectUrl = routes.authenticatedUrl;
                if (url.searchParams.get('redirectUrl')) {
                    redirectUrl = (_a = url.searchParams.get('redirectUrl')) !== null && _a !== void 0 ? _a : routes.authenticatedUrl;
                }
                else if (includeQueryParam) {
                    redirectUrl += window.location.search;
                }
                onRedirectTo(redirectUrl, { refresh: redirectUrl.startsWith('http') });
            }
        }, 1000);
        return () => clearTimeout(timeout);
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    const { components } = FronteggApp.react.exports.useMemo(() => {
        let components;
        if (inviteTokenError) {
            components = FronteggApp.React.createElement(TenantInvitationFailed, { variant: 'login', t: t });
        }
        else if (step === reduxStore.LoginStep.forceTwoFactor) {
            components = FronteggApp.React.createElement(ForceEnrollMfa, null);
        }
        else if (flow === reduxStore.LoginFlow.Login) {
            if (loginCarouselSteps.includes(step)) {
                components = FronteggApp.React.createElement(LoginCarousel, null);
            }
            else {
                components = getLoginComponentByStep(step);
            }
        }
        else if (flow === reduxStore.LoginFlow.RegisterQuickLogin && quickLoginToRegister) {
            components = FronteggApp.React.createElement(RegisterQuickLogin, { loginStrategyId: quickLoginToRegister });
        }
        return { components };
    }, [flow, step, quickLoginToRegister, inviteTokenError, resetLoginState, user]);
    const { signupMessagePlacement, disclaimer } = formik_esm.useTheme$1();
    if ((isLoading || isAuthenticated) && flow === reduxStore.LoginFlow.Login) {
        return FronteggApp.React.createElement(PageLoader, null);
    }
    return (FronteggApp.React.createElement(RecaptchaProvider, { action: 'login' },
        signupMessagePlacement === 'page' && FronteggApp.React.createElement(SignUpMessage, null),
        FronteggApp.React.createElement(LoginContainer, null, components),
        (disclaimer === null || disclaimer === void 0 ? void 0 : disclaimer.placement) === 'page' && FronteggApp.React.createElement(DisclaimerInfo, null)));
};

const LoginPage = wrapPageWithoutBox(LoginPage$1, 'login');

const acceptInvitationStyler = formik_esm.createStyled();

const AcceptInvitationSuccessContainer = acceptInvitationStyler(formik_esm.Box)(({ theme }) => (Object.assign({}, theme.successContainerStyle)));
const AcceptInvitationSuccess = () => {
    const t = useT('acceptInvitation');
    const { loginUrl } = formik_esm.useAuthRoutes();
    const onRedirectTo = formik_esm.useOnRedirectTo();
    FronteggApp.react.exports.useEffect(() => {
        setTimeout(() => {
            onRedirectTo(loginUrl);
        }, 3000);
    }, [loginUrl, onRedirectTo]);
    return (FronteggApp.React.createElement(AcceptInvitationSuccessContainer, null,
        FronteggApp.React.createElement(formik_esm.LoginMessage, { title: t('successTitle'), description: t(`successMessage`), iconKey: 'joinTeam', testId: 'accept-invitation-success' })));
};

const AcceptInvitationFailedContainer = acceptInvitationStyler(formik_esm.Box)(({ theme }) => (Object.assign({}, theme.failedContainerStyle)));
const AcceptInvitationFailed = () => {
    const t = useT('acceptInvitation');
    const onRedirectTo = formik_esm.useOnRedirectTo();
    const { loginUrl } = formik_esm.useAuthRoutes();
    const backToLogin = FronteggApp.react.exports.useCallback(() => onRedirectTo(loginUrl), [loginUrl]);
    return (FronteggApp.React.createElement(AcceptInvitationFailedContainer, null,
        FronteggApp.React.createElement(formik_esm.LoginMessage, { title: t('invalidTitle'), description: t('invalidMessage'), testId: 'accept-invitation-failed' },
            FronteggApp.React.createElement(BackToLoginMessage$1, { sx: { mt: 8 }, className: 'fe-back-to-login-btn', "data-test-id": 'loginBack-btn', onClick: backToLogin }, t('invalidBackToLoginButton')))));
};

const AcceptInvitationContainer = acceptInvitationStyler(formik_esm.Box)(({ theme }) => (Object.assign({}, theme.containerStyle)));
const AcceptInvitationPage$1 = () => {
    const { acceptInvitation } = formik_esm.useAcceptInvitationActions();
    const { step } = formik_esm.useAcceptInvitationState();
    const url = new URL(window === null || window === void 0 ? void 0 : window.location.href);
    const userId = url.searchParams.get('userId') || '';
    const token = url.searchParams.get('token') || '';
    FronteggApp.react.exports.useEffect(() => {
        acceptInvitation({ token, userId });
    }, [acceptInvitation, token, userId]);
    let components;
    switch (step) {
        case reduxStore.AcceptInvitationStep.invalid:
            components = FronteggApp.React.createElement(AcceptInvitationFailed, null);
            break;
        case reduxStore.AcceptInvitationStep.pending:
            components = FronteggApp.React.createElement(LargeLoader, null);
            break;
        case reduxStore.AcceptInvitationStep.success:
            components = FronteggApp.React.createElement(AcceptInvitationSuccess, null);
            break;
        case reduxStore.AcceptInvitationStep.failed:
            components = FronteggApp.React.createElement(AcceptInvitationFailed, null);
            break;
        default:
            return null;
    }
    return FronteggApp.React.createElement(AcceptInvitationContainer, null, components);
};

const AcceptInvitationPage = wrapPage(AcceptInvitationPage$1, 'acceptInvitation');

const activateAccountStyler = formik_esm.createStyled();
const ActivateAccountPageTitle = BoxTitle;

const ActivateAccountFormContainer = activateAccountStyler(formik_esm.Box)(({ theme }) => (Object.assign({}, theme.formContainerStyle)));
const PasswordField$2 = () => {
    const t = useT('activateAccount');
    const [fieldProps, { error, touched }] = formik_esm.useField('password');
    return FronteggApp.React.createElement(formik_esm.InputPassword$1, Object.assign({}, fieldProps, { error: !!error && touched, autoFocus: true, type: "password", name: "password", label: t('newPasswordInputLabel'), placeholder: t('newPasswordInputPlaceholder'), "data-test-id": "password-box" }));
};
const ConfirmPasswordField$1 = () => {
    const t = useT('activateAccount');
    const [fieldProps, { error, touched }] = formik_esm.useField('confirmPassword');
    return FronteggApp.React.createElement(formik_esm.InputPassword$1, Object.assign({}, fieldProps, { error: !!error && touched, errorMessage: error, type: "password", name: "confirmPassword", label: t('confirmPasswordInputLabel'), placeholder: t('confirmPasswordInputPlaceholder'), "data-test-id": "confirmPassword-box" }));
};
const PasswordStrength$1 = (props) => {
    const [{ value }] = formik_esm.useField('password');
    const t = useGlobalT();
    return FronteggApp.React.createElement(formik_esm.PasswordStrengthChecker, Object.assign({ t: t, value: value, isTouched: value !== '' }, props));
};
const ActivateAccountForm = (props) => {
    var _a, _b;
    const { userId, token } = props;
    const t = useT('activateAccount');
    const { activateAccount } = formik_esm.useAuthActions();
    const { loading: activateStateLoading, error } = formik_esm.useActivateAccountState();
    const { loading: passwordConfigLoading, passwordConfig } = usePasswordConfig(props.userId);
    const recaptcha = useRecaptcha({ action: 'activate_account' });
    const { socialLogins } = formik_esm.useTheme();
    const socialLoginsLayout = (_b = (_a = socialLogins === null || socialLogins === void 0 ? void 0 : socialLogins.socialLoginsLayout) === null || _a === void 0 ? void 0 : _a.placement) !== null && _b !== void 0 ? _b : SocialLoginLocation.BOTTOM;
    const [hideRecaptcha] = useHideRecaptcha();
    const { events } = formik_esm.useShadowDom();
    const initialValues = FronteggApp.react.exports.useMemo(() => ({ password: '', confirmPassword: '', token, userId, recaptchaToken: '' }), [token, userId]);
    const validationSchema = FronteggApp.react.exports.useMemo(() => formik_esm.validateSchema({
        password: formik_esm.validatePasswordUsingOWASP(t('newPasswordIsRequired')),
        confirmPassword: formik_esm.validateConfirmPassword(t('confirmPasswordIsRequired'), t('confirmPasswordMustMatch')),
    }), [passwordConfig, t]);
    const formikProps = {
        onSubmit: ({ password }) => new Promise((resolve, reject) => {
            const recaptchaElement = document.getElementsByClassName('grecaptcha-badge')[0];
            const callback = () => hideRecaptcha(recaptchaElement);
            activateAccount({ password, token, userId, recaptchaToken: recaptcha === null || recaptcha === void 0 ? void 0 : recaptcha.token, callback, events });
            resolve();
        }),
        initialValues,
        validationSchema,
    };
    return FronteggApp.React.createElement(ActivateAccountFormContainer, null,
        FronteggApp.React.createElement(ActivateAccountPageTitle, { componentKey: "title", title: t('title') }),
        socialLoginsLayout === SocialLoginLocation.TOP && FronteggApp.React.createElement(SocialLoginsActivation, { dividerText: 'Or activate with' }),
        FronteggApp.React.createElement(FromWrapper, Object.assign({}, formikProps), ({ isValid }) => {
            return FronteggApp.React.createElement(FronteggApp.React.Fragment, null,
                FronteggApp.React.createElement(PasswordField$2, null),
                FronteggApp.React.createElement(PasswordStrength$1, { passwordConfig: passwordConfig, loading: passwordConfigLoading || !passwordConfig }),
                FronteggApp.React.createElement(ConfirmPasswordField$1, null),
                error && FronteggApp.React.createElement(LoginErrorMessage, null, error),
                FronteggApp.React.createElement(formik_esm.Button$1, { sx: { mt: 4 }, className: 'fe-primary-btn', disabled: passwordConfigLoading || !isValid, fullWidth: true, color: "primary", loading: activateStateLoading, "data-test-id": "activate-btn" }, t('activateButton')), recaptcha === null || recaptcha === void 0 ? void 0 :
                recaptcha.component);
        }),
        socialLoginsLayout === SocialLoginLocation.BOTTOM && FronteggApp.React.createElement(SocialLoginsActivation, { dividerText: 'Or activate with' }));
};

const ActivateAccountSuccessContainer = activateAccountStyler(formik_esm.Box)(({ theme }) => (Object.assign({}, theme.successContainerStyle)));
const ActivateAccountSuccess = () => {
    const t = useT('activateAccount');
    return (FronteggApp.React.createElement(ActivateAccountSuccessContainer, null,
        FronteggApp.React.createElement(formik_esm.LoginMessage, { title: t('successTitle'), description: t(`successMessage`), iconKey: 'check', testId: 'activate-success' })));
};

const ActivateAccountFailedContainer = activateAccountStyler(formik_esm.Box)(({ theme }) => (Object.assign({}, theme.failedContainerStyle)));
const ActivateAccountFailed = ({ title, description, testId }) => {
    const t = useT('activateAccount');
    const { resetActivateState, resetLoginState, resetMfaState } = formik_esm.useAuthActions();
    const routes = formik_esm.useAuthRoutes();
    const onRedirectTo = formik_esm.useOnRedirectTo();
    return (FronteggApp.React.createElement(ActivateAccountFailedContainer, null,
        FronteggApp.React.createElement(formik_esm.LoginMessage, { title: t(title), description: t(description), testId: testId },
            FronteggApp.React.createElement(BackToLoginMessage$1, { sx: { mt: 8 }, className: 'fe-back-to-login-btn', onClick: () => {
                    resetActivateState();
                    resetLoginState();
                    resetMfaState();
                    onRedirectTo(routes.loginUrl);
                } }, t('failedBackToLoginButton')))));
};

var activationLinkErrorType;
(function (activationLinkErrorType) {
    activationLinkErrorType["INVALID"] = "invalid";
    activationLinkErrorType["EXPIRED"] = "expired";
})(activationLinkErrorType || (activationLinkErrorType = {}));
const linkErrorTypeToText = {
    [activationLinkErrorType.INVALID]: { title: 'linkFailedTitle', description: 'linkFailedMessage', testId: 'activate-failed' },
    [activationLinkErrorType.EXPIRED]: { title: 'linkExpiredTitle', description: 'linkExpiredMessage', testId: 'activate-expired' },
};

const ActivateAccountContainer = activateAccountStyler(formik_esm.Box)(({ theme }) => (Object.assign({}, theme.containerStyle)));
const ActivateAccountPage$1 = () => {
    const { isLoading } = formik_esm.useAuth(({ isLoading }) => ({ isLoading }));
    const { step, error } = formik_esm.useActivateAccountState();
    const { activateAccount } = formik_esm.useActivateAccountActions();
    const { preActivateAccount } = formik_esm.useActivateAccountActions();
    const { builderMode } = formik_esm.useShadowDom();
    const { captchaPolicy } = formik_esm.useSecurityPolicyState();
    const { activationStrategy: { strategy } } = formik_esm.useActivateAccountState();
    const recaptcha = useRecaptcha({ action: 'activate_account' });
    const url = new URL(window === null || window === void 0 ? void 0 : window.location.href);
    const userId = url.searchParams.get('userId') || (builderMode ? 'demo-user-id' : '');
    const token = url.searchParams.get('token') || (builderMode ? 'demo-token-id' : '');
    const { events } = formik_esm.useShadowDom();
    const isCaptchaLoading = FronteggApp.react.exports.useMemo(() => {
        if (captchaPolicy.loading) {
            return true;
        }
        if (captchaPolicy.policy && !captchaPolicy.policy.enabled) {
            return false;
        }
        return !(recaptcha === null || recaptcha === void 0 ? void 0 : recaptcha.token.length);
    }, [captchaPolicy, recaptcha]);
    FronteggApp.react.exports.useEffect(() => {
        if (!!error || invalidUrlParams) {
            return;
        }
        if (strategy && !strategy.shouldSetPassword && !isCaptchaLoading) {
            activateAccount({ userId, token, recaptchaToken: recaptcha === null || recaptcha === void 0 ? void 0 : recaptcha.token, events });
        }
    }, [activateAccount, captchaPolicy, recaptcha, strategy]);
    FronteggApp.react.exports.useEffect(() => {
        preActivateAccount({ userId, token });
    }, [preActivateAccount]);
    const invalidUrlParams = FronteggApp.react.exports.useMemo(() => !userId || !token, [userId, token]);
    let components;
    if (invalidUrlParams || !!error) {
        components =
            FronteggApp.React.createElement(ActivateAccountFailed, Object.assign({}, linkErrorTypeToText[invalidUrlParams ? activationLinkErrorType.INVALID : activationLinkErrorType.EXPIRED]));
    }
    else if (step === reduxStore.ActivateAccountStep.activating || isLoading) {
        components = FronteggApp.React.createElement(FronteggApp.React.Fragment, null, recaptcha === null || recaptcha === void 0 ? void 0 :
            recaptcha.component,
            FronteggApp.React.createElement(PageLoader, null));
    }
    else if (step === reduxStore.ActivateAccountStep.success) {
        components = FronteggApp.React.createElement(ActivateAccountSuccess, null);
    }
    else if (step === reduxStore.ActivateAccountStep.activatingForm) {
        components = FronteggApp.React.createElement(ActivateAccountForm, { userId: userId, token: token });
    }
    else {
        components = FronteggApp.React.createElement(FronteggApp.React.Fragment, null, recaptcha === null || recaptcha === void 0 ? void 0 :
            recaptcha.component,
            FronteggApp.React.createElement(PageLoader, null));
    }
    return FronteggApp.React.createElement(ActivateAccountContainer, null, components);
};

const ActivateAccountPage = wrapPage(ActivateAccountPage$1, 'activateAccount');

const forgotPasswordStyler = formik_esm.createStyled();
const ForgotPasswordPageTitle = BoxTitle;
const ForgotPasswordPageMessage = BoxMessage;

const ForgotPasswordFormContainer = forgotPasswordStyler(formik_esm.Box)(({ theme }) => (Object.assign({}, theme.formContainerStyle)));
const EmailField$2 = () => {
    const t = useT('forgetPassword');
    const [fieldProps, { error, touched }] = formik_esm.useField('email');
    return FronteggApp.React.createElement(formik_esm.Input$1, Object.assign({}, fieldProps, { error: !!error && touched, errorMessage: error, name: "email", placeholder: t('emailInputPlaceholder'), label: t('emailInputLabel'), "data-test-id": "email-box" }));
};
const ForgotPasswordForm = () => {
    const t = useT('forgetPassword');
    const { loading, email = '', error } = formik_esm.useForgotPasswordState();
    const { forgotPassword, setForgotPasswordState } = formik_esm.useForgotPasswordActions();
    const onRedirectTo = formik_esm.useOnRedirectTo();
    const { loginUrl } = formik_esm.useAuthRoutes();
    const handleBackToLogin = FronteggApp.react.exports.useCallback(() => {
        onRedirectTo(loginUrl);
    }, [loginUrl, onRedirectTo]);
    const initialValues = FronteggApp.react.exports.useMemo(() => ({ email }), [email]);
    const validationSchema = FronteggApp.react.exports.useMemo(() => formik_esm.validateSchema({
        email: formik_esm.validateEmail(t('emailMustBeValid'), t('emailIsRequired')),
    }), [t]);
    const formikProps = {
        onSubmit: ({ email }) => new Promise((resolve) => {
            setForgotPasswordState({ email });
            forgotPassword({ email });
            resolve();
        }),
        initialValues,
        validationSchema,
    };
    return FronteggApp.React.createElement(ForgotPasswordFormContainer, { "data-test-id": "forgot-password-form" },
        FronteggApp.React.createElement(ForgotPasswordPageTitle, { componentKey: "title", title: t('title') }),
        FronteggApp.React.createElement(ForgotPasswordPageMessage, { componentKey: "message", message: t('description') }),
        FronteggApp.React.createElement(FromWrapper, Object.assign({}, formikProps), ({ isValid }) => {
            return FronteggApp.React.createElement(FronteggApp.React.Fragment, null,
                FronteggApp.React.createElement(EmailField$2, null),
                FronteggApp.React.createElement(formik_esm.Box, { height: "1px", mb: 4 }),
                error && FronteggApp.React.createElement(LoginErrorMessage, { "data-test-id": "forgot-password-form-error" }, error),
                FronteggApp.React.createElement(formik_esm.Button$1, { className: 'fe-primary-btn', disabled: loading || !isValid, fullWidth: true, color: "primary", loading: loading, "data-test-id": "submit-btn" }, t('submitButtonText')),
                FronteggApp.React.createElement(formik_esm.Box, { height: "1px", mb: 4 }),
                FronteggApp.React.createElement(formik_esm.Box, { textAlign: "center" },
                    FronteggApp.React.createElement(BackToLoginMessage$1, { sx: { mt: 8 }, "data-test-id": "back-to-login-btn", onClick: handleBackToLogin }, t('backToLogin'))));
        }));
};

const ForgotPasswordSuccessContainer = forgotPasswordStyler(formik_esm.Box)(({ theme }) => (Object.assign({}, theme.successContainerStyle)));
const ForgotPasswordSuccess = () => {
    const t = useT('forgetPassword');
    const onRedirectTo = formik_esm.useOnRedirectTo();
    const { loginUrl } = formik_esm.useAuthRoutes();
    const { email } = formik_esm.useForgotPasswordState();
    const { resetForgotPasswordState } = formik_esm.useForgotPasswordActions();
    return (FronteggApp.React.createElement(ForgotPasswordSuccessContainer, null,
        FronteggApp.React.createElement(formik_esm.LoginMessage, { title: t('resetEmailSentTitle'), description: t(`resetEmailSentMessage`, { email }), iconKey: 'check', testId: 'forgot-password-success' },
            FronteggApp.React.createElement(BackToLoginMessage$1, { sx: { mt: 8 }, "data-test-id": 'back-to-login-btn', className: 'fe-back-to-login-btn', onClick: () => {
                    resetForgotPasswordState();
                    onRedirectTo(loginUrl);
                } }, t('backToLogin')))));
};

const ForgotPasswordContainer = forgotPasswordStyler(formik_esm.Box)(({ theme }) => (Object.assign({}, theme.containerStyle)));
const ForgotPasswordPage$1 = () => {
    const { step } = formik_esm.useForgotPasswordState();
    let components;
    if (step === reduxStore.ForgotPasswordStep.success) {
        components = FronteggApp.React.createElement(ForgotPasswordSuccess, null);
    }
    else {
        components = FronteggApp.React.createElement(ForgotPasswordForm, null);
    }
    return FronteggApp.React.createElement(ForgotPasswordContainer, null, components);
};

const ForgotPasswordPage = wrapPage(ForgotPasswordPage$1, 'forgotPassword');

const ResetPasswordFailed = () => {
    const t = useT('resetPassword');
    const { loginUrl } = formik_esm.useAuthRoutes();
    const onRedirectTo = formik_esm.useOnRedirectTo();
    const { resetForgotPasswordState } = formik_esm.useAuthActions();
    return (FronteggApp.React.createElement(FronteggApp.React.Fragment, null,
        FronteggApp.React.createElement(formik_esm.LoginMessage, { title: t('failedTitle'), description: t('failedMessage'), testId: "reset-password-failed" },
            FronteggApp.React.createElement(BackToLoginMessage$1, { sx: { mt: 8 }, className: 'fe-back-to-login-btn', "data-test-id": 'redirect-to-login', onClick: () => {
                    resetForgotPasswordState();
                    onRedirectTo(loginUrl);
                } }, t('failedBackToLoginButton')))));
};

const ResetPasswordSuccess = (props) => {
    const t = useT('resetPassword');
    const { resetForgotPasswordState } = formik_esm.useAuth();
    const routes = formik_esm.useAuthRoutes();
    const onRedirectTo = formik_esm.useOnRedirectTo();
    FronteggApp.react.exports.useEffect(() => {
        setTimeout(() => {
            onRedirectTo(routes.loginUrl);
        }, 1000);
        return resetForgotPasswordState;
    }, [onRedirectTo, resetForgotPasswordState, routes.loginUrl]);
    return (FronteggApp.React.createElement(FronteggApp.React.Fragment, null,
        FronteggApp.React.createElement(formik_esm.LoginMessage, { title: t('successTitle'), description: t('successMessage'), iconKey: 'check', testId: 'reset-password-success' })));
};

const resetPasswordStyler = formik_esm.createStyled();
const ResetPasswordPageTitle = BoxTitle;

const PasswordField$1 = () => {
    const t = useT('resetPassword');
    const [fieldProps, { error, touched }] = formik_esm.useField('password');
    return FronteggApp.React.createElement(formik_esm.InputPassword$1, Object.assign({}, fieldProps, { error: !!error && touched, errorMessage: error, autoFocus: true, type: "password", name: "password", label: t('newPasswordInputLabel'), placeholder: t('newPasswordInputPlaceholder'), "data-test-id": "password-box" }));
};
const ConfirmPasswordField = () => {
    const t = useT('resetPassword');
    const [fieldProps, { error, touched }] = formik_esm.useField('confirmPassword');
    return FronteggApp.React.createElement(formik_esm.InputPassword$1, Object.assign({}, fieldProps, { error: !!error && touched, errorMessage: error, type: "password", name: "confirmPassword", label: t('confirmPasswordInputLabel'), placeholder: t('confirmPasswordInputPlaceholder'), "data-test-id": "repeat-password-box" }));
};
const PasswordStrength = (props) => {
    const [{ value }] = formik_esm.useField('password');
    const t = useGlobalT();
    return FronteggApp.React.createElement(formik_esm.PasswordStrengthChecker, Object.assign({ t: t, value: value, isTouched: value !== '' }, props));
};
const ResetPasswordForm = ({ token, userId }) => {
    const t = useT('resetPassword');
    const globalT = useGlobalT();
    const { error } = formik_esm.useForgotPasswordState();
    const { loading, passwordConfig } = usePasswordConfig();
    const { resetPassword } = formik_esm.useForgotPasswordActions();
    const { loadVendorPasswordConfig } = formik_esm.useSecurityPolicyActions();
    const { passwordPolicy } = formik_esm.useSecurityPolicyState();
    formik_esm.Owasp.setConfig(passwordPolicy.policy, globalT);
    FronteggApp.react.exports.useEffect(() => {
        !passwordPolicy && loadVendorPasswordConfig();
    }, [passwordPolicy, loadVendorPasswordConfig]);
    const initialValues = FronteggApp.react.exports.useMemo(() => ({ password: '', confirmPassword: '', token, userId }), [token, userId]);
    const validationSchema = FronteggApp.react.exports.useMemo(() => formik_esm.validateSchema({
        password: formik_esm.validatePasswordUsingOWASP(t('newPasswordIsRequired')),
        confirmPassword: formik_esm.validateConfirmPassword(t('confirmPasswordIsRequired'), t('confirmPasswordMustMatch')),
    }), [t, passwordConfig]);
    const formikProps = {
        onSubmit: ({ password }) => new Promise((resolve, reject) => {
            const callback = formik_esm.callbackToPromise(resolve, reject);
            resetPassword({ password, token, userId, callback });
        }),
        initialValues,
        validationSchema,
    };
    return FronteggApp.React.createElement(FronteggApp.React.Fragment, null,
        FronteggApp.React.createElement(ResetPasswordPageTitle, { componentKey: "title", title: t('title') }),
        FronteggApp.React.createElement(FromWrapper, Object.assign({}, formikProps), ({ isValid }) => {
            return FronteggApp.React.createElement(FronteggApp.React.Fragment, null,
                FronteggApp.React.createElement(PasswordField$1, null),
                FronteggApp.React.createElement(PasswordStrength, { passwordConfig: passwordConfig, loading: loading || !passwordConfig }),
                FronteggApp.React.createElement(ConfirmPasswordField, null),
                error && FronteggApp.React.createElement(LoginErrorMessage, { "data-test-id": "reset-password-form_error" }, error),
                FronteggApp.React.createElement(formik_esm.Button$1, { sx: { mt: 4 }, className: 'fe-primary-btn', disabled: loading || !isValid, fullWidth: true, color: "primary", loading: loading, "data-test-id": "submit-btn" }, t('resetPasswordButton')));
        }));
};

const ResetPasswordContainer = resetPasswordStyler(formik_esm.Box)(({ theme }) => (Object.assign({}, theme.containerStyle)));
const ResetPasswordPage$1 = () => {
    const { step } = formik_esm.useForgotPasswordState();
    const { builderMode } = formik_esm.useShadowDom();
    const { loadPasswordConfig, resetForgotPasswordState } = formik_esm.useForgotPasswordActions();
    const url = new URL(window === null || window === void 0 ? void 0 : window.location.href);
    const userId = url.searchParams.get('userId') || (builderMode ? 'demo-user-id' : '');
    const token = url.searchParams.get('token') || (builderMode ? 'demo-token-id' : '');
    FronteggApp.react.exports.useEffect(() => {
        loadPasswordConfig({ userId });
        return resetForgotPasswordState;
    }, [loadPasswordConfig, resetForgotPasswordState]);
    let components;
    if (!userId || !token) {
        components = FronteggApp.React.createElement(ResetPasswordFailed, null);
    }
    else if (step === reduxStore.ForgotPasswordStep.success) {
        components = FronteggApp.React.createElement(ResetPasswordSuccess, null);
    }
    else {
        components = FronteggApp.React.createElement(ResetPasswordForm, { userId: userId, token: token });
    }
    return FronteggApp.React.createElement(ResetPasswordContainer, null, components);
};

const ResetPasswordPage = wrapPage(ResetPasswordPage$1, 'resetPassword');

const OidcLoginSuccess$1 = () => {
    const onRedirectTo = formik_esm.useOnRedirectTo();
    const ssoState = formik_esm.useSSOState();
    const routes = formik_esm.useAuthRoutes();
    const { isLoading, isAuthenticated } = formik_esm.useAuth(({ isLoading, isAuthenticated }) => ({ isLoading, isAuthenticated }));
    const t = useT('login');
    const { setSSOState, oidcPostlogin } = formik_esm.useSSOActions();
    const loadingMode = FronteggApp.react.exports.useMemo(() => !ssoState.error && ssoState.loading, [ssoState.error, ssoState.loading]);
    FronteggApp.react.exports.useEffect(() => {
        const params = new URLSearchParams(window.location.search);
        const state = params.get('state');
        const code = params.get('code');
        const error = t('failedOicdLoginTitle');
        if (!state || !code) {
            setSSOState({ error });
            return;
        }
        try {
            const encodedState = atob(state);
            const encodeStateTenantIdMatch = encodedState.match(/tenantId=([a-zA-Z0-9-]{0,};)/);
            if (!encodeStateTenantIdMatch) {
                setSSOState({ error });
            }
        }
        catch (e) {
            setSSOState({ error });
            return;
        }
        const { origin, pathname } = window.location;
        const redirectUri = `${origin}${pathname}`;
        oidcPostlogin({ code, state, redirectUri });
        // eslint-disable-next-line
    }, []);
    FronteggApp.react.exports.useEffect(() => {
        if (!isLoading && isAuthenticated) {
            let authenticatedUrl = routes.authenticatedUrl;
            const afterAuthRedirect = window.localStorage.getItem('FRONTEGG_AFTER_AUTH_REDIRECT_URL');
            if (afterAuthRedirect) {
                authenticatedUrl = afterAuthRedirect;
            }
            window.localStorage.removeItem('FRONTEGG_AFTER_AUTH_REDIRECT_URL');
            onRedirectTo(authenticatedUrl);
        }
    }, [onRedirectTo, isLoading, isAuthenticated, routes]);
    return loadingMode ? FronteggApp.React.createElement(PageLoader, null) : (FronteggApp.React.createElement(BoxElement$1, { themeOptionKey: 'login' },
        FronteggApp.React.createElement(formik_esm.LoginMessage, { title: t('invalidTitle'), description: ssoState.error },
            FronteggApp.React.createElement(BackToLoginMessage$1, { sx: { mt: 8 }, onClick: () => {
                    onRedirectTo(routes.loginUrl);
                } }, t('failedOicdBackToLogin')))));
};

const OidcLoginSuccess = wrapPageWithoutBox(OidcLoginSuccess$1, 'login');

const LogoutPage$1 = () => {
    const { loginUrl } = formik_esm.useAuthRoutes();
    const { silentLogout } = formik_esm.useLoginActions();
    const { basename = '', urlStrategy } = formik_esm.useShadowDom();
    const calculatedBasename = basename.endsWith('/') ? basename.substring(0, basename.length - 1) : '';
    FronteggApp.react.exports.useEffect(() => {
        localStorage.removeItem('register-quick-login');
        silentLogout(() => {
            const path = calculatedBasename + loginUrl;
            if (urlStrategy === 'path') {
                window.location.href = path;
            }
            else {
                window.location.href = `${window.location.pathname}#${path}`;
            }
        });
    }, [silentLogout]);
    return FronteggApp.React.createElement(PageLoader, null);
};

const LogoutPage = wrapPageContext(LogoutPage$1, 'login');

const MagicLinkCallbackPage$1 = () => {
    const t = useT('login');
    const { invitationToken } = useVerifyInviteToken();
    const { passwordlessPostLogin, resetLoginState, setLoginState } = formik_esm.useLoginActions();
    const { captchaPolicy } = formik_esm.useSecurityPolicyState();
    const { error } = formik_esm.useLoginState();
    const recaptcha = useRecaptcha({ action: 'magic_link_postlogin' });
    const onRedirectTo = formik_esm.useOnRedirectTo();
    const routes = formik_esm.useAuthRoutes();
    const { events } = formik_esm.useShadowDom();
    const token = FronteggApp.react.exports.useMemo(() => new URLSearchParams(window.location.search).get('token'), []);
    const backToLogin = FronteggApp.react.exports.useCallback(() => {
        onRedirectTo(routes.loginUrl);
        resetLoginState();
    }, [onRedirectTo, routes.loginUrl, resetLoginState]);
    FronteggApp.react.exports.useEffect(() => {
        const quickLoginToRegister = localStorage.getItem('register-quick-login');
        if (quickLoginToRegister) {
            setLoginState({ quickLoginToRegister, flow: reduxStore.LoginFlow.RegisterQuickLogin });
            localStorage.removeItem('register-quick-login');
        }
    }, [setLoginState]);
    FronteggApp.react.exports.useEffect(() => {
        var _a;
        if (!captchaPolicy.loading && token && (!((_a = captchaPolicy.policy) === null || _a === void 0 ? void 0 : _a.enabled) || (recaptcha === null || recaptcha === void 0 ? void 0 : recaptcha.token))) {
            passwordlessPostLogin({
                token,
                invitationToken,
                recaptchaToken: recaptcha === null || recaptcha === void 0 ? void 0 : recaptcha.token,
                type: reduxStore.AuthStrategyEnum.MagicLink,
                events
            });
        }
    }, [token, recaptcha === null || recaptcha === void 0 ? void 0 : recaptcha.token, captchaPolicy, passwordlessPostLogin]);
    if (!token || error) {
        return (FronteggApp.React.createElement(PageWrapper$1, null,
            FronteggApp.React.createElement(formik_esm.LoginMessage, { title: t(`invalidMagicLinkTitle`), description: !token ? t('invalidMagicLinkText') : error, testId: 'magic-link-error', iconKey: error === "Magic link has expired" ? 'magicLinkExpired' : 'none' },
                FronteggApp.React.createElement(formik_esm.Link, { sx: { mt: 8 }, "data-test-id": 'back-to-login-btn', className: 'fe-primary-btn', onClick: backToLogin }, t(`backToLogin`)))));
    }
    return (FronteggApp.React.createElement(FronteggApp.React.Fragment, null,
        FronteggApp.React.createElement(PageLoader, null), recaptcha === null || recaptcha === void 0 ? void 0 :
        recaptcha.component));
};

const MagicLinkCallbackPage = wrapPageContext(MagicLinkCallbackPage$1, 'login');

const HostedLoginPage = () => {
    const { handleHostedLoginCallback } = formik_esm.useLoginActions();
    const params = useQueryParams('code', 'state', 'nonce');
    FronteggApp.react.exports.useEffect(() => handleHostedLoginCallback(params), [handleHostedLoginCallback, params]);
    return FronteggApp.React.createElement(PageLoader, null);
};

const SamlLoginSuccess$1 = () => {
    var _a;
    const onRedirectTo = formik_esm.useOnRedirectTo();
    const ssoState = formik_esm.useSSOState();
    const routes = formik_esm.useAuthRoutes();
    const { isLoading, isAuthenticated } = formik_esm.useAuth(({ isLoading, isAuthenticated }) => ({ isLoading, isAuthenticated }));
    const t = useT('login');
    const { setSSOState } = formik_esm.useSSOActions();
    FronteggApp.react.exports.useEffect(() => {
        const params = new URLSearchParams(window.location.search);
        const error = params.get('samlerrors');
        const parsedError = (error === null || error === void 0 ? void 0 : error.includes('|')) ? error.split('|')[0] : error;
        if (parsedError) {
            setSSOState({ error: parsedError });
            return;
        }
    }, [setSSOState]);
    return isLoading || isAuthenticated ? FronteggApp.React.createElement(PageLoader, null) : (FronteggApp.React.createElement(BoxElement$1, { themeOptionKey: 'login' },
        FronteggApp.React.createElement(formik_esm.LoginMessage, { title: t('invalidTitle'), description: (_a = ssoState.error) !== null && _a !== void 0 ? _a : t('failedSamlDefaultError'), testId: 'saml-error' },
            FronteggApp.React.createElement(BackToLoginMessage$1, { sx: { mt: 8 }, "data-test-id": 'redirect-to-login', onClick: () => {
                    onRedirectTo(routes.loginUrl);
                } }, t('failedSamlBackToLogin')))));
};

const SamlLoginSuccess = wrapPageWithoutBox(SamlLoginSuccess$1, 'login');

const signupStyler = formik_esm.createStyled();
const SignupPageTitle = BoxTitle;
const LoginMessageComponent = CustomComponent;

const GoToLoginMessage = ({ t }) => {
    const routes = formik_esm.useAuthRoutes();
    const onRedirectTo = formik_esm.useOnRedirectTo();
    const { resetLoginState } = formik_esm.useLoginActions();
    const redirectToLogin = FronteggApp.react.exports.useCallback(() => {
        resetLoginState();
        onRedirectTo(routes.loginUrl + window.location.search);
    }, [routes.loginUrl, onRedirectTo, resetLoginState]);
    const props = {
        goToLoginMessage: t('loginMessage'),
        goToLoginButtonText: t('loginLink'),
        goToLogin: redirectToLogin,
    };
    return FronteggApp.React.createElement(LoginMessageComponent, Object.assign({ componentKey: 'loginMessage' }, props),
        FronteggApp.React.createElement(LoginSignupSwitch, { variant: 'subtitle1' },
            props.goToLoginMessage,
            " ",
            FronteggApp.React.createElement(formik_esm.Link, { onClick: props.goToLogin, "data-test-id": 'redirect-to-login' }, props.goToLoginButtonText)));
};

const StyledDisclaimerText = signupStyler(formik_esm.Typography$1)(({ theme }) => {
    var _a, _b;
    return (Object.assign(Object.assign({}, (((_a = theme.disclaimer) === null || _a === void 0 ? void 0 : _a.hasCheckbox) ? {}
        : {
            marginTop: '2rem',
            textAlign: 'center',
        })), (_b = theme.disclaimer) === null || _b === void 0 ? void 0 : _b.textStyle));
});
const StyledDisclaimerTermsLink = signupStyler(formik_esm.Link)(({ theme }) => {
    var _a, _b;
    return (Object.assign({}, (_b = (_a = theme.disclaimer) === null || _a === void 0 ? void 0 : _a.terms) === null || _b === void 0 ? void 0 : _b.linkStyle));
});
const StyledDisclaimerPrivacyLink = signupStyler(formik_esm.Link)(({ theme }) => {
    var _a, _b;
    return (Object.assign({}, (_b = (_a = theme.disclaimer) === null || _a === void 0 ? void 0 : _a.privacy) === null || _b === void 0 ? void 0 : _b.linkStyle));
});
const DisclaimerText = ({ isCheckboxLabel = false }) => {
    const { disclaimer } = formik_esm.useTheme();
    const t = useContextT('loginBox.signup');
    const showTerms = FronteggApp.react.exports.useMemo(() => { var _a; return (_a = disclaimer === null || disclaimer === void 0 ? void 0 : disclaimer.terms) === null || _a === void 0 ? void 0 : _a.enabled; }, [disclaimer]);
    const showPrivacy = FronteggApp.react.exports.useMemo(() => { var _a; return (_a = disclaimer === null || disclaimer === void 0 ? void 0 : disclaimer.privacy) === null || _a === void 0 ? void 0 : _a.enabled; }, [disclaimer]);
    if ((!isCheckboxLabel && (disclaimer === null || disclaimer === void 0 ? void 0 : disclaimer.hasCheckbox)) || (!showTerms && !showPrivacy)) {
        return null;
    }
    return (FronteggApp.React.createElement(StyledDisclaimerText, { variant: 'body2', "data-test-id": 'signup-disclaimer-text' },
        isCheckboxLabel ? t('disclaimerCheckboxLabel') : t('disclaimerText'),
        ' ',
        showTerms && (FronteggApp.React.createElement(StyledDisclaimerTermsLink, { href: t('termsLink'), target: '_blank', "data-test-id": 'signup-terms-link' }, t('termsLinkText'))),
        showTerms && showPrivacy && ` ${t('termsAndPrivacyConjunctionText')} `,
        showPrivacy && (FronteggApp.React.createElement(StyledDisclaimerPrivacyLink, { href: t('privacyLink'), target: '_blank', "data-test-id": 'signup-privacy-link' }, t('privacyLinkText')))));
};
const StyledDisclaimerCheckbox = signupStyler(formik_esm.Checkbox$1)(({ theme }) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
    return ({
        '&:not(.MuiCheckbox-indeterminate) .MuiSvgIcon-root': Object.assign({}, (_c = (_b = (_a = theme.disclaimer) === null || _a === void 0 ? void 0 : _a.checkBoxStyle) === null || _b === void 0 ? void 0 : _b.unchecked) === null || _c === void 0 ? void 0 : _c.base),
        '&:not(.Mui-checked):not(.MuiCheckbox-indeterminate):hover .MuiSvgIcon-root': Object.assign({}, (_f = (_e = (_d = theme.disclaimer) === null || _d === void 0 ? void 0 : _d.checkBoxStyle) === null || _e === void 0 ? void 0 : _e.unchecked) === null || _f === void 0 ? void 0 : _f.hover),
        '&:not(.MuiCheckbox-indeterminate).Mui-checked .MuiSvgIcon-root': Object.assign({ color: theme.palette.primary.main }, (_j = (_h = (_g = theme.disclaimer) === null || _g === void 0 ? void 0 : _g.checkBoxStyle) === null || _h === void 0 ? void 0 : _h.checked) === null || _j === void 0 ? void 0 : _j.base),
        '&:not(.MuiCheckbox-indeterminate).Mui-checked:hover .MuiSvgIcon-root': Object.assign({}, (_m = (_l = (_k = theme.disclaimer) === null || _k === void 0 ? void 0 : _k.checkBoxStyle) === null || _l === void 0 ? void 0 : _l.checked) === null || _m === void 0 ? void 0 : _m.hover),
    });
});
const DisclaimerField = () => {
    const [fieldProps, { error, touched }] = formik_esm.useField('disclaimer');
    const t = useContextT('loginBox.signup');
    return (FronteggApp.React.createElement(FronteggApp.React.Fragment, null,
        FronteggApp.React.createElement(formik_esm.FormControlLabel, { name: 'disclaimer', control: FronteggApp.React.createElement(StyledDisclaimerCheckbox, Object.assign({}, fieldProps, { size: 'small', "data-test-id": 'signup-disclaimer-checkbox' })), label: FronteggApp.React.createElement(DisclaimerText, { isCheckboxLabel: true }) }),
        !!error && touched && (FronteggApp.React.createElement(formik_esm.FormHelperText, { error: true, "data-test-id": 'signup-disclaimer-checkbox-error' }, t(error)))));
};

const StyledContainer$2 = signupStyler(formik_esm.Box)(({ theme }) => {
    var _a;
    return (Object.assign({}, (_a = theme.disclaimer) === null || _a === void 0 ? void 0 : _a.disclaimerContainerStyle));
});
const SignUpForm = ({ t, config }) => {
    var _a, _b;
    const globalT = useGlobalT();
    const { fields } = config, formikConfig = FronteggApp.__rest(config, ["fields"]);
    const { loading, error } = formik_esm.useSignUpState();
    const { loadVendorPasswordConfig } = formik_esm.useSecurityPolicyActions();
    const { isSSOAuth } = formik_esm.useAuth(({ isSSOAuth }) => ({ isSSOAuth }));
    const { passwordPolicy: { policy: passwordPolicy, loading: passwordPolicyLoading }, publicPolicy: { policy: publicPolicy }, } = formik_esm.useSecurityPolicyState();
    const recaptchaRef = FronteggApp.React.createRef();
    FronteggApp.react.exports.useEffect(() => {
        if (recaptchaRef.current && !loading) {
            recaptchaRef.current.execute();
        }
    }, [loading, recaptchaRef]);
    formik_esm.Owasp.setConfig(passwordPolicy, globalT);
    FronteggApp.react.exports.useEffect(() => {
        !passwordPolicy && loadVendorPasswordConfig();
    }, [passwordPolicy, loadVendorPasswordConfig]);
    const shouldDisplayOnlySocialLogins = FronteggApp.react.exports.useMemo(() => !isSSOAuth && (publicPolicy === null || publicPolicy === void 0 ? void 0 : publicPolicy.authStrategy) === reduxStore.AuthStrategyEnum.NoLocalAuthentication, [publicPolicy === null || publicPolicy === void 0 ? void 0 : publicPolicy.authStrategy, isSSOAuth]);
    if (passwordPolicyLoading) {
        return FronteggApp.React.createElement(PageLoader, null);
    }
    const { socialLogins, loginMessagePlacement, disclaimer } = formik_esm.useTheme();
    const socialLoginsLayout = (_b = (_a = socialLogins === null || socialLogins === void 0 ? void 0 : socialLogins.socialLoginsLayout) === null || _a === void 0 ? void 0 : _a.placement) !== null && _b !== void 0 ? _b : SocialLoginLocation.BOTTOM;
    return (FronteggApp.React.createElement(FronteggApp.React.Fragment, null,
        (!loginMessagePlacement || loginMessagePlacement === 'box') && FronteggApp.React.createElement(GoToLoginMessage, { t: t }),
        socialLoginsLayout === SocialLoginLocation.TOP && FronteggApp.React.createElement(SocialLoginsSignUp, { testId: 'social-logins-top-layout', dividerText: t('signUpWithSocialLogin'), withSocialDivider: !shouldDisplayOnlySocialLogins }),
        FronteggApp.React.createElement(FromWrapper, Object.assign({}, formikConfig), ({ isValid, dirty }) => {
            return (FronteggApp.React.createElement(FronteggApp.React.Fragment, null,
                Object.entries(fields).map(([key, { Component, hide }]) => hide || !Component ? null : FronteggApp.React.createElement(Component, { key: key, t: t })),
                error && FronteggApp.React.createElement(LoginErrorMessage, { "data-test-id": 'signup-error' }, error),
                FronteggApp.React.createElement(formik_esm.Box, { height: '1px', mb: 4 }),
                FronteggApp.React.createElement(formik_esm.Button$1, { className: 'fe-primary-btn', disabled: !isValid || !dirty, type: 'submit', fullWidth: true, color: 'primary', loading: loading, "data-test-id": 'signupSubmit-btn' }, t('signupButtonText')),
                FronteggApp.React.createElement(ReCaptcha, { recaptchaRef: recaptchaRef, action: 'sign_up' })));
        }),
        socialLoginsLayout === SocialLoginLocation.BOTTOM && FronteggApp.React.createElement(SocialLoginsSignUp, { testId: 'social-logins-bottom-layout', dividerText: t('signUpWithSocialLogin'), withSocialDivider: !shouldDisplayOnlySocialLogins }),
        disclaimer && (!disclaimer.placement || disclaimer.placement === 'box') && FronteggApp.React.createElement(StyledContainer$2, null,
            FronteggApp.React.createElement(DisclaimerText, null))));
};

const SignUpSuccess = ({ t, successRedirectUrl }) => {
    const { shouldActivate, onRedirectTo, routes } = formik_esm.useAuth(({ signUpState, routes, onRedirectTo }) => (Object.assign({ routes, onRedirectTo }, signUpState)));
    const { resetSignUpStateSoft } = formik_esm.useAuthActions();
    const BackToLoginClicked = () => {
        onRedirectTo(routes.loginUrl);
    };
    const message = FronteggApp.react.exports.useMemo(() => {
        if (shouldActivate) {
            return t('successActivateMessage');
        }
        return t('successGoToLoginButton');
    }, [t, shouldActivate]);
    FronteggApp.react.exports.useEffect(() => {
        if (!shouldActivate) {
            onRedirectTo(successRedirectUrl || routes.signUpSuccessUrl || routes.authenticatedUrl);
        }
        return resetSignUpStateSoft;
    }, [shouldActivate, routes, resetSignUpStateSoft, onRedirectTo]);
    if (!shouldActivate) {
        return null;
    }
    return (FronteggApp.React.createElement(formik_esm.LoginMessage, { title: t('successTitle'), description: message, iconKey: 'check', testId: 'signup-success' },
        FronteggApp.React.createElement(BackToLoginMessage$1, { mt: 10, onClick: BackToLoginClicked }, t('backToLoginLink'))));
};

const EmailField$1 = ({ t }) => {
    const [fieldProps, { error, touched }] = formik_esm.useField('email');
    const { submitCount } = formik_esm.useFormikContext();
    return (FronteggApp.React.createElement(formik_esm.Input$1, Object.assign({ autoFocus: true }, fieldProps, { onChange: fieldProps.onChange, error: !!error && touched && (fieldProps.value !== '' || submitCount > 0), errorMessage: error, name: 'email', placeholder: t('emailInputPlaceholder'), label: t('emailInputLabel'), "data-test-id": 'email-box' })));
};

const NameField = ({ t }) => {
    const [fieldProps, { error, touched }] = formik_esm.useField('name');
    return (FronteggApp.React.createElement(formik_esm.Input$1, Object.assign({}, fieldProps, { error: !!error && touched, errorMessage: error, name: 'name', label: t('nameInputLabel'), placeholder: t('nameInputPlaceholder'), "data-test-id": 'name-box' })));
};

const PasswordField = ({ t }) => {
    const [fieldProps, { error, touched }] = formik_esm.useField('password');
    return (FronteggApp.React.createElement(formik_esm.InputPassword$1, Object.assign({}, fieldProps, { error: !!error && touched, errorMessage: error, type: 'password', name: 'password', label: t('passwordInputLabel'), placeholder: t('passwordInputPlaceholder'), "data-test-id": 'password-box' })));
};

const PhoneField$1 = ({ t }) => {
    const [fieldProps, { error, touched }] = formik_esm.useField('phoneNumber');
    return (FronteggApp.React.createElement(formik_esm.Input$1, Object.assign({}, fieldProps, { error: !!error && touched, errorMessage: error, autoComplete: 'tel', name: 'phoneNumber', label: t('phoneInputLabel'), placeholder: t('phoneInputPlaceholder'), "data-test-id": 'phone-number-box' })));
};

const CompanyNameField = ({ t }) => {
    const [fieldProps, { error, touched }] = formik_esm.useField('companyName');
    return (FronteggApp.React.createElement(formik_esm.Input$1, Object.assign({}, fieldProps, { error: !!error && touched, errorMessage: error, name: 'companyName', label: t('companyNameInputLabel'), placeholder: t('companyNameInputPlaceholder'), "data-test-id": 'companyName-box' })));
};

const useSignupForm = ({ t, invitationToken }) => {
    const { signUpUser } = formik_esm.useSignUpActions();
    const fields = useSignupFields({ t, invitationToken });
    const { withCompanyName = true, events } = formik_esm.useShadowDom();
    const formConfig = FronteggApp.react.exports.useMemo(() => {
        const { initialValues, validationSchema } = Object.entries(fields).reduce((acc, [type, config]) => {
            if (config.hide) {
                return acc;
            }
            acc.initialValues[type] = config.initialValue;
            acc.validationSchema[type] = config.validationSchema;
            return acc;
        }, { initialValues: {}, validationSchema: {} });
        return {
            initialValues,
            onSubmit: (values) => {
                var _a;
                const url = new URL((_a = window === null || window === void 0 ? void 0 : window.location) === null || _a === void 0 ? void 0 : _a.href);
                if (invitationToken) {
                    values.invitationToken = invitationToken;
                }
                if (values.disclaimer) {
                    values.metadata = JSON.stringify({
                        lastTermsCheck: new Date().toISOString(),
                    });
                }
                if (withCompanyName) {
                    signUpUser(Object.assign(Object.assign({}, values), { events, url }));
                }
                else {
                    signUpUser(Object.assign(Object.assign({}, values), { companyName: values.name, events, url }));
                }
            },
            validationSchema: formik_esm.validateSchema(validationSchema),
        };
    }, [fields, formik_esm.validateSchema, signUpUser]);
    return {
        fields,
        formConfig,
    };
};
const useSignupFields = ({ t, invitationToken }) => {
    const { allowNotVerifiedUsersLogin } = formik_esm.useSignUpState();
    const { publicPolicy: { policy: publicPolicy }, } = formik_esm.useSecurityPolicyState();
    const { withCompanyName = true } = formik_esm.useShadowDom();
    const shouldDisplayPassword = FronteggApp.react.exports.useMemo(() => (publicPolicy === null || publicPolicy === void 0 ? void 0 : publicPolicy.authStrategy) === reduxStore.AuthStrategyEnum.EmailAndPassword && allowNotVerifiedUsersLogin, [publicPolicy === null || publicPolicy === void 0 ? void 0 : publicPolicy.authStrategy, allowNotVerifiedUsersLogin]);
    const shouldDisplayPhoneNumber = FronteggApp.react.exports.useMemo(() => (publicPolicy === null || publicPolicy === void 0 ? void 0 : publicPolicy.authStrategy) === reduxStore.AuthStrategyEnum.SmsCode, [
        publicPolicy === null || publicPolicy === void 0 ? void 0 : publicPolicy.authStrategy,
    ]);
    const { disclaimer } = formik_esm.useTheme();
    const fields = FronteggApp.react.exports.useMemo(() => {
        var _a, _b;
        return ({
            email: {
                type: 'email',
                initialValue: '',
                Component: EmailField$1,
                validationSchema: formik_esm.validateEmail(t('emailMustBeValid'), t('emailIsRequired')),
            },
            name: {
                type: 'name',
                initialValue: '',
                Component: NameField,
                validationSchema: formik_esm.validateMinLength(3, t('nameIsRequired'), t('nameMinLengthIs3')),
            },
            password: {
                type: 'password',
                hide: !shouldDisplayPassword,
                initialValue: '',
                Component: PasswordField,
                validationSchema: formik_esm.validatePasswordUsingOWASP(t('passwordIsRequired')),
            },
            phoneNumber: {
                type: 'phoneNumber',
                hide: !shouldDisplayPhoneNumber,
                initialValue: '',
                Component: PhoneField$1,
                validationSchema: formik_esm.validationPhone(t('phoneIsRequired'), t('phoneIsInvalid')),
            },
            companyName: {
                type: 'companyName',
                hide: !!invitationToken || !withCompanyName,
                initialValue: '',
                Component: CompanyNameField,
                validationSchema: formik_esm.validateMinLength(3, t('companyNameIsRequired'), t('companyNameMinLengthIs3')),
            },
            disclaimer: {
                type: 'disclaimer',
                hide: !(!!((_a = disclaimer === null || disclaimer === void 0 ? void 0 : disclaimer.privacy) === null || _a === void 0 ? void 0 : _a.enabled) || !!((_b = disclaimer === null || disclaimer === void 0 ? void 0 : disclaimer.terms) === null || _b === void 0 ? void 0 : _b.enabled)) || !(disclaimer === null || disclaimer === void 0 ? void 0 : disclaimer.hasCheckbox),
                initialValue: false,
                Component: DisclaimerField,
                validationSchema: formik_esm.validateRequiredBoolean('disclaimerTextRequired'),
            },
            recaptchaToken: {
                type: 'recaptchaToken',
                initialValue: '',
            },
        });
    }, [shouldDisplayPassword, t, formik_esm.validateEmail, formik_esm.validateMinLength, formik_esm.validatePasswordUsingOWASP, disclaimer]);
    return fields;
};

const SignupContainer$1 = signupStyler(formik_esm.Box)(({ theme }) => (Object.assign({}, theme.containerStyle)));
const StyledContainer$1 = signupStyler(formik_esm.Box)(({ theme }) => {
    var _a;
    return (Object.assign({}, (_a = theme.disclaimer) === null || _a === void 0 ? void 0 : _a.disclaimerContainerStyle));
});
const UserSignUp = () => {
    var _a;
    const oldT = useT('signup');
    const t = useContextT('loginBox.signup.user');
    const { stage, firstLoad, allowSignUps } = formik_esm.useSignUpState();
    const { userSignUpSuccessUrl, loginUrl } = formik_esm.useAuthRoutes();
    const url = new URL(window.location.href);
    const invitationToken = (_a = url.searchParams.get('invitationToken')) !== null && _a !== void 0 ? _a : '';
    const { inviteTokenError } = formik_esm.useLoginState(({ inviteTokenError }) => ({ inviteTokenError }));
    const onRedirectTo = formik_esm.useOnRedirectTo();
    const { fields, formConfig } = useSignupForm({ t, invitationToken });
    const redirectToLogin = FronteggApp.react.exports.useCallback(() => {
        onRedirectTo(loginUrl);
    }, [onRedirectTo, loginUrl]);
    if (!firstLoad && !allowSignUps) {
        redirectToLogin();
        return null;
    }
    const components = FronteggApp.react.exports.useMemo(() => {
        if (inviteTokenError) {
            return FronteggApp.React.createElement(TenantInvitationFailed, { variant: "signup", t: t });
        }
        switch (stage) {
            case reduxStore.SignUpStage.SignUpSuccess:
                return FronteggApp.React.createElement(SignUpSuccess, { t: t, successRedirectUrl: userSignUpSuccessUrl });
            default:
                return (FronteggApp.React.createElement(FronteggApp.React.Fragment, null,
                    FronteggApp.React.createElement(SignupPageTitle, { componentKey: 'title', componentKeys: ['userTitle', 'title'], title: oldT('title', { defaultValue: null }) || t('title') }),
                    FronteggApp.React.createElement(SignUpForm, { t: t, config: Object.assign(Object.assign({}, formConfig), { fields }) })));
        }
    }, [stage, inviteTokenError, fields, formConfig, t, oldT]);
    const { loginMessagePlacement, disclaimer } = formik_esm.useTheme();
    return (FronteggApp.React.createElement(FronteggApp.React.Fragment, null,
        loginMessagePlacement === 'page' && FronteggApp.React.createElement(GoToLoginMessage, { t: t }),
        FronteggApp.React.createElement(BoxElement$1, null,
            FronteggApp.React.createElement(SignupContainer$1, { "data-test-id": "signup-page" }, components)),
        (disclaimer === null || disclaimer === void 0 ? void 0 : disclaimer.placement) === 'page' && stage === reduxStore.SignUpStage.SignUp && FronteggApp.React.createElement(StyledContainer$1, null,
            FronteggApp.React.createElement(DisclaimerText, null))));
};

const SignupContainer = signupStyler(formik_esm.Box)(({ theme }) => (Object.assign({}, theme.containerStyle)));
const StyledContainer = signupStyler(formik_esm.Box)(({ theme }) => {
    var _a;
    return (Object.assign({}, (_a = theme.disclaimer) === null || _a === void 0 ? void 0 : _a.disclaimerContainerStyle));
});
const AccountSignUp = () => {
    const oldT = useT('signup');
    const t = useContextT('loginBox.signup.account');
    const { stage, firstLoad, allowSignUps } = formik_esm.useSignUpState();
    const { accountSignUpSuccessUrl, loginUrl } = formik_esm.useAuthRoutes();
    const onRedirectTo = formik_esm.useOnRedirectTo();
    const { fields, formConfig } = useSignupForm({ t });
    const redirectToLogin = FronteggApp.react.exports.useCallback(() => {
        onRedirectTo(loginUrl);
    }, [onRedirectTo, loginUrl]);
    if (!firstLoad && !allowSignUps) {
        redirectToLogin();
        return null;
    }
    const components = FronteggApp.react.exports.useMemo(() => {
        switch (stage) {
            case reduxStore.SignUpStage.SignUpSuccess:
                return FronteggApp.React.createElement(SignUpSuccess, { t: t, successRedirectUrl: accountSignUpSuccessUrl });
            default:
                return (FronteggApp.React.createElement(FronteggApp.React.Fragment, null,
                    FronteggApp.React.createElement(SignupPageTitle, { componentKey: 'title', componentKeys: ['accountTitle', 'title'], title: oldT('title', { defaultValue: null }) || t('title') }),
                    FronteggApp.React.createElement(SignUpForm, { t: t, config: Object.assign(Object.assign({}, formConfig), { fields }) })));
        }
    }, [stage, fields, formConfig, t, oldT]);
    const { loginMessagePlacement, disclaimer } = formik_esm.useTheme();
    return (FronteggApp.React.createElement(FronteggApp.React.Fragment, null,
        loginMessagePlacement === 'page' && FronteggApp.React.createElement(GoToLoginMessage, { t: t }),
        FronteggApp.React.createElement(BoxElement$1, null,
            FronteggApp.React.createElement(SignupContainer, { "data-test-id": "signup-page" }, components)),
        (disclaimer === null || disclaimer === void 0 ? void 0 : disclaimer.placement) === 'page' && stage === reduxStore.SignUpStage.SignUp && FronteggApp.React.createElement(StyledContainer, null,
            FronteggApp.React.createElement(DisclaimerText, null))));
};

const _SignUpPage = () => {
    const { invitationToken, loading } = useVerifyInviteToken();
    const Component = FronteggApp.react.exports.useMemo(() => {
        if (loading) {
            return PageLoader;
        }
        return invitationToken ? UserSignUp : AccountSignUp;
    }, [invitationToken, loading]);
    return FronteggApp.React.createElement(Component, null);
};
const SignUpPage = wrapPageWithoutBox(_SignUpPage, 'signup');

const resetPhoneNumberStyler = formik_esm.createStyled();
const ResetPhoneNumberPageTitle = BoxTitle;
const VerifyPhoneNumberPageTitle = BoxTitle;
const VerifyPhoneNumberPageMessage = BoxMessage;
const ChangePhoneNumberPageTitle = BoxTitle;
const ChangePhoneNumberPageMessage = BoxMessage;

const EmailField = () => {
    const t = useT('resetPhoneNumber');
    const [fieldProps, { error, touched }] = formik_esm.useField('email');
    return (FronteggApp.React.createElement(formik_esm.Input$1, Object.assign({ autoFocus: true }, fieldProps, { onChange: fieldProps.onChange, error: !!error && touched, errorMessage: error, name: 'email', placeholder: t('emailInputPlaceholder'), label: t('emailInputLabel'), "data-test-id": 'email-box' })));
};
const ResetPhoneNumberForm = () => {
    const t = useT('resetPhoneNumber');
    const { email } = formik_esm.useLoginState();
    const { error, loading } = formik_esm.useResetPhoneNumberState();
    const { resetPhoneNumber } = formik_esm.useResetPhoneNumberActions();
    const initialValues = FronteggApp.react.exports.useMemo(() => ({ email: email !== null && email !== void 0 ? email : '' }), [email]);
    const onRedirectTo = formik_esm.useOnRedirectTo();
    const { loginUrl } = formik_esm.useAuthRoutes();
    const { resetLoginState } = formik_esm.useAuthActions();
    const validationSchema = FronteggApp.react.exports.useMemo(() => formik_esm.validateSchema({
        email: formik_esm.validateEmail(t('emailMustBeValid'), t('emailIsRequired')),
    }), [t, email]);
    const formikProps = {
        onSubmit: ({ email }) => new Promise((resolve, reject) => {
            const callback = formik_esm.callbackToPromise(resolve, reject);
            resetPhoneNumber({ email, callback });
        }),
        initialValues,
        validationSchema,
    };
    const handleBackToLogin = FronteggApp.react.exports.useCallback(() => {
        resetLoginState();
        onRedirectTo(loginUrl);
    }, [loginUrl, onRedirectTo]);
    return FronteggApp.React.createElement(FronteggApp.React.Fragment, null,
        FronteggApp.React.createElement(ResetPhoneNumberPageTitle, { componentKey: 'resetPhoneNumberTitle', title: t('resetPhoneNumberTitle') }),
        FronteggApp.React.createElement(FromWrapper, Object.assign({}, formikProps), ({ isValid }) => {
            return FronteggApp.React.createElement(FronteggApp.React.Fragment, null,
                FronteggApp.React.createElement(EmailField, null),
                error && FronteggApp.React.createElement(LoginErrorMessage, { "data-test-id": "reset-phone-number-form_error" }, error),
                FronteggApp.React.createElement(formik_esm.Button$1, { sx: { mt: 4 }, className: 'fe-primary-btn', disabled: loading || !isValid, fullWidth: true, color: "primary", loading: loading, "data-test-id": "submit-btn" }, t('continue')),
                FronteggApp.React.createElement(formik_esm.Box, { textAlign: "center", mt: 4 },
                    FronteggApp.React.createElement(BackToLoginMessage$1, { "data-test-id": "back-to-login-btn", onClick: handleBackToLogin }, t('backToLogin'))));
        }));
};

const VerifyResetPhoneNumberForm = () => {
    const t = useT('resetPhoneNumber');
    const { resetPhoneNumber, verifyResetPhoneNumber } = formik_esm.useResetPhoneNumberActions();
    const { loading, error, resetPhoneNumberToken } = formik_esm.useResetPhoneNumberState();
    const handleSubmit = FronteggApp.react.exports.useCallback(({ token: code }) => {
        verifyResetPhoneNumber({ code, resetPhoneNumberToken: resetPhoneNumberToken !== null && resetPhoneNumberToken !== void 0 ? resetPhoneNumberToken : '' });
    }, [verifyResetPhoneNumber, resetPhoneNumberToken]);
    const handleResend = FronteggApp.react.exports.useCallback((values) => {
        resetPhoneNumber(values);
    }, [resetPhoneNumber]);
    return FronteggApp.React.createElement(LoginWithOTC, { loading: loading, error: error, onSubmit: handleSubmit, onResendCode: handleResend, header: FronteggApp.React.createElement(FronteggApp.React.Fragment, null,
            FronteggApp.React.createElement(VerifyPhoneNumberPageTitle, { componentKey: 'verifyResetPhoneNumberTitle', title: t('resetPhoneOtcTitle') }),
            FronteggApp.React.createElement(VerifyPhoneNumberPageMessage, { componentKey: 'verifyResetPhoneNumberTitleStyle', message: t('resetPhoneOtcMessage') })) });
};

const PhoneField = () => {
    const t = useT('signup');
    const [fieldProps, { error, touched }] = formik_esm.useField('phoneNumber');
    return (FronteggApp.React.createElement(formik_esm.Input$1, Object.assign({}, fieldProps, { error: !!error && touched, errorMessage: error, autoComplete: 'tel', name: 'phoneNumber', label: t('phoneInputLabel'), placeholder: t('phoneInputPlaceholder'), "data-test-id": 'phone-number-box' })));
};
const ChangePhoneNumberForm = () => {
    const t = useT('resetPhoneNumber');
    const { email } = formik_esm.useLoginState();
    const { changePhoneNumber } = formik_esm.useResetPhoneNumberActions();
    const { changePhoneNumberToken, error, loading } = formik_esm.useResetPhoneNumberState();
    const initialValues = FronteggApp.react.exports.useMemo(() => ({ phoneNumber: '', recaptchaToken: '' }), []);
    const recaptchaRef = FronteggApp.React.createRef();
    const [hideRecaptcha] = useHideRecaptcha();
    FronteggApp.react.exports.useEffect(() => {
        if (recaptchaRef.current && !loading) {
            recaptchaRef.current.execute();
        }
    }, [loading, recaptchaRef]);
    const validationSchema = FronteggApp.react.exports.useMemo(() => formik_esm.validateSchema({
        phoneNumber: formik_esm.validationPhone(t('phoneIsRequired'), t('phoneIsInvalid')),
    }), [t]);
    const formikProps = {
        onSubmit: ({ phoneNumber, recaptchaToken }) => {
            const recaptchaElement = document.getElementsByClassName('grecaptcha-badge')[0];
            const callback = () => hideRecaptcha(recaptchaElement);
            changePhoneNumber({ email: email !== null && email !== void 0 ? email : '', recaptchaToken, phoneNumber, changePhoneNumberToken: changePhoneNumberToken !== null && changePhoneNumberToken !== void 0 ? changePhoneNumberToken : '', callback });
        },
        initialValues,
        validationSchema,
    };
    return FronteggApp.React.createElement(FronteggApp.React.Fragment, null,
        FronteggApp.React.createElement(ChangePhoneNumberPageTitle, { componentKey: "changePhoneNumberTitle", title: t('changePhoneNumberTitle') }),
        FronteggApp.React.createElement(ChangePhoneNumberPageMessage, { componentKey: "changePhoneNumberMessageStyle", message: t('changePhoneNumberMessage') }),
        FronteggApp.React.createElement(FromWrapper, Object.assign({}, formikProps), ({ isValid }) => {
            return FronteggApp.React.createElement(FronteggApp.React.Fragment, null,
                FronteggApp.React.createElement(PhoneField, null),
                error && FronteggApp.React.createElement(LoginErrorMessage, { "data-test-id": "reset-phone-number-form_error" }, error),
                FronteggApp.React.createElement(formik_esm.Button$1, { sx: { mt: 4 }, className: 'fe-primary-btn', disabled: loading || !isValid, fullWidth: true, color: "primary", loading: loading, "data-test-id": "submit-btn" }, t('continue')));
        }));
};

const ResetPhoneNumberContainer = resetPhoneNumberStyler(formik_esm.Box)(({ theme }) => (Object.assign({}, theme.containerStyle)));
const ResetPhoneNumberPage$1 = () => {
    const { step } = formik_esm.useResetPhoneNumberState();
    let components;
    if (step === reduxStore.ResetPhoneNumberStep.ResetPhoneNumber) {
        components = FronteggApp.React.createElement(ResetPhoneNumberForm, null);
    }
    else if (step === reduxStore.ResetPhoneNumberStep.VerifyResetPhoneNumber) {
        components = FronteggApp.React.createElement(VerifyResetPhoneNumberForm, null);
    }
    else {
        components = FronteggApp.React.createElement(ChangePhoneNumberForm, null);
    }
    return FronteggApp.React.createElement(ResetPhoneNumberContainer, { "data-test-id": "reset-phone-number-form" }, components);
};

const ResetPhoneNumberPage = wrapPage(ResetPhoneNumberPage$1, 'resetPassword');

const getUri = (urlStrategy) => {
    if (urlStrategy === 'path') {
        return (window !== null && window !== void 0 ? window : document).location.pathname;
    }
    else {
        return ((window !== null && window !== void 0 ? window : document).location.hash || '#').substring(1);
    }
};
const Routes = ({ staticRoute }) => {
    const { isLoading } = formik_esm.useAuth(({ isLoading }) => ({ isLoading }));
    const { basename = '', urlStrategy, hostedLoginBox } = formik_esm.useShadowDom();
    const routes = formik_esm.useAuthRoutes();
    const uriRef = FronteggApp.react.exports.useRef(getUri(urlStrategy));
    const [uri, setUri] = FronteggApp.react.exports.useState(getUri(urlStrategy));
    const onUriChanged = FronteggApp.react.exports.useCallback(() => {
        const uri = getUri(urlStrategy);
        if (uriRef.current !== uri) {
            uriRef.current = uri;
            setUri(uri);
        }
    }, [setUri, urlStrategy]);
    FronteggApp.react.exports.useEffect(() => {
        document.addEventListener('frontegg_onRedirectTo_fired', onUriChanged);
        window.addEventListener('popstate', onUriChanged);
        window.addEventListener('hashchange', onUriChanged, false);
        setInterval(onUriChanged, 50);
        return () => {
            window.removeEventListener('popstate', onUriChanged);
            window.removeEventListener('hashchange', onUriChanged);
        };
    }, [onUriChanged]);
    if (isLoading) {
        return FronteggApp.React.createElement(PageLoader, null);
    }
    const calculatedBasename = basename ? (basename.endsWith('/') ? basename.substring(0, basename.length - 1) : basename) : '';
    if (hostedLoginBox) {
        switch (staticRoute !== null && staticRoute !== void 0 ? staticRoute : uri) {
            case calculatedBasename + routes.hostedLoginRedirectUrl:
                return FronteggApp.React.createElement(HostedLoginPage, null);
            default:
                return null;
        }
    }
    switch (staticRoute !== null && staticRoute !== void 0 ? staticRoute : uri) {
        case calculatedBasename + routes.loginUrl:
            return FronteggApp.React.createElement(LoginPage, null);
        case calculatedBasename + routes.logoutUrl:
            return FronteggApp.React.createElement(LogoutPage, null);
        case calculatedBasename + routes.activateUrl:
            return FronteggApp.React.createElement(ActivateAccountPage, null);
        case calculatedBasename + routes.acceptInvitationUrl:
            return FronteggApp.React.createElement(AcceptInvitationPage, null);
        case calculatedBasename + routes.forgetPasswordUrl:
            return FronteggApp.React.createElement(ForgotPasswordPage, null);
        case calculatedBasename + routes.resetPhoneNumberUrl:
            return FronteggApp.React.createElement(ResetPhoneNumberPage, null);
        case calculatedBasename + routes.resetPasswordUrl:
            return FronteggApp.React.createElement(ResetPasswordPage, null);
        case calculatedBasename + routes.socialLoginCallbackUrl:
            return FronteggApp.React.createElement(SocialLoginsSuccess, null);
        case calculatedBasename + routes.signUpUrl:
            return FronteggApp.React.createElement(SignUpPage, null);
        case calculatedBasename + routes.oidcRedirectUrl:
            return FronteggApp.React.createElement(OidcLoginSuccess, null);
        case calculatedBasename + routes.samlCallbackUrl:
            return FronteggApp.React.createElement(SamlLoginSuccess, null);
        case calculatedBasename + routes.magicLinkCallbackUrl:
            return FronteggApp.React.createElement(MagicLinkCallbackPage, null);
    }
    return null;
};

const defaultTheme = 'modern';
const LoginBox = ({ injector, options }) => {
    var _a, _b;
    restApi.ContextHolder.setOnRedirectTo(options.onRedirectTo);
    return (FronteggApp.React.createElement(formik_esm.ShadowDomContext.Provider, { value: Object.assign(Object.assign({ iframeRendering: false, injector }, options), { themeOptions: formik_esm.enhanceTheme(defaultTheme, (_a = options.metadata) !== null && _a !== void 0 ? _a : {}, (_b = options.themeOptions) !== null && _b !== void 0 ? _b : {}, options), slotsContainer: injector.loginBoxContainer, rootEl: injector.loginBoxEl, renderByRoute: true }) },
        FronteggApp.React.createElement(App, null,
            FronteggApp.React.createElement(Routes, null))));
};
const LoginBoxPage = ({ injector, options, staticRoute, setThemeSetter, setStaticRouteSetter, }) => {
    var _a;
    const [themeOptions, setThemeOptions] = FronteggApp.react.exports.useState(formik_esm.enhanceTheme(defaultTheme, {}, (_a = options.themeOptions) !== null && _a !== void 0 ? _a : {}));
    const [route, setRoute] = FronteggApp.react.exports.useState(staticRoute);
    // @ts-ignore
    setThemeSetter === null || setThemeSetter === void 0 ? void 0 : setThemeSetter((theme) => setThemeOptions(formik_esm.enhanceTheme(defaultTheme, {}, theme !== null && theme !== void 0 ? theme : {})));
    setStaticRouteSetter === null || setStaticRouteSetter === void 0 ? void 0 : setStaticRouteSetter(setRoute);
    return (FronteggApp.React.createElement(formik_esm.ShadowDomContext.Provider, { value: Object.assign(Object.assign({ injector, iframeRendering: false }, options), { themeOptions, slotsContainer: injector.loginBoxContainer, rootEl: injector.loginBoxEl, renderByRoute: true }) },
        FronteggApp.React.createElement(App, null,
            FronteggApp.React.createElement(Routes, { staticRoute: route }))));
};

exports.LoginBox = LoginBox;
exports.LoginBoxPage = LoginBoxPage;
exports['default'] = LoginBox;
exports.defaultTheme = defaultTheme;

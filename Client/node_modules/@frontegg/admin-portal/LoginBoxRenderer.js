import { F as FronteggApp, R as React, a as ReactDom } from './FronteggApp-3b25e3fb.js';
import { createFronteggStore } from '@frontegg/redux-store';
import { Metadata } from '@frontegg/types';
import { LoginBoxPage } from './index-f432917b.js';
import { t as themes$1 } from './formik.esm-3ec4824f.js';
import './utils.js';
import './AppHolder.js';
import '@frontegg/rest-api';
import 'uuid';

const defaultTheme = 'modern';
const getThemeByName = (name) => { var _a; return (_a = themes$1[name]) !== null && _a !== void 0 ? _a : themes$1[defaultTheme]; };
class LoginBoxRenderer {
    constructor(name, themeOptions, store, appOptions) {
        this.setRoute = () => { };
        this.themeOptions = {};
        const contextOptions = { baseUrl: 'preview' };
        this.store = store !== null && store !== void 0 ? store : createFronteggStore({ context: contextOptions }, this, true, undefined, undefined, true);
        this.options = Object.assign({ themeOptions, iframeRendering: true, metadata: {}, previewMode: true, builderMode: true, store: this.store, contextOptions, onRedirectTo: () => {
                console.debug('path');
            } }, appOptions);
        this.app = new FronteggApp(this.options, name, true);
        Metadata.set({}, name);
    }
    render(loginBoxContainer) {
        let loginBoxEl = loginBoxContainer.querySelector('#root');
        if (!loginBoxEl) {
            loginBoxEl = loginBoxContainer.ownerDocument.createElement('div');
            loginBoxEl.setAttribute('id', 'root');
            loginBoxContainer.appendChild(loginBoxEl);
        }
        this.app.loginBoxContainer = loginBoxContainer;
        this.app.loginBoxEl = loginBoxEl;
        const setThemeSetter = (themeSetter) => {
            this.themeSetter = themeSetter;
        };
        const setStaticRouteSetter = (setStaticRoute) => {
            this.setRoute = setStaticRoute;
        };
        const loginBox = React.createElement(LoginBoxPage, {
            options: this.options,
            injector: this.app,
            setThemeSetter,
            setStaticRouteSetter,
            staticRoute: '/account/login',
        });
        const wrapper = React.createElement(React.Suspense, { fallback: '' }, loginBox);
        ReactDom.render(wrapper, loginBoxEl);
        this.app.loading = false;
    }
    unmount() {
        try {
            if (this.app.loginBoxEl) {
                ReactDom.unmountComponentAtNode(this.app.loginBoxEl);
            }
        }
        catch (e) {
            console.error('Failed to unmount login box renderer', e);
        }
    }
    setTheme(themeOptions) {
        var _a;
        this.themeOptions = themeOptions;
        (_a = this.themeSetter) === null || _a === void 0 ? void 0 : _a.call(this, this.themeOptions);
    }
    setStaticRoute(staticRoute) {
        var _a;
        (_a = this.setRoute) === null || _a === void 0 ? void 0 : _a.call(this, staticRoute);
    }
    setStore(state) {
        this.store.dispatch({
            type: 'auth/setState',
            payload: state,
        });
    }
}

export { LoginBoxRenderer, LoginBoxRenderer as default, defaultTheme, getThemeByName };

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var tslib = require('tslib');
var React = require('react');
var React__default = _interopDefault(React);
var adminPortal = require('@frontegg/admin-portal');
var reactHooks = require('@frontegg/react-hooks');
var ReactRouterDom = require('react-router-dom');
var restApi = require('@frontegg/rest-api');
var AppHolder = require('@frontegg/admin-portal/AppHolder');
var types = require('@frontegg/types');

var BrowserRouter = ReactRouterDom.BrowserRouter;
var useHistory = function () {
    var _a, _b, _c;
    // @ts-ignore
    var navigate = ((_a = ReactRouterDom.useInRouterContext) === null || _a === void 0 ? void 0 : _a.call(ReactRouterDom)) ? (_b = ReactRouterDom.useNavigate) === null || _b === void 0 ? void 0 : _b.call(ReactRouterDom) : null;
    var history = (_c = ReactRouterDom.useHistory) === null || _c === void 0 ? void 0 : _c.call(ReactRouterDom);
    if (navigate) {
        var push = function (path, state) {
            if (state) {
                navigate(path, { state: state });
            }
            else {
                navigate(path);
            }
        };
        var replace = function (path, state) {
            navigate(path, { state: state, replace: true });
        };
        return { push: push, replace: replace };
    }
    return history;
};

var removeRedirectUrlFromQuery = function (query) {
    var q = new URLSearchParams(query);
    q.delete('redirectUrl');
    return q.toString();
};
var useQueryKeeper = function (_a) {
    var routes = _a.routes, history = _a.history;
    var queryParams = React.useRef();
    var prevPathname = React.useRef();
    var _b = ReactRouterDom.useLocation(), pathname = _b.pathname, search = _b.search;
    React.useEffect(function () {
        if (!!search) {
            queryParams.current = search;
            prevPathname.current = pathname;
        }
    }, []);
    React.useEffect(function () {
        var shouldKeepQuery = !!Object.values(routes).find(function (route) { return route === prevPathname.current; });
        if (!search && !!queryParams.current && shouldKeepQuery) {
            var query = removeRedirectUrlFromQuery(queryParams.current);
            history.push(pathname + ("?" + query));
        }
        prevPathname.current = pathname;
    }, [pathname, search, routes]);
};

var ConnectorHistory = function (props) {
    var history = useHistory();
    return React__default.createElement(Connector, tslib.__assign({ history: history }, props));
};
var Connector = function (_a) {
    var _b;
    var history = _a.history, appName = _a.appName, props = tslib.__rest(_a, ["history", "appName"]);
    var isSSR = typeof window === 'undefined';
    // v6 or v5
    var baseName = (_b = props.basename) !== null && _b !== void 0 ? _b : '';
    var onRedirectTo = React.useCallback(function (_path, opts) {
        var path = _path;
        // noinspection SuspiciousTypeOfGuard
        if (baseName && typeof baseName === 'string' && baseName.length > 0 && path.startsWith(baseName)) {
            path = path.substring(baseName.length);
        }
        if (opts === null || opts === void 0 ? void 0 : opts.preserveQueryParams) {
            path = "" + path + window.location.search;
        }
        if ((opts === null || opts === void 0 ? void 0 : opts.refresh) && !isSSR) {
            // @ts-ignore
            window.Cypress ? history.push(path) : (window.location.href = path);
        }
        else {
            (opts === null || opts === void 0 ? void 0 : opts.replace) ? history.replace(path) : history.push(path);
        }
    }, []);
    var app = React.useMemo(function () {
        var _a;
        try {
            return AppHolder.AppHolder.getInstance(appName !== null && appName !== void 0 ? appName : 'default');
        }
        catch (e) {
            return adminPortal.initialize(tslib.__assign(tslib.__assign({}, props), { basename: (_a = props.basename) !== null && _a !== void 0 ? _a : baseName, contextOptions: tslib.__assign({ requestCredentials: 'include' }, props.contextOptions), onRedirectTo: onRedirectTo }), appName !== null && appName !== void 0 ? appName : 'default');
        }
    }, []);
    restApi.ContextHolder.setOnRedirectTo(onRedirectTo);
    var signUpUrl = app.store.getState().auth.routes.signUpUrl;
    useQueryKeeper({ routes: { signUpUrl: signUpUrl }, history: history });
    return React__default.createElement(reactHooks.FronteggStoreProvider, tslib.__assign({}, tslib.__assign(tslib.__assign({}, props), { app: app })));
};
var FronteggProvider = function (props) {
    var history = useHistory();
    if (props.history || history) {
        return (React__default.createElement(Connector, tslib.__assign({ history: props.history || history }, props), props.children));
    }
    return (React__default.createElement(BrowserRouter, { basename: props.basename },
        React__default.createElement(ConnectorHistory, tslib.__assign({}, props), props.children)));
};

var AuthorizedContent = function (props) {
    var _a, _b;
    var isAuthorized = true; // Initially
    var user = reactHooks.useAuthUserOrNull();
    if (!(user === null || user === void 0 ? void 0 : user.superUser)) {
        if (props.requiredPermissions) {
            isAuthorized = false; // Reset - we are going to check that the user has at least one matching permission
            var _loop_1 = function (permission) {
                if ((_a = user === null || user === void 0 ? void 0 : user.permissions) === null || _a === void 0 ? void 0 : _a.find(function (_a) {
                    var key = _a.key;
                    return key === permission;
                })) {
                    isAuthorized = true;
                }
            };
            for (var _i = 0, _c = props.requiredPermissions; _i < _c.length; _i++) {
                var permission = _c[_i];
                _loop_1(permission);
            }
        }
        if (props.requiredRoles) {
            isAuthorized = false; // Reset - we are going to check that the user has at least one matching role
            var _loop_2 = function (role) {
                if ((_b = user === null || user === void 0 ? void 0 : user.roles) === null || _b === void 0 ? void 0 : _b.find(function (_a) {
                    var key = _a.key;
                    return key === role;
                })) {
                    isAuthorized = true;
                }
            };
            for (var _d = 0, _e = props.requiredRoles; _d < _e.length; _d++) {
                var role = _e[_d];
                _loop_2(role);
            }
        }
    }
    if (typeof props.render === 'function') {
        return React__default.createElement(React__default.Fragment, null, props.render(isAuthorized));
    }
    return isAuthorized ? React__default.createElement(React__default.Fragment, null, props.children) : null;
};

var useCheckoutDialog = function (appName) {
    if (appName === void 0) { appName = 'default'; }
    var _a = React.useState({
        open: false,
        error: null,
        success: false,
    }), _b = _a[0], open = _b.open, error = _b.error, success = _b.success, setState = _a[1];
    var handleError = React.useCallback(function (error) {
        setState({
            open: true,
            success: false,
            error: error,
        });
    }, []);
    var handleSuccess = React.useCallback(function () {
        setState({
            open: false,
            success: true,
            error: null,
        });
    }, []);
    var showDialog = React.useCallback(function (plan) {
        adminPortal.CheckoutDialog.show({
            plan: plan,
            onClose: hideDialog,
            onError: handleError,
            onSuccess: handleSuccess,
        }, appName);
        setState({
            open: true,
            success: false,
            error: null,
        });
    }, [appName]);
    var hideDialog = React.useCallback(function () {
        adminPortal.CheckoutDialog.hide(appName);
        setState({
            open: false,
            error: null,
            success: false,
        });
    }, [appName]);
    return React.useMemo(function () { return ({
        open: open,
        showDialog: showDialog,
        hideDialog: hideDialog,
        error: error,
        success: success,
    }); }, [open, showDialog, hideDialog, error, success]);
};

Object.keys(reactHooks).forEach(function (k) {
  if (k !== 'default') Object.defineProperty(exports, k, {
    enumerable: true,
    get: function () {
      return reactHooks[k];
    }
  });
});
Object.keys(types).forEach(function (k) {
  if (k !== 'default') Object.defineProperty(exports, k, {
    enumerable: true,
    get: function () {
      return types[k];
    }
  });
});
Object.defineProperty(exports, 'AdminPortal', {
  enumerable: true,
  get: function () {
    return adminPortal.AdminPortal;
  }
});
Object.defineProperty(exports, 'CheckoutDialog', {
  enumerable: true,
  get: function () {
    return adminPortal.CheckoutDialog;
  }
});
exports.AuthorizedContent = AuthorizedContent;
exports.Connector = Connector;
exports.ConnectorHistory = ConnectorHistory;
exports.FronteggProvider = FronteggProvider;
exports.useCheckoutDialog = useCheckoutDialog;
//# sourceMappingURL=index.js.map

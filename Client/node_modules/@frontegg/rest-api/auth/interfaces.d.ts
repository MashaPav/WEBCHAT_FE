import { ITenantsResponse, IUserProfile } from '..';
import { AuthStrategyEnum, SocialLoginProviders } from "./enums";
import { ISamlRolesGroup } from '../teams/interfaces';
export * from './secutiry-poilicy/interfaces';
export declare type IPreLogin = {
    email: string;
};
export declare type IPostLogin = {
    RelayState: string;
    SAMLResponse: string;
};
export declare type IPreLoginWithIdpTypeResponse = {
    address: string;
    idpType: 'saml' | 'oidc';
};
export declare type IOidcPostLogin = {
    code: string;
    state: string;
    redirectUri?: string;
};
export declare type IOidcPostLoginV2 = {
    code: string;
    RelayState: string;
    redirectUri?: string;
};
export declare type ILogin = {
    email: string;
    password: string;
    recaptchaToken?: string;
    invitationToken?: string;
};
export declare type ILoginResponse = IUserProfile & {
    mfaRequired: boolean;
    accessToken: string;
    refreshToken: string;
    expires: string;
    expiresIn: number;
    mfaToken?: string;
    qrCode?: string;
    recoveryCode?: string;
    emailVerified?: boolean;
    redirectLocation?: string;
    userEmail?: string;
};
export declare type ILoginResponseV2 = {
    user: ILoginResponse;
    tenants?: ITenantsResponse[];
};
export declare type ILoginWithMfa = {
    mfaToken: string;
    value: string;
    rememberDevice?: boolean;
    invitationToken?: string;
};
export declare type IActivateAccount = {
    userId: string;
    token: string;
    password?: string;
    recaptchaToken?: string;
};
export declare type IAcceptInvitation = {
    userId: string;
    token: string;
};
export declare type IResendActivationEmail = {
    email: string;
};
export declare type IForgotPassword = {
    email: string;
};
export declare type IResetPassword = {
    token: string;
    userId: string;
    password: string;
};
export declare type IRecoverMFAToken = {
    email: string;
    recoveryCode: string;
};
export declare type IEnrollMfaResponse = {
    qrCode: string;
};
export declare type IVerifyMfa = {
    token: string;
};
export declare type IVerifyMfaResponse = {
    recoveryCode: string;
};
export declare type IDisableMfa = {
    token: string;
};
export declare type ISamlConfiguration = {
    enabled: boolean;
    domain?: string;
    validated?: boolean;
    generatedVerification?: string;
    ssoEndpoint?: string;
    publicCertificate?: string;
    signRequest?: boolean;
    createdAt?: Date;
    updatedAt?: Date;
    acsUrl?: string;
    spEntityId?: string;
    isSamlActive?: boolean;
    oidcClientId?: string;
    oidcSecret?: string;
    type?: string;
};
export declare type IOidcConfiguration = {
    active: boolean;
    redirectUri?: string;
};
export declare type ISSOPublicConfiguration = {
    isActive: boolean;
};
export declare type IUpdateSamlConfiguration = Omit<ISamlConfiguration, 'validated' | 'generatedVerification' | 'createdAt' | 'updatedAt'>;
export declare type ISamlVendorConfigResponse = {
    acsUrl: string;
    spEntityId: string;
};
export declare type ISamlVendorMetadata = {
    id: string;
    vendorId: string;
    entityName: 'saml';
    configuration: ISamlVendorConfigResponse;
};
export declare type IUpdateSamlVendorMetadata = {
    metadata: string;
};
export interface ISocialLoginProviderConfiguration {
    type: SocialLoginProviders;
    clientId: string;
    redirectUrl: string;
    active: boolean;
}
export interface ISocialLoginProviderConfigurationV2 {
    type: SocialLoginProviders;
    clientId?: string | null;
    redirectUrl: string;
    active: boolean;
    authorizationUrl?: string | null;
    customised: boolean;
}
export interface ILoginViaSocialLogin {
    code: string;
    redirectUri?: string;
    provider: SocialLoginProviders;
    afterAuthRedirectUrl?: string;
    codeVerifier?: string;
    metadata?: string;
    invitationToken?: string;
    state?: string;
}
export interface ILoginViaSocialLoginResponse {
    email: string;
    isNewUser: boolean;
    userId?: string;
    tenantId?: string;
    name: string;
    accessToken: string;
    mfaRequired: boolean;
    userEmail?: string;
}
export interface ISetSocialLoginError {
    error: string;
}
export interface IVendorConfig {
    allowSignups: boolean;
    allowNotVerifiedUsersLogin: boolean;
    apiTokensEnabled: boolean;
    forcePermissions: boolean;
    authStrategy: AuthStrategyEnum;
}
export interface ISignUpUser {
    email: string;
    companyName: string;
    recaptchaToken?: string;
    name?: string;
    password?: string;
    phoneNumber?: string;
    metadata?: string /** JSON  */;
    roleIds?: string[];
    invitationToken?: string;
}
export interface ISignUpResponse {
    shouldActivate: boolean;
    user?: ILoginResponse;
    userId?: string;
    tenantId?: string;
}
export interface ISessionResponse {
    id: string;
    expires?: Date;
    ipAddress?: string;
    userAgent?: string;
    createdAt?: Date;
    current?: boolean;
}
export interface ISessionIdleTimeoutConfiguration {
    isActive: boolean;
    timeout: number;
}
export interface ISessionTimeoutConfiguration {
    isActive: boolean;
    timeout: number;
}
export interface ISessionConcurrentConfiguration {
    isActive: boolean;
    maxSessions: number;
}
export interface ISessionConfigurations {
    sessionTimeoutConfiguration?: ISessionTimeoutConfiguration;
    sessionIdleTimeoutConfiguration?: ISessionIdleTimeoutConfiguration;
    sessionConcurrentConfiguration?: ISessionConcurrentConfiguration;
}
export interface IUserApiTokensData {
    clientId?: string;
    description: string;
    metadata?: any;
    secret?: string;
}
export interface ITenantApiTokensData {
    clientId?: string;
    description: string;
    tenantId?: string;
    createdByUserId?: string;
    metadata?: any;
    secret?: string;
    roleIds?: string[];
}
export interface IUpdateUserApiTokensData {
    description: string;
}
export interface IUpdateTenantApiTokensData {
    description: string;
    roleIds: string[];
}
export interface IDeleteApiToken {
    tokenId: string;
}
export interface IUpdateSamlRoles {
    roleIds: string[];
}
export interface IUpdateSamlGroup {
    id: string;
    group: string;
    roleIds: string[];
}
export interface ICreateSamlGroup {
    group: string;
    roleIds?: string[];
}
export declare type IGetUserById = {
    userId: string;
};
export interface IUserIdResponse {
    id: string;
    name: string;
    deletedAt: null;
    metadata: any;
    tenantId: string;
    vendorId: string;
    createdAt: Date;
    updatedAt: Date;
}
export interface IGetUserPasswordConfig {
    userId: string;
}
export interface IGetActivateAccountStrategy {
    userId: string;
    token: string;
}
export interface IGetActivateAccountStrategyResponse {
    shouldSetPassword: boolean;
}
export interface IAllowedToRememberMfaDevice {
    isAllowedToRemember: boolean;
    mfaDeviceExpiration: number;
}
export interface IPasswordlessPreLogin {
    email: string;
    recaptchaToken?: string;
    type: AuthStrategyEnum;
    invitationToken?: string;
}
export interface IPasswordlessPostLogin {
    token: string;
    recaptchaToken?: string;
    type: AuthStrategyEnum;
    invitationToken?: string;
}
export interface IVerifyInviteToken {
    token: string;
}
export interface ICreateSSODomain {
    domain: string;
}
export interface ISSODomain {
    id: string;
    domain: string;
    validated: boolean;
}
export interface ISSOConfigurationDefaultRoles {
    roleIds: string[];
}
export interface ISSOConfiguration {
    id: string;
    enabled: boolean;
    generatedVerification: string;
    ssoEndpoint: string;
    publicCertificate: string;
    signRequest: boolean;
    createdAt?: string;
    updatedAt?: string;
    acsUrl: string;
    type: string;
    spEntityId: string;
    oidcClientId: string;
    oidcSecret: string;
    domains: ISSODomain[];
    roleIds: string[];
    groups: ISamlRolesGroup[];
}
export interface IExchangeOAuthTokens {
    code?: string;
    code_verifier?: string;
    redirect_uri?: string;
    refresh_token?: string;
}
export interface IOAuthTokenResponse {
    access_token: string;
    expires_in?: number;
    id_token: string;
    refresh_token: string;
}
export declare type IUpdateSSOConfiguration = Partial<Omit<ISSOConfiguration, 'id' | 'createdAt' | 'updatedAt' | 'domains'>>;
export interface IResetPhoneNumber {
    email: string;
}
export interface IResetPhoneNumberResponse {
    resetPhoneNumberToken: string;
}
export interface IChangePhoneNumberWithVerification {
    phoneNumber: string;
}
export interface IChangePhoneNumberWithVerificationResponse {
    changePhoneId: string;
}
export interface IVerifyChangePhoneNumber {
    changePhoneId: string;
    code: string;
}
export interface IVerifyResetPhoneNumber {
    resetPhoneNumberToken: string;
    code: string;
}
export interface IVerifyResetPhoneNumberResponse {
    changePhoneNumberToken: string;
}
export interface IChangePhoneNumber {
    changePhoneNumberToken: string;
    phoneNumber: string;
}
interface WebAuthnLoginResponse {
    clientDataJSON: string;
    authenticatorData: string;
    signature: string;
    userHandle?: string;
}
export interface IWebAuthnPreLogin {
    email: string;
    recaptchaToken?: string;
}
interface AllowCredentials {
    type: string;
    id: string;
    transports?: string[];
}
export interface IWebAuthnPreLoginResponse {
    challenge: string;
    allowCredentials?: AllowCredentials[];
    timeout?: number;
    rpId?: string;
    userVerification?: UserVerificationRequirement;
}
export interface IWebAuthnPostLogin {
    id: string;
    recaptchaToken?: string;
    invitationToken?: string;
    response: WebAuthnLoginResponse;
}
export interface ICreateNewDeviceSessionResponse {
    rp: {
        name: string;
        id: string;
        icon?: string;
    };
    user: {
        id: string;
        name: string;
        displayName: string;
    };
    challenge: string;
    pubKeyCredParams: Array<{
        type: 'public-key';
        alg: number;
    }>;
    excludeCredentials?: AllowCredentials[];
    timeout?: number;
    authenticatorSelection?: AuthenticatorSelectionCriteria;
}
interface IWebAuthnRegisterResponse {
    clientDataJSON: string;
    attestationObject: string;
}
export interface IVerifyNewWebAuthnDevice {
    id: string;
    response: IWebAuthnRegisterResponse;
}
export declare enum SecondaryAuthStrategy {
    WebAuthnPlatform = "WebAuthnPlatform",
    WebAuthnCrossPlatform = "WebAuthnCrossPlatform",
    SmsCode = "SmsCode"
}
export interface IAuthStrategyConfig {
    strategy: SecondaryAuthStrategy;
    isActive: boolean;
}
export interface IAuthStrategiesConfig {
    secondaryAuthStrategies: IAuthStrategyConfig[];
}
